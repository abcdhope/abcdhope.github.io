<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>geeRPC</title>
      <link href="/62342.html"/>
      <url>/62342.html</url>
      
        <content type="html"><![CDATA[<h1 id="GeeRPC"><a href="#GeeRPC" class="headerlink" title="GeeRPC"></a>GeeRPC</h1><p>本章开始学习<a href="https://geektutu.com/post/geerpc.html">7天用Go从零实现RPC框架GeeRPC</a></p><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，允许调用不同进程空间的程序。也就是说一个程序在机器A，而另一个程序在机器B，当A的程序想要调用B的程序时，需要通过网络来传输数据。</p><h2 id="RPC框架需要解决的问题"><a href="#RPC框架需要解决的问题" class="headerlink" title="RPC框架需要解决的问题"></a>RPC框架需要解决的问题</h2><ul><li><p>通信方式</p><p>RPC首先要解决的是两个程序之间的通信方式，如果这个两个应用程序位于不同的机器，那么一般会选择 <strong>TCP 协议</strong>或者 <strong>HTTP 协议</strong>；那如果两个应用程序位于相同的机器，也可以选择 <strong>Unix Socket</strong> 协议。</p></li><li><p>编码格式</p><p>当两个程序在传输数据的过程中需要对数据进行编码，那么就需要确定报文的编码格式，最常用的是<strong>JSON</strong>或<strong>XML</strong>，如果报文过大，也可以选择<strong>protobuf</strong>等编码格式。</p></li><li><p>注册中心(registry)和负载均衡(load balance)</p><p>当服务端的实例很多时，客户端需要选择一个实例进行通信来获取结果。这时服务端可以在启动时将自己注册到注册中心，客户端在<strong>注册中心</strong>选择一个进行通信，这样服务端和客户端只需要感知注册中心的存在而不需要感知对方的位置。注册中心通常还需要实现<strong>服务动态添加、删除</strong>，使用<strong>心跳</strong>确保服务处于可用状态等功能。</p></li><li><p>公共能力</p><p>假设服务端是由不同的团队提供，RPC框架可以提供公共的能力来为不同的服务使用，例如消息编解码、连接池、收发线程、超时处理等技术，避免了重复劳动。</p></li></ul><h1 id="Day1-服务端与消息编码"><a href="#Day1-服务端与消息编码" class="headerlink" title="Day1 服务端与消息编码"></a>Day1 服务端与消息编码</h1><p>本章的主要目标是：</p><ul><li>使用 <code>encoding/gob</code> 实现消息的编解码(序列化与反序列化)</li><li>实现一个简易的服务端，仅接受消息，不处理。</li></ul><h2 id="消息的序列化与反序列化（编码与解码）"><a href="#消息的序列化与反序列化（编码与解码）" class="headerlink" title="消息的序列化与反序列化（编码与解码）"></a>消息的序列化与反序列化（编码与解码）</h2><p>一个典型的RPC调用如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"Arith.Multiply"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，客户端发送的请求包括服务名（结构名）<code>Arith</code>、方法名<code>Multiply</code>、参数<code>args</code>这三个，服务端返回错误<code>error</code>、返回值<code>reply</code>这两个。</p><p>将客户端和服务端的参数和返回值抽象为<code>body</code>，剩下的信息（服务名、方法名、错误）存入结构<code>Header</code>中，因此<code>Header</code>的结构如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Header，存放客户端请求的服务、方法以及服务端返回的错误</span><span class="token keyword">type</span> Header <span class="token keyword">struct</span><span class="token punctuation">{</span>ServiceMethod <span class="token builtin">string</span><span class="token comment">//例如Arith.Multiply</span>Seq <span class="token builtin">uint64</span><span class="token comment">//请求序号，区分不同的请求</span>Error <span class="token builtin">string</span><span class="token comment">//错误信息，客户端为空，服务端若有错误则置入其中</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于存在不同的编解码方式（gob、json），为了能够使用不同的编解码方式，抽象出对消息体进行编解码的接口 Codec，该接口中定义编解码函数、链接关闭函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//为了能够调用不同的编解码函数，抽象它们的函数</span><span class="token keyword">type</span> Codec <span class="token keyword">interface</span> <span class="token punctuation">{</span>io<span class="token punctuation">.</span>Closer                         <span class="token comment">//关闭链接方法</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span>         <span class="token comment">//解码Header内容</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span>       <span class="token comment">//解码Body内容</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">*</span>Header<span class="token punctuation">,</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token comment">//对Header和Body编码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GOb结构"><a href="#GOb结构" class="headerlink" title="GOb结构"></a>GOb结构</h3><p>定义Gob结构，结构中包含请求链接、链接的缓冲、编码对象、解码对象：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义gob结构体，里面存放请求链接、编码、解码、缓冲</span><span class="token keyword">type</span> GobCodec <span class="token keyword">struct</span> <span class="token punctuation">{</span>conn io<span class="token punctuation">.</span>ReadWriteCloser <span class="token comment">//请求链接</span>buf  <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Writer      <span class="token comment">//防止阻塞而创建的带缓冲的 Writer</span>dec  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Decoder       <span class="token comment">//解码</span>enc  <span class="token operator">*</span>gob<span class="token punctuation">.</span>Encoder       <span class="token comment">//编码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义构造函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//构造函数</span><span class="token keyword">func</span> <span class="token function">NewGobCodec</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> Codec <span class="token punctuation">{</span>buf <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>GobCodec<span class="token punctuation">{</span>conn<span class="token punctuation">:</span> conn<span class="token punctuation">,</span>buf<span class="token punctuation">:</span>  buf<span class="token punctuation">,</span>dec<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span>enc<span class="token punctuation">:</span>  gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义4个函数以实现接口:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">ReadHeader</span><span class="token punctuation">(</span>h <span class="token operator">*</span>Header<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">ReadBody</span><span class="token punctuation">(</span>body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>h <span class="token operator">*</span>Header<span class="token punctuation">,</span> body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span>buf<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//清除缓冲</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//编码</span><span class="token comment">//对header编码</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc codec: gob error encoding header:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//对body编码</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc codec: gob error encoding body:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//关闭链接</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>GobCodec<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h2><p>在http报文中分为header和body两部分，<strong>header</strong>中的<code>content-Type</code>和<code>Content-Length</code>指定body的格式和长度，服务端通过解析 header 就能够知道如何从 body 中读取需要的信息，在RPC协议中，这部分内容是自己定义的，一般情况下，在报文的最开始会规划固定的字节来协商相关的信息。例如：第1个字节用来表示序列化方式，第2个字节表示压缩方式，第3-6字节表示 header 的长度，7-10 字节表示 body 的长度。</p><p>在geerpc中，需要确定的是序列化方式，由于本章只定义了Gob，因此序列化方式只有一种。除了确定序列化方式，还需要确定报文发送方是谁，因此定义一个常量来标志这个报文来自客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义配置信息，即客户端的传输方式</span><span class="token comment">//定义客户端请求标志</span><span class="token keyword">const</span> MagicNumber <span class="token operator">=</span> <span class="token number">0x3bef5c</span><span class="token comment">//定义结构，包含请求标志和解码方式</span><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">{</span>MagicNumber <span class="token builtin">int</span>CodeType    codec<span class="token punctuation">.</span>Type<span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">var</span> DefaultOption <span class="token operator">=</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>MagicNumber<span class="token punctuation">:</span> MagicNumber<span class="token punctuation">,</span>CodeType<span class="token punctuation">:</span>    codec<span class="token punctuation">.</span>GobType<span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GeeRPC 客户端固定采用 <strong>JSON</strong> 编码 Option，后续的 header 和 body 的编码方式由 Option 中的 <strong>CodeType</strong> 指定，服务端首先使用 JSON 解码 Option，然后通过 Option 的 CodeType 解码剩余的内容，因此报文的内容格式为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">|</span> Option<span class="token punctuation">{</span>MagicNumber<span class="token punctuation">:</span> xxx<span class="token punctuation">,</span> CodecType<span class="token punctuation">:</span> xxx<span class="token punctuation">}</span> <span class="token operator">|</span> Header<span class="token punctuation">{</span>ServiceMethod <span class="token operator">...</span><span class="token punctuation">}</span> <span class="token operator">|</span> Body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span><span class="token operator">|</span> <span class="token operator">&lt;-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>      固定 JSON 编码      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">|</span> <span class="token operator">&lt;-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>   编码方式由 CodeType 决定   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于传输的内容不止一个，因此Header和body可能不止一个：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">|</span> Option <span class="token operator">|</span> Header1 <span class="token operator">|</span> Body1 <span class="token operator">|</span> Header2 <span class="token operator">|</span> Body2 <span class="token operator">|</span> <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>利用<code>net.Listen</code>函数来开启监听，利用<code>Accept</code>函数来接收客户端的请求，然后开启goroutine来并行启动业务。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义服务端</span><span class="token keyword">type</span> Server <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//返回空结构</span><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment">//定义接收方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lis net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> lis<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: accept error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span> <span class="token comment">//处理请求，即报文内容</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个默认的服务端对象，并定义一个函数来调用<code>Accept</code>方法，这样的目的是方便调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义默认服务端对象</span><span class="token keyword">var</span> DefaultServer <span class="token operator">=</span> <span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Accept</span><span class="token punctuation">(</span>lis net<span class="token punctuation">.</span>Listener<span class="token punctuation">)</span> <span class="token punctuation">{</span> DefaultServer<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在的重点就是<code>ServeConn</code>方法，该方法就是对报文的处理，在本章的作用是按照刚才的设定来编解码报文内容：首先是读取头部内容，根据头部信息来选择编解码类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//对头部解码，并根据读取到的Option来选取剩下的报文内容的解码方式</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ServeConn</span><span class="token punctuation">(</span>conn io<span class="token punctuation">.</span>ReadWriteCloser<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//定义变量来存放Option</span><span class="token keyword">var</span> option Option<span class="token comment">//解码</span><span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>option<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: 头部的配置信息出现错误: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//判断请求标志是否正确</span><span class="token keyword">if</span> option<span class="token punctuation">.</span>MagicNumber <span class="token operator">!=</span> MagicNumber <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rpc server: 无效的请求标志 %x"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>MagicNumber<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//根据读取的codecType来选择构造函数</span>f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>option<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span><span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rpc server: 无效的编解码类型 %s"</span><span class="token punctuation">,</span> option<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//开始对报文内容解码</span>server<span class="token punctuation">.</span><span class="token function">serveCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//输入为Codec对象</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择了编解码方式后，定义方法<code>serveCodec</code>实现对报文内容的处理。</p><p>报文内容的处理分为三个阶段：</p><ul><li>读取请求报文</li><li>处理请求报文</li><li>回复请求</li></ul><p>由于在一次连接中有许多请求，因此需要无限制的等待请求，直到错误（连接关闭，或报文有问题）。虽然处理请求可以并发进行，但回复请求需要逐个发送，因为并发发送会导致多个报文交织在一起，因此需要用锁来保证发送顺序。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">serveCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//定义锁</span>sending <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span>wg <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span><span class="token comment">//读取报文、处理报文、回复报文</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token comment">//读取报文</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//如果读取的报文为空，则停止循环</span><span class="token keyword">if</span> req <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token comment">//将错误信息添加至结构中</span>req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//回复</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//处理报文，处理结束后调用回复方法</span><span class="token keyword">go</span> server<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">,</span> sending<span class="token punctuation">,</span> wg<span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token comment">//等待所有协程结束</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中读取、处理、回复三大方法如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义读取流程、处理流程、回复流程</span><span class="token comment">//定义结构体，用于存放读取的内容</span><span class="token keyword">type</span> request <span class="token keyword">struct</span> <span class="token punctuation">{</span>h            <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header <span class="token comment">//结构名、方法名、请求序列号、错误信息</span>argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value <span class="token comment">//方法参数、回复内容</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> h codec<span class="token punctuation">.</span>Header<span class="token comment">//将解码的内容写入到h中</span><span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>ErrUnexpectedEOF <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: 读取Header错误: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>h<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//读取header</span>h<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//定义request对象，存储内容</span>req <span class="token operator">:=</span> <span class="token operator">&amp;</span>request<span class="token punctuation">{</span>h<span class="token punctuation">:</span> h<span class="token punctuation">}</span><span class="token comment">// TODO: now we don't know the type of request argv</span><span class="token comment">// day 1, just suppose it's string</span>req<span class="token punctuation">.</span>argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: 读取方法参数错误: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> req<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">sendResponse</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> header <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">,</span> body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//编码</span><span class="token keyword">if</span> err <span class="token operator">:=</span> cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: 回复出现错误: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO, should call registered rpc methods to get the right replyv</span><span class="token comment">// day 1, just print argv and send a hello message</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//打印结构方法、参数</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//仅回复该请求的序号</span>req<span class="token punctuation">.</span>replyv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"geerpc resp %d"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//回复</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个结构体，用于存放读取的信息，即<code>Header</code>、<code>body</code>，<code>readRequest</code>包含了对<code>Header</code>的读取，由于不知道主体内容的数据类型，这里假设为string类型，且调用reflect库的对象来读取内容。</p><p>读取内容之后，对内容进行处理，这里只是输出请求的序列号，通过<code>sendResponse</code>发送给客户端。发送的方式为调用codec的函数Write来编码<code>header</code>和新<code>body</code>（即序列号）。</p><h2 id="主函数（客户端）"><a href="#主函数（客户端）" class="headerlink" title="主函数（客户端）"></a>主函数（客户端）</h2><p>主函数调用服务端并定义一个简单的客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开启监听端口</span>l<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"network error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start rpc server on"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//将地址发送</span>addr <span class="token operator">&lt;-</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token comment">//实现客户端</span>conn<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token comment">//编码头部信息</span><span class="token boolean">_</span> <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>geerpc<span class="token punctuation">.</span>DefaultOption<span class="token punctuation">)</span><span class="token comment">//定义编解码</span>cc <span class="token operator">:=</span> codec<span class="token punctuation">.</span><span class="token function">NewGobCodec</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token comment">//发送消息和接收消息</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//定义header</span>h <span class="token operator">:=</span> <span class="token operator">&amp;</span>codec<span class="token punctuation">.</span>Header<span class="token punctuation">{</span>ServiceMethod<span class="token punctuation">:</span> <span class="token string">"Foo.Sum"</span><span class="token punctuation">,</span>Seq<span class="token punctuation">:</span>           <span class="token function">uint64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"geerpc req %d"</span><span class="token punctuation">,</span> h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//读取消息</span><span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token keyword">var</span> reply <span class="token builtin">string</span><span class="token boolean">_</span> <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>reply<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"reply:"</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个<code>chan string</code>类型的addr，addr负责接收地址，然后将地址发给客户端。服务端的开启由一个函数来实现，主要是调用<code>net.Listen</code>来开启监听，然后<code>Accept</code>函数来开始处理请求。</p><p>客户端调用默认的配置信息作为头部，然后for循环发送请求，每一次循环写入新的信息且读取发回的信息。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">abcdhope@A1003<span class="token punctuation">:</span>~<span class="token operator">/</span>goexer<span class="token operator">/</span>gee_rpc<span class="token operator">/</span>day1_codec<span class="token operator">/</span>main$ <span class="token keyword">go</span> run main<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">27</span> start rpc server on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">33585</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">0</span> <span class="token punctuation">}</span> geerpc req <span class="token number">0</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> reply<span class="token punctuation">:</span> geerpc resp <span class="token number">0</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">1</span> <span class="token punctuation">}</span> geerpc req <span class="token number">1</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> reply<span class="token punctuation">:</span> geerpc resp <span class="token number">1</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">2</span> <span class="token punctuation">}</span> geerpc req <span class="token number">2</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> reply<span class="token punctuation">:</span> geerpc resp <span class="token number">2</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">3</span> <span class="token punctuation">}</span> geerpc req <span class="token number">3</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> reply<span class="token punctuation">:</span> geerpc resp <span class="token number">3</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">4</span> <span class="token punctuation">}</span> geerpc req <span class="token number">4</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">19</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">38</span><span class="token punctuation">:</span><span class="token number">28</span> reply<span class="token punctuation">:</span> geerpc resp <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day2-高性能客户端"><a href="#Day2-高性能客户端" class="headerlink" title="Day2 高性能客户端"></a>Day2 高性能客户端</h1><p>+　实现一个支持异步和并发的高性能客户端</p><h2 id="Call的设计"><a href="#Call的设计" class="headerlink" title="Call的设计"></a>Call的设计</h2><p>Call的作用在于存放传送的信息，包括方法名、相关参数以及服务器返回的信息，并且设定一个通道用于判断是否传送完成，若传送完成则定义的对象接收通知：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义调用一次RPC所需要的信息</span><span class="token keyword">type</span> Call <span class="token keyword">struct</span> <span class="token punctuation">{</span>Seq           <span class="token builtin">uint64</span>      <span class="token comment">//请求序号</span>ServiceMethod <span class="token builtin">string</span>      <span class="token comment">//服务方法名字</span>Args          <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//方法参数</span>Reply         <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//回复内容</span>Error         <span class="token builtin">error</span>       <span class="token comment">//返回的错误信息</span>Done          <span class="token keyword">chan</span> <span class="token operator">*</span>Call  <span class="token comment">//请求处理完成后，通知调用方,以便于异步调用</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>call<span class="token punctuation">.</span>Done <span class="token operator">&lt;-</span> call<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端结构中包含以下内容：</p><ul><li>编解码器，即自定义的<code>Codec</code>，输入为链接，得到编解码器；</li><li>互斥锁，该锁的作用为在客户端发送请求时防止报文混淆以及在其他方面例如关闭链接；</li><li><code>Header</code>文件，其文件里是方法名、序号、服务器返回的错误信息；</li><li>请求编号，用于确定请求信息的序号；</li><li>链接关闭信号，该信号分为两种，一种是服务器关闭链接的信号，一种是客户端关闭链接的信号；</li><li>存放未处理完的请求的哈希表，键为编号，值为<code>Call</code>对象，当请求完成后从表中删除。</li></ul><p>针对以上需求，构造客户端结构为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//客户端</span><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>cc       codec<span class="token punctuation">.</span>Codec      <span class="token comment">//链接，用于编解码</span>opt      <span class="token operator">*</span>Option          <span class="token comment">//编解码配置</span>sending  sync<span class="token punctuation">.</span>Mutex       <span class="token comment">//发送中的锁</span>mu       sync<span class="token punctuation">.</span>Mutex       <span class="token comment">//平时用的锁</span>header   <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header    <span class="token comment">//header信息,包括客户端请求的服务、方法以及服务端返回的错误</span>seq      <span class="token builtin">uint64</span>           <span class="token comment">//请求序号</span>pending  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call <span class="token comment">//存放未完成的请求</span>closing  <span class="token builtin">bool</span>             <span class="token comment">//客户端主动终止链接</span>shutdown <span class="token builtin">bool</span>             <span class="token comment">//服务器终止链接</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且定义链接关闭方法以及判定链接是否关闭的方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义shutdown终止信息</span><span class="token keyword">var</span> ErrShutDown <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"链接被服务器关闭"</span><span class="token punctuation">)</span><span class="token comment">//关闭链接</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> client<span class="token punctuation">.</span>shutdown <span class="token punctuation">{</span><span class="token keyword">return</span> ErrShutDown<span class="token punctuation">}</span><span class="token comment">//关闭链接</span>client<span class="token punctuation">.</span>closing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">return</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//判断链接是否存活</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">IsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">!</span>client<span class="token punctuation">.</span>closing <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>client<span class="token punctuation">.</span>shutdown<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义变量来测试该结构是否符合<code>io.closer</code>接口的类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token boolean">_</span> io<span class="token punctuation">.</span>Closer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面定义注册call方法以及从哈希表中删除call的方法和当链接关闭时对call对象的处理方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义关于Call的方法，即注册到哈希表中、删除表、以及链接关闭时将其他正在处理的请求标志为完成状态</span><span class="token comment">//注册请求</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">registerCall</span><span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> client<span class="token punctuation">.</span>closing <span class="token operator">||</span> client<span class="token punctuation">.</span>shutdown <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrShutDown<span class="token punctuation">}</span><span class="token comment">//赋予编号</span>call<span class="token punctuation">.</span>Seq <span class="token operator">=</span> client<span class="token punctuation">.</span>seqclient<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>client<span class="token punctuation">.</span>seq<span class="token punctuation">]</span> <span class="token operator">=</span> call<span class="token comment">//增大编号</span>client<span class="token punctuation">.</span>seq<span class="token operator">++</span><span class="token keyword">return</span> call<span class="token punctuation">.</span>Seq<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//删除请求</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">removeCall</span><span class="token punctuation">(</span>seq <span class="token builtin">uint64</span><span class="token punctuation">)</span> <span class="token operator">*</span>Call <span class="token punctuation">{</span>client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>call <span class="token operator">:=</span> client<span class="token punctuation">.</span>pending<span class="token punctuation">[</span>seq<span class="token punctuation">]</span><span class="token function">delete</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> seq<span class="token punctuation">)</span><span class="token keyword">return</span> call<span class="token punctuation">}</span><span class="token comment">//当链接关闭时调用</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">terminateCall</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//防止继续将请求发送给服务端</span>client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//防止对请求进行操作</span>client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//输入错误信息以及完成标志</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> call <span class="token operator">:=</span> <span class="token keyword">range</span> client<span class="token punctuation">.</span>pending <span class="token punctuation">{</span>call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>call<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端接收响应"><a href="#客户端接收响应" class="headerlink" title="客户端接收响应"></a>客户端接收响应</h2><p>接收响应存在三种情况：</p><ul><li>call不存在，但是服务端还是在处理请求；</li><li>call存在，但是服务端在处理请求时出现错误；</li><li>call存在，服务端正常处理请求并返回。</li></ul><p>针对这三种情况，可采用<code>switch</code>标识符来进行判断，第一种判断的条件为哈希表中是否存有该call,不存在则返回读取空内容发生的错误信息；第二种情况为判断传回来的header对象中error是否为空,不为空则该错误置入call对象中，并且生成一个读取空内容的错误；第三种就是默认情况，读取返回的内容,若读取出现错误则将该错误存入call对象中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//接收服务端返回的信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token comment">//一直接收，直到出错</span><span class="token keyword">for</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//读取header</span><span class="token keyword">var</span> h codec<span class="token punctuation">.</span>Header<span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadHeader</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token comment">//找到目标call</span>call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token keyword">switch</span> <span class="token punctuation">{</span><span class="token keyword">case</span> call <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">:</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">case</span> h<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span><span class="token comment">//转换为错误对象</span>call<span class="token punctuation">.</span>Error <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>Error<span class="token punctuation">)</span> <span class="token comment">//将错误存入到Call之后呢？</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Reply<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>call<span class="token punctuation">.</span>Error <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"读取内容错误："</span> <span class="token operator">+</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>call<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//通知其他未完成的请求并将shutdown置为true，防止其他请求也收到同样地错误</span>client<span class="token punctuation">.</span><span class="token function">terminateCall</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 Client 实例时，首先需要完成一开始的协议交换，即发送 <code>Option</code> 信息给服务端。协商好消息的编解码方式之后，再创建一个子协程调用 <code>receive()</code> 接收响应。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//读取编解码方式，并初始化客户端</span><span class="token keyword">func</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//编解码方式</span>f <span class="token operator">:=</span> codec<span class="token punctuation">.</span>NewCodecFuncMap<span class="token punctuation">[</span>opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">]</span><span class="token keyword">if</span> f <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"不存在该编解码方式:%s"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>CodecType<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"客户端选择编解码方式失败："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//编码option，发送给服务端</span><span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"客户端发送编解码配置失败: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token comment">//关闭链接</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//定义初始化客户端函数，同时开启接收方法</span><span class="token keyword">func</span> <span class="token function">newClientCodec</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>Client <span class="token punctuation">{</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>Client<span class="token punctuation">{</span>cc<span class="token punctuation">:</span>      cc<span class="token punctuation">,</span>opt<span class="token punctuation">:</span>     opt<span class="token punctuation">,</span>pending<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">uint64</span><span class="token punctuation">]</span><span class="token operator">*</span>Call<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">go</span> client<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> client<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了能够简便地创建配置，将option输入改为流形式来作为输入，即输入可以为<code>[]、[Option]</code>，若输入为这些则输出默认配置,否则自定义配置：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//简化可选参数option</span><span class="token keyword">func</span> <span class="token function">parseOption</span><span class="token punctuation">(</span>opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Option<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断输入为空数组或者空结构</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> opts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> DefaultOption<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//判断输入的数量是否超过1个</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"配置选项的个数超过了1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>opt <span class="token operator">:=</span> opts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>opt<span class="token punctuation">.</span>MagicNumber <span class="token operator">=</span> DefaultOption<span class="token punctuation">.</span>MagicNumber<span class="token keyword">if</span> opt<span class="token punctuation">.</span>CodecType <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>opt<span class="token punctuation">.</span>CodecType <span class="token operator">=</span> DefaultOption<span class="token punctuation">.</span>CodecType<span class="token punctuation">}</span><span class="token keyword">return</span> opt<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到可选的配置为编解码方式，而标志位可以采取默认配置。</p><p>下面创建链接用于通信，并创建客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//开启端口，并创建客户端</span><span class="token keyword">func</span> <span class="token function">Dial</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获得参数</span>opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseOption</span><span class="token punctuation">(</span>opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//创建链接</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//若为空说明编码配置的过程中出错</span><span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端发送请求"><a href="#客户端发送请求" class="headerlink" title="客户端发送请求"></a>客户端发送请求</h2><p>客户端读取Call对象中的参数、方法，并将Call对象进行注册赋予编号，然后发送header、args，若出错则将错误写入对象中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">send</span><span class="token punctuation">(</span>call <span class="token operator">*</span>Call<span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span>sending<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//注册call</span>seq<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">registerCall</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>call<span class="token punctuation">.</span>Error <span class="token operator">=</span> errcall<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//定义header</span>client<span class="token punctuation">.</span>header<span class="token punctuation">.</span>ServiceMethod <span class="token operator">=</span> call<span class="token punctuation">.</span>ServiceMethodclient<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Seq <span class="token operator">=</span> seqclient<span class="token punctuation">.</span>header<span class="token punctuation">.</span>Error <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">//发送信息</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span>cc<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>client<span class="token punctuation">.</span>header<span class="token punctuation">,</span> call<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token comment">//call可能为nil，这通常意味着写入部分失败。客户端已经收到响应并处理了</span><span class="token keyword">if</span> call <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>call<span class="token punctuation">.</span>Error <span class="token operator">=</span> errcall<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义接口，用于外部传入信息并根据信息创建Call对象，随后发送信息：</p><pre class="line-numbers language-gp" data-language="gp"><code class="language-gp">//创建call对象，客户端发送信息func (client *Client) Go(serviceMethod string, args, reply interface{}, done chan *Call) *Call {//如果初始化了但没有长度为0if done == nil {done = make(chan *Call, 10)//没有初始化} else if cap(done) == 0 {log.Panic("rpc client: done channel is unbuffered")}call := &amp;Call{ServiceMethod: serviceMethod,Args:          args,Reply:         reply,Done:          done,}client.send(call)return call}//封装Go，用于阻塞call.Done，等待响应返回func (client *Client) Call(serviceMethod string, args, reply interface{}) error {call := &lt;-client.Go(serviceMethod, args, reply, make(chan *Call, 1)).Donereturn call.Error}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Call方法是对Go方法的进一步封装，目的在于等待响应返回。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>对主函数进行改写，主要为客户端的改写：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//开启监听端口</span>l<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"network error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start rpc server on"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//将地址发送</span>addr <span class="token operator">&lt;-</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token comment">//实现客户端</span>client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token comment">//发送消息和接收消息</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>args <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"geerpc req %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">var</span> reply <span class="token builtin">string</span><span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"Foo.Sum"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"call Foo.Sum error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用并发操作，创建5个rpc需求，返回消息：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">48</span> start rpc server on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">36733</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">4</span> <span class="token punctuation">}</span> geerpc req <span class="token number">3</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">2</span> <span class="token punctuation">}</span> geerpc req <span class="token number">0</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">1</span> <span class="token punctuation">}</span> geerpc req <span class="token number">1</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">3</span> <span class="token punctuation">}</span> geerpc req <span class="token number">2</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> <span class="token operator">&amp;</span><span class="token punctuation">{</span>Foo<span class="token punctuation">.</span>Sum <span class="token number">0</span> <span class="token punctuation">}</span> geerpc req <span class="token number">4</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> geerpc resp <span class="token number">0</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> geerpc resp <span class="token number">4</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> geerpc resp <span class="token number">3</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> geerpc resp <span class="token number">1</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">22</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">49</span> geerpc resp <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day3-服务注册"><a href="#Day3-服务注册" class="headerlink" title="Day3 服务注册"></a>Day3 服务注册</h1><ul><li>通过反射实现服务注册功能</li><li>在服务端实现服务调用</li></ul><p>对 <code>net/rpc</code> 而言，一个函数需要能够被远程调用，需要满足如下五个条件：</p><ul><li>the method’s type is exported. – 方法所属<strong>类型</strong>是<strong>导出</strong>的。</li><li>the method is exported. – 方法是<strong>导出</strong>的。</li><li>the method has two arguments, both exported (or builtin) types. – 两个入参，均为导出或内置类型。</li><li>the method’s second argument is a pointer. – 第二个入参必须是一个指针，原因为第二个参数为返回参数，在服务端进行处理时需要将值写进参数中，这时客户端可以读取该值。</li><li>the method has return type error. – 返回值为 error 类型。</li></ul><p>例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token function">MethodName</span><span class="token punctuation">(</span>argType T1<span class="token punctuation">,</span> replyType <span class="token operator">*</span>T2<span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="通过反射实现service"><a href="#通过反射实现service" class="headerlink" title="通过反射实现service"></a>通过反射实现service</h2><p>定义方法结构体，结构体内部存放方法和相关参数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> methodType <span class="token keyword">struct</span> <span class="token punctuation">{</span>method    reflect<span class="token punctuation">.</span>MethodArgType   reflect<span class="token punctuation">.</span>TypeReplyType reflect<span class="token punctuation">.</span>TypenumCalls  <span class="token builtin">uint64</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义初始化方法，用于提取存放的参数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">NumCalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uint64</span> <span class="token punctuation">{</span><span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>numCalls<span class="token punctuation">)</span> <span class="token comment">//返回加载到*addr的值</span><span class="token punctuation">}</span><span class="token comment">//定义Arg</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">newArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Value <span class="token punctuation">{</span><span class="token keyword">var</span> argv reflect<span class="token punctuation">.</span>Value<span class="token comment">//指针类型</span><span class="token keyword">if</span> m<span class="token punctuation">.</span>ArgType<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ArgType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>argv <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ArgType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//值类型转换为指针指向的值</span><span class="token punctuation">}</span><span class="token keyword">return</span> argv<span class="token punctuation">}</span><span class="token comment">//定义ReplyType</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">)</span> <span class="token function">newReplyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> reflect<span class="token punctuation">.</span>Value <span class="token punctuation">{</span><span class="token comment">// reply must be a pointer type</span>replyv <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//查找</span><span class="token keyword">switch</span> m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>replyv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MakeMap</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span>replyv<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">MakeSlice</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>ReplyType<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> replyv<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义结构体<code>service</code>，使得该结构体能够解析输入的结构体对象，并寻找满足条件的方法，此处的条件为：输入参数的个数为3个，输出参数为1个，且输入参数为结构体对象<code>rcvr</code>、方法的参数<code>Args</code>、返回的参数<code>reply</code>，输出的参数为<code>error</code>:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> service <span class="token keyword">struct</span> <span class="token punctuation">{</span>name   <span class="token builtin">string</span>                 <span class="token comment">//结构体名称</span>typ    reflect<span class="token punctuation">.</span>Type           <span class="token comment">//结构体类型</span>rcvr   reflect<span class="token punctuation">.</span>Value          <span class="token comment">//结构体对象</span>method <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType <span class="token comment">//映射的结构体的所有符合条件的方法。</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newService</span><span class="token punctuation">(</span>rcvr <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>service <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span>s<span class="token punctuation">.</span>rcvr <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span>s<span class="token punctuation">.</span>name <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>rcvr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>typ <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"rpc server: %s is not a valid service name"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">registerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType<span class="token punctuation">)</span><span class="token comment">//寻找满足条件的方法</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>method <span class="token operator">:=</span> s<span class="token punctuation">.</span>typ<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">//第i个方法</span>mType <span class="token operator">:=</span> method<span class="token punctuation">.</span>Type<span class="token comment">//如果入参的个数不为3(第一个入参为结构体对象本身)或输出参数的个数不为1</span><span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">NumIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span> <span class="token operator">||</span> mType<span class="token punctuation">.</span><span class="token function">NumOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">//如果</span><span class="token keyword">if</span> mType<span class="token punctuation">.</span><span class="token function">Out</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span>argType<span class="token punctuation">,</span> replyType <span class="token operator">:=</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mType<span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//判断类型是否导出</span><span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>argType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>replyType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span>method<span class="token punctuation">[</span>method<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>methodType<span class="token punctuation">{</span>method<span class="token punctuation">:</span>    method<span class="token punctuation">,</span>ArgType<span class="token punctuation">:</span>   argType<span class="token punctuation">,</span>ReplyType<span class="token punctuation">:</span> replyType<span class="token punctuation">,</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"rpc server: register %s.%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> method<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">isExportedOrBuiltinType</span><span class="token punctuation">(</span>t reflect<span class="token punctuation">.</span>Type<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">.</span><span class="token function">PkgPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加调用方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//调用方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>service<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>m <span class="token operator">*</span>methodType<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">//增加调用次数</span>atomic<span class="token punctuation">.</span><span class="token function">AddUint64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">.</span>numCalls<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>f <span class="token operator">:=</span> m<span class="token punctuation">.</span>method<span class="token punctuation">.</span>Func<span class="token comment">//利用反射调用方法</span>returnValue <span class="token operator">:=</span> f<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>s<span class="token punctuation">.</span>rcvr<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> replyv<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> errInter <span class="token operator">:=</span> returnValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> errInter <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errInter<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集成到服务端"><a href="#集成到服务端" class="headerlink" title="集成到服务端"></a>集成到服务端</h2><p>在服务端这部分，需要将所得的结构体存放在服务端中，因此利用<code>sync.Map</code>的<code>LoadOrStore</code>方法可以根据结构名来判断是否存有该结构体，若已经存有则表示已经调用过，因此不能再次存储。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">//存放服务（结构体）</span>serviceMap sync<span class="token punctuation">.</span>Map<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Register</span><span class="token punctuation">(</span>rcvr <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">//解析结构体</span>s <span class="token operator">:=</span> <span class="token function">newService</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> dup <span class="token operator">:=</span> server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">LoadOrStore</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> dup <span class="token punctuation">{</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc: 服务端已经存有该结构体: "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//调用</span><span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>rcvr <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> DefaultServer<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>rcvr<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来定义一个方法，根据输入的方法名来查找对应结构体以及方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">findService</span><span class="token punctuation">(</span>serviceMethod <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>svc <span class="token operator">*</span>service<span class="token punctuation">,</span> mtype <span class="token operator">*</span>methodType<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dot <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token keyword">if</span> dot <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc server: service/method request ill-formed: "</span> <span class="token operator">+</span> serviceMethod<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//读取方法名</span>serviceName<span class="token punctuation">,</span> methodName <span class="token operator">:=</span> serviceMethod<span class="token punctuation">[</span><span class="token punctuation">:</span>dot<span class="token punctuation">]</span><span class="token punctuation">,</span> serviceMethod<span class="token punctuation">[</span>dot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">//从Map中读取结构</span>svci<span class="token punctuation">,</span> ok <span class="token operator">:=</span> server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>serviceName<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc server: 没有在找到该服务: "</span> <span class="token operator">+</span> serviceName<span class="token punctuation">)</span><span class="token punctuation">}</span>svc <span class="token operator">=</span> svci<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>service<span class="token punctuation">)</span>mtype <span class="token operator">=</span> svc<span class="token punctuation">.</span>method<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token keyword">if</span> mtype <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc server: 没有找到该方法"</span> <span class="token operator">+</span> methodName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到对应的方法后，在<code>handleRequest</code>中就可以调用<code>service.call</code>方法来调用结构体的方法。在此之前，需要在<code>readRequest</code>方法里调用<code>findService</code>方法来找到所需的结构和方法，并将该结构和方法存入定义好的<code>request</code>结构中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> request <span class="token keyword">struct</span> <span class="token punctuation">{</span>h            <span class="token operator">*</span>codec<span class="token punctuation">.</span>Header <span class="token comment">//结构名、方法名、请求序列号、错误信息</span>argv<span class="token punctuation">,</span> replyv reflect<span class="token punctuation">.</span>Value <span class="token comment">//方法参数、回复内容</span>mtype        <span class="token operator">*</span>methodTypesvc          <span class="token operator">*</span>service<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">readRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>request<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//读取header</span>h<span class="token punctuation">,</span> err <span class="token operator">:=</span> server<span class="token punctuation">.</span><span class="token function">readRequestHeader</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//定义request对象，存储内容</span>req <span class="token operator">:=</span> <span class="token operator">&amp;</span>request<span class="token punctuation">{</span>h<span class="token punctuation">:</span> h<span class="token punctuation">}</span>req<span class="token punctuation">.</span>svc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> err <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">findService</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> req<span class="token punctuation">,</span> err<span class="token punctuation">}</span>req<span class="token punctuation">.</span>argv <span class="token operator">=</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">.</span><span class="token function">newArgv</span><span class="token punctuation">(</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>replyv <span class="token operator">=</span> req<span class="token punctuation">.</span>mtype<span class="token punctuation">.</span><span class="token function">newReplyv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断req.argv是否为指针</span>argvi <span class="token operator">:=</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span>Ptr <span class="token punctuation">{</span>argvi <span class="token operator">=</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//传入argvi</span><span class="token keyword">if</span> err <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">ReadBody</span><span class="token punctuation">(</span>argvi<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: 读取方法参数错误: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> req<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再调用处理方法来处理结构中存储的方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO, should call registered rpc methods to get the right replyv</span><span class="token comment">// day 1, just print argv and send a hello message</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> req<span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//回复</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>在主函数中定义结构、方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Foo <span class="token builtin">int</span><span class="token keyword">type</span> Args <span class="token keyword">struct</span><span class="token punctuation">{</span> Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后注册方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//注册方法</span><span class="token keyword">var</span> foo Foo<span class="token keyword">if</span> err <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"register error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//开启监听端口</span>l<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"network error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start rpc server on"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//将地址发送</span>addr <span class="token operator">&lt;-</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>geerpc<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后定义Args对象，客户端发送这个方法和参数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>addr <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token comment">//实现客户端</span>client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span>addr<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token comment">//发送消息和接收消息</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>args <span class="token operator">:=</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token keyword">var</span> reply <span class="token builtin">int</span><span class="token keyword">if</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"Foo.Sum"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"call Foo.Sum error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d + %d = %d"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的结果为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">34</span> rpc server<span class="token punctuation">:</span> register Foo<span class="token punctuation">.</span>Sum<span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">34</span> start rpc server on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">41431</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">23</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day4-超时处理"><a href="#Day4-超时处理" class="headerlink" title="Day4 超时处理"></a>Day4 超时处理</h1><p>在整个远程调用的过程中，客户端和服务端都有需要超时处理的地方：</p><ul><li>客户端<ul><li><strong>连接服务端</strong>超时</li><li>在发送请求到服务端之前，<strong>写报文</strong>导致超时</li><li><strong>等待服务端</strong>处理时导致超时</li><li>接收响应后，<strong>读报文</strong>导致超时</li></ul></li><li>服务端<ul><li><strong>读取</strong>客户端请求<strong>报文</strong>时，超时</li><li><strong>发送</strong>响应<strong>报文</strong>时，写报文超时</li><li>调用映射服务的方法时，<strong>处理报文</strong>导致超时</li></ul></li></ul><p>针对上述情况，在下列几处添加超时处理机制：</p><ul><li>客户端连接服务端</li><li>客户端调用Call方法（此处包括写报文、等待服务端处理、读报文，因为这些操作都发生在调用Call方法后）</li><li>服务端处理报文</li></ul><h2 id="创建连接超时"><a href="#创建连接超时" class="headerlink" title="创建连接超时"></a>创建连接超时</h2><p>在配置<code>Option</code>中添加连接时间限制和处理报文的时间限制，并在默认配置中添加默认时间：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Option <span class="token keyword">struct</span> <span class="token punctuation">{</span>MagicNumber    <span class="token builtin">int</span>           <span class="token comment">// MagicNumber marks this's a geerpc request</span>CodecType      codec<span class="token punctuation">.</span>Type    <span class="token comment">// client may choose different Codec to encode body</span>ConnectTimeout time<span class="token punctuation">.</span>Duration <span class="token comment">// 连接限制时间,0表示没有限制</span>HandleTimeout  time<span class="token punctuation">.</span>Duration<span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">var</span> DefaultOption <span class="token operator">=</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>MagicNumber<span class="token punctuation">:</span>    MagicNumber<span class="token punctuation">,</span>CodecType<span class="token punctuation">:</span>      codec<span class="token punctuation">.</span>GobType<span class="token punctuation">,</span>ConnectTimeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在客户端创建链接处和创建客户端处添加超时处理：创建链接的函数<code>net.Dial</code>改为能够进行超时处理的函数<code>net.DialTimeout</code>；针对创建客户端的超时处理，通过通道<code>channel</code>和<code>select</code>来进行超时处理：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//存放客户端，用于通道传送</span><span class="token keyword">type</span> clientResult <span class="token keyword">struct</span> <span class="token punctuation">{</span>client <span class="token operator">*</span>Clienterr    <span class="token builtin">error</span><span class="token punctuation">}</span><span class="token keyword">type</span> newClientFunc <span class="token keyword">func</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>f newClientFunc<span class="token punctuation">,</span> network <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">parseOption</span><span class="token punctuation">(</span>opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//创建链接,DialTimeout限制了链接时间，超过时间则表示连接失败</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">DialTimeout</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//延迟关闭链接，如果创建的客户端为空</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果创建客户端的时候出错，则关闭链接</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//利用通道来创建客户端</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> clientResult<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span>ch <span class="token operator">&lt;-</span> clientResult<span class="token punctuation">{</span>client<span class="token punctuation">:</span> client<span class="token punctuation">,</span> err<span class="token punctuation">:</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果ConnectTimeout==0，则不需要超时处理</span><span class="token keyword">if</span> opt<span class="token punctuation">.</span>ConnectTimeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token keyword">return</span> result<span class="token punctuation">.</span>client<span class="token punctuation">,</span> result<span class="token punctuation">.</span>err<span class="token punctuation">}</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"rpc client: 连接超时: 希望连接时间范围在%d"</span><span class="token punctuation">,</span> opt<span class="token punctuation">.</span>ConnectTimeout<span class="token punctuation">)</span><span class="token keyword">case</span> result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch<span class="token punctuation">:</span><span class="token keyword">return</span> result<span class="token punctuation">.</span>client<span class="token punctuation">,</span> result<span class="token punctuation">.</span>err<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建链接，并创建客户端</span><span class="token keyword">func</span> <span class="token function">Dial</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>NewClient<span class="token punctuation">,</span> network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Client-Call-超时"><a href="#Client-Call-超时" class="headerlink" title="Client.Call 超时"></a>Client.Call 超时</h2><p>利用<code>context</code>包来实现<code>Client.Call</code>方法的超时处理机制:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装Go，用于阻塞call.Done，等待响应返回</span><span class="token keyword">func</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>call <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Go</span><span class="token punctuation">(</span>serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>Call<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token comment">//通过设置的超时时间来完成事件</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>client<span class="token punctuation">.</span><span class="token function">removeCall</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>Seq<span class="token punctuation">)</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc client: call failed: "</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> call <span class="token operator">:=</span> <span class="token operator">&lt;-</span>call<span class="token punctuation">.</span>Done<span class="token punctuation">:</span><span class="token keyword">return</span> call<span class="token punctuation">.</span>Error<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端超时处理"><a href="#服务端超时处理" class="headerlink" title="服务端超时处理"></a>服务端超时处理</h2><p>服务端在处理报文的时候利用<code>select</code>和<code>time.After</code>添加超时处理。</p><p>创建两个通道：<code>called</code> 和<code>sent </code>，前者用于完成调用方法之后，而后者是完成发送报文之后。这两个通道与客户端的通道定义不同，后者由于需要返回客户端对象，因此定义了一个含有客户端对象的结构体，而前者不需要返回信息，因此通道里定义一个空结构体来表示完成操作：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>cc codec<span class="token punctuation">.</span>Codec<span class="token punctuation">,</span> req <span class="token operator">*</span>request<span class="token punctuation">,</span> sending <span class="token operator">*</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO, should call registered rpc methods to get the right replyv</span><span class="token comment">// day 1, just print argv and send a hello message</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//定义通道</span>called <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>sent <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> req<span class="token punctuation">.</span>svc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>mtype<span class="token punctuation">,</span> req<span class="token punctuation">.</span>argv<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">)</span>called <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span>sent <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//回复</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> req<span class="token punctuation">.</span>replyv<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sending<span class="token punctuation">)</span>sent <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//没有定义超时限制</span><span class="token keyword">if</span> timeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token operator">&lt;-</span>called<span class="token operator">&lt;-</span>sent<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>req<span class="token punctuation">.</span>h<span class="token punctuation">.</span>Error <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"prc server: 请求处理超时: 处理时间范围应在 %s"</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>cc<span class="token punctuation">,</span> req<span class="token punctuation">.</span>h<span class="token punctuation">,</span> invalidRequest<span class="token punctuation">,</span> sending<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>called<span class="token punctuation">:</span><span class="token operator">&lt;-</span>sent<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><p>首先测试客户端的连接超时是否有效：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestClient_dialTimeout</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开启监听</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span>f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//停顿2秒，用于超过限定时间</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"timeout"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>ConnectTimeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//设置超时范围为1秒</span><span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"连接超时"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"expect a timeout error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>ConnectTimeout<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"0 means no limit"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后测试处理超时，测试两个场景：</p><p>场景一：客户端设置超时时间为 1s，服务端无限制；场景二，服务端设置超时时间为1s，客户端无限制。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//测试处理超时</span><span class="token keyword">type</span> Bar <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>b Bar<span class="token punctuation">)</span> <span class="token function">TimeOut</span><span class="token punctuation">(</span>argv <span class="token builtin">int</span><span class="token punctuation">,</span> replyv <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> b Bar<span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token comment">// pick a free port</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span>addr <span class="token operator">&lt;-</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestClient_Call</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>addrCh <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addrCh<span class="token punctuation">)</span>addr <span class="token operator">:=</span> <span class="token operator">&lt;-</span>addrChtime<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"client timeout"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">var</span> reply <span class="token builtin">int</span>err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"Bar.TimeOut"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"expect a timeout error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"server handle timeout"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Option<span class="token punctuation">{</span>HandleTimeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> reply <span class="token builtin">int</span>err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Bar.TimeOut"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"请求处理超时"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"expect a timeout error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day5-支持HTTP协议"><a href="#Day5-支持HTTP协议" class="headerlink" title="Day5 支持HTTP协议"></a>Day5 支持HTTP协议</h1><p>在WEB中，通常利用HTTP协议的几个关键字如HEAD、GET、POST来发送请求，但是在rpc协议中它的消息格式与HTTP协议的消息格式并不兼容，针对此问题，HTTP协议的<strong>CONNECT</strong>方法充当<strong>代理服务</strong>来中转消息。</p><p>假设浏览器与服务器的HTTPS通信都是加密的，而浏览器请求的站点地址和端口被加密保存在HTTPS请求报文中，那么代理服务器该如何知道请求的站点和端口？</p><p>解决方案是：浏览器先通过HTTP协议<strong>明文传输</strong>站点地址和端口到代理服务器中，代理服务器接收到请求后，会在对应的站点和端口建立TCP连接，连接成功后返回HTTP 200状态码来告知浏览器与服务器的加密通道连接成功，之后浏览器可以通过代理服务器来传输HTTPS报文，而代理服务器仅将报文转发到服务器中。</p><p>例如：</p><ol><li>浏览器向代理服务器发送CONNECT请求：</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go">CONNECT geektutu<span class="token punctuation">.</span>com<span class="token punctuation">:</span><span class="token number">443</span> HTTP<span class="token operator">/</span><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>代理服务器返回200状态码表示连接已经建立：</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go">HTTP<span class="token operator">/</span><span class="token number">1.0</span> <span class="token number">200</span> Connection Established<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>之后浏览器和服务器开始 HTTPS 握手并交换加密数据，代理服务器只负责传输彼此的数据包，并不能读取具体数据内容（代理服务器也可以选择安装可信根证书解密 HTTPS 报文）。</li></ol><p>从上述过程得知，这个过程的作用是通过代理服务器将HTTP协议转换成HTTPS协议。而对于RPC服务端来说，需要将HTTP协议转换成RPC协议，对于客户端来说，需要通过HTTP CONNECT请求创建连接。</p><h2 id="服务端支持HTTP协议"><a href="#服务端支持HTTP协议" class="headerlink" title="服务端支持HTTP协议"></a>服务端支持HTTP协议</h2><p>RPC的通信过程为：</p><ol><li><p>客户端向RPC服务器发送CONNECT请求：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">CONNECT <span class="token number">10.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>_geerpc_ HTTP<span class="token operator">/</span><span class="token number">1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>RPC服务器返回HTTP 200状态码表示连接建立</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">HTTP<span class="token operator">/</span><span class="token number">1.0</span> <span class="token number">200</span> Connected to Gee RPC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>客户端使用创建好的连接发送RPC报文，先发送<code>Option</code>，再发送N个请求报文，服务器处理RPC请求并响应。</p></li></ol><p>让服务端支持HTTP协议，使得客户端能够向服务器发送CONNECT请求来创建请求链接，链接创建成功后，客户端使用创建好的连接发送 RPC 报文，先发送 Option，再发送 N 个请求报文，服务端处理 RPC 请求并响应。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义serveHTTP</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> req<span class="token punctuation">.</span>Method <span class="token operator">!=</span> <span class="token string">"CONNECT"</span> <span class="token punctuation">{</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"405 must CONNECT\n"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//在创建连接阶段使用HTTP连接，后续自己完全处理connection。</span>conn<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> w<span class="token punctuation">.</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>Hijacker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hijack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//req.RemoteAddr表示为IP:port</span>log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">"rpc hijacking "</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">,</span> <span class="token string">": "</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//连接成功后发送 HTTP/1.0 200 Connected to Gee RPC</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"HTTP/1.0 "</span><span class="token operator">+</span>connected<span class="token operator">+</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">ServeConn</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultRPCPath<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> DefaultServer<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器端定义<code>ServeHTTP</code>方法，使得客户端通过网址来发送请求链接，然后服务端通过<code>w.(http.Hijacker).Hijack()</code>来创建链接，该函数的作用就是创建链接然后来处理该链接，这样客户端可以发送报文给服务端，服务端可以处理报文返回处理信息。</p><h2 id="客户端支持HTTP协议"><a href="#客户端支持HTTP协议" class="headerlink" title="客户端支持HTTP协议"></a>客户端支持HTTP协议</h2><p>客户端负责发送CONNECT请求用于建立通信：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//利用CONNECT建立链接</span><span class="token keyword">func</span> <span class="token function">NewHTTPClient</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//写入CONNECT请求</span>io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"CONNECT %s HTTP/1.0\n\n"</span><span class="token punctuation">,</span> defaultRPCPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//从服务器读取链接成功信息</span>rep<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ReadResponse</span><span class="token punctuation">(</span>bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">{</span>Method<span class="token punctuation">:</span> <span class="token string">"CONNECT"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> rep<span class="token punctuation">.</span>Status <span class="token operator">==</span> connected <span class="token punctuation">{</span><span class="token comment">//调用RPC请求</span><span class="token keyword">return</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> opt<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>err <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"unexpected HTTP response: "</span> <span class="token operator">+</span> rep<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">DialHTTP</span><span class="token punctuation">(</span>network <span class="token builtin">string</span><span class="token punctuation">,</span> address <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span>client <span class="token operator">*</span>Client<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">dialTimeout</span><span class="token punctuation">(</span>NewHTTPClient<span class="token punctuation">,</span> network<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立一个API来选择创建链接方式：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// XDial calls different functions to connect to a RPC server</span><span class="token comment">// according the first parameter rpcAddr.</span><span class="token comment">// rpcAddr is a general format (protocol@addr) to represent a rpc server</span><span class="token comment">// eg, http@10.0.0.1:7001, tcp@10.0.0.1:9999, unix@/tmp/geerpc.sock</span><span class="token keyword">func</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> opts <span class="token operator">...</span><span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> <span class="token string">"@"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"rpc client err: wrong format '%s', expect protocol@addr"</span><span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span><span class="token punctuation">}</span>protocol<span class="token punctuation">,</span> address <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">switch</span> protocol <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"http"</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token function">DialHTTP</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token function">Dial</span><span class="token punctuation">(</span>protocol<span class="token punctuation">,</span> address<span class="token punctuation">,</span> opts<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试这个函数是否有效：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestXDial</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> runtime<span class="token punctuation">.</span>GOOS <span class="token operator">==</span> <span class="token string">"linux"</span> <span class="token punctuation">{</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>addr <span class="token operator">:=</span> <span class="token string">"/tmp/geerpc.sock"</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>l<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"unix"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to listen unix socket"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;-</span>ch<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">XDial</span><span class="token punctuation">(</span><span class="token string">"unix@"</span> <span class="token operator">+</span> addr<span class="token punctuation">)</span><span class="token function">_assert</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"failed to connect unix socket"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现简单的DEBUG页面"><a href="#实现简单的DEBUG页面" class="headerlink" title="实现简单的DEBUG页面"></a>实现简单的DEBUG页面</h2><p>支持 HTTP 协议的好处在于，RPC 服务仅仅使用了监听端口的 <code>/_geerpc</code> 路径，在其他路径上我们可以提供诸如日志、统计等更为丰富的功能。接下来我们在 <code>/debug/geerpc</code> 上展示服务的调用统计视图。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> debugText <span class="token operator">=</span> <span class="token string">`&lt;html&gt;&lt;body&gt;&lt;title&gt;GeeRPC Services&lt;/title&gt;{{range .}}&lt;hr&gt;Service {{.Name}}&lt;hr&gt;&lt;table&gt;&lt;th align=center&gt;Method&lt;/th&gt;&lt;th align=center&gt;Calls&lt;/th&gt;{{range $name, $mtype := .Method}}&lt;tr&gt;&lt;td align=left font=fixed&gt;{{$name}}({{$mtype.ArgType}}, {{$mtype.ReplyType}}) error&lt;/td&gt;&lt;td align=center&gt;{{$mtype.NumCalls}}&lt;/td&gt;&lt;/tr&gt;{{end}}&lt;/table&gt;{{end}}&lt;/body&gt;&lt;/html&gt;`</span><span class="token keyword">var</span> debug <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"RPC debug"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>debugText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">type</span> debugHTTP <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token operator">*</span>Server<span class="token punctuation">}</span><span class="token comment">//存放可用的结构体和方法，即service对象</span><span class="token keyword">type</span> debugService <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name   <span class="token builtin">string</span>Method <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>methodType<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>server debugHTTP<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> services <span class="token punctuation">[</span><span class="token punctuation">]</span>debugService<span class="token comment">//读取已注册的结构体</span>server<span class="token punctuation">.</span>serviceMap<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>namei<span class="token punctuation">,</span> svci <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>svc <span class="token operator">:=</span> svci<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>service<span class="token punctuation">)</span>services <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>services<span class="token punctuation">,</span> debugService<span class="token punctuation">{</span>Name<span class="token punctuation">:</span>   svc<span class="token punctuation">.</span>name<span class="token punctuation">,</span>Method<span class="token punctuation">:</span> svc<span class="token punctuation">.</span>method<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//展示注册所有的 service 的每一个方法的调用情况。</span>err <span class="token operator">:=</span> debug<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> services<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"rpc: error executing template:"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个结构体，其结构定义<code>ServeHTTP</code>方法，该方法遍历所有已注册的服务和对应的方法，并写入模板中，统计每个方法的调用情况。</p><p>然后在<code>HandleHTTP()</code>函数中添加一个Handle函数，添加debug地址：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultRPCPath<span class="token punctuation">,</span> server<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>defaultDebugPath<span class="token punctuation">,</span> debugHTTP<span class="token punctuation">{</span>server<span class="token punctuation">}</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server debug path:"</span><span class="token punctuation">,</span> defaultDebugPath<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h2><p>改动创建服务器函数，其内添加<code>geerpc.HandleHTTP()</code>和<code>http.Serve(l, nil)</code>。</p><p>改动客户端函数，开启客户端函数改为<code>client, _ := geerpc.DialHTTP("tcp", &lt;-addrch)</code>。</p><p>测试结果为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">rpc server<span class="token punctuation">:</span> register Foo<span class="token punctuation">.</span>Sumstart rpc server on <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">9999</span>rpc server debug path<span class="token punctuation">:</span> <span class="token operator">/</span>debug<span class="token operator">/</span>geerpc<span class="token number">0</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day6-负载均衡"><a href="#Day6-负载均衡" class="headerlink" title="Day6 负载均衡"></a>Day6 负载均衡</h1><p>负载均衡策略包括下列几种：</p><ul><li>随机选择策略 - 从服务列表中随机选择一个。</li><li>轮询算法(Round Robin) - 依次调度不同的服务器，每次调度执行 i = (i + 1) mode n。</li><li>加权轮询(Weight Round Robin) - 在轮询算法的基础上，为每个服务实例设置一个权重，高性能的机器赋予更高的权重，也可以根据服务实例的当前的负载情况做动态的调整，例如考虑最近5分钟部署服务器的 CPU、内存消耗情况。</li><li>哈希/一致性哈希策略 - 依据请求的某些特征，计算一个 hash 值，根据 hash 值将请求发送到对应的机器。一致性 hash 还可以解决服务实例动态添加情况下，调度抖动的问题。一致性哈希的一个典型应用场景是分布式缓存服务。这个策略在<strong>分布式缓存</strong>中得到实现。</li></ul><p>在本节中，利用随机选择和轮询算法来实现RPC的负载均衡策略。</p><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p>RPC的负载均衡策略的前提在于有<strong>多个具有相同功能的服务实例</strong>来供客户端选择。</p><p>建立一个<strong>具有同一功能的服务中心</strong>，用于存放服务以及通过负载均衡策略获取服务。定义一个接口，用于实现最基本的功能，例如更新服务中心里的服务列表（从其它服务器中更新服务、手动更新服务）、获取服务中心里的服务（目标服务以及全部服务），接口内容定义为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//包含了服务发现所需要的最基本的接口。</span><span class="token keyword">type</span> Discovery <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>                      <span class="token comment">//从注册中心自动更新服务列表</span><span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>       <span class="token comment">//手动更新服务列表</span><span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token comment">//选择一个服务实例</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>           <span class="token comment">//获取所有服务实例</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SelectMode</code>表示为负载均衡类型，用于定义负载均衡策略，在本节中定义了两个策略，分别为随机选择RandomSelect、轮询RoundRobinSelect：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> SelectMode <span class="token builtin">int</span><span class="token comment">//选择模式</span><span class="token keyword">const</span> <span class="token punctuation">(</span>RandomSelect SelectMode <span class="token operator">=</span> <span class="token boolean">iota</span>RoundRobinSelect<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来定义结构体来实现接口，该结构体内部定义字符数组，用于存放服务；需要一个锁，在获取服务以及更新服务时需要上锁避免途中被修改；定义随机对象<code>*rand.Rand</code>，用于实现随机选择策略；定义int变量，用于表示当前轮询的索引：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义结构体，实现接口</span><span class="token comment">// MultiServersDiscovery is a discovery for multi servers without a registry center</span><span class="token comment">// user provides the server addresses explicitly instead</span><span class="token keyword">type</span> MultiServersDiscovery <span class="token keyword">struct</span> <span class="token punctuation">{</span>r       <span class="token operator">*</span>rand<span class="token punctuation">.</span>Rand <span class="token comment">//随机选择的序号</span>mu      sync<span class="token punctuation">.</span>RWMutexservers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>index   <span class="token builtin">int</span> <span class="token comment">//轮询算法的序号</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewMultiServersDiscovery</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>MultiServersDiscovery <span class="token punctuation">{</span>d <span class="token operator">:=</span> <span class="token operator">&amp;</span>MultiServersDiscovery<span class="token punctuation">{</span>r<span class="token punctuation">:</span>       rand<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">NewSource</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//由时间戳定义的随机种子</span>servers<span class="token punctuation">:</span> servers<span class="token punctuation">,</span><span class="token punctuation">}</span>d<span class="token punctuation">.</span>index <span class="token operator">=</span> d<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>MaxInt32 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> d<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在初始化的过程中，轮询的初始位置index被随机生成。</p><p>现在定义方法来实现接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//无注册中心，因此返回nil</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServersDiscovery<span class="token punctuation">)</span> <span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//更新服务列表</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServersDiscovery<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>servers <span class="token operator">=</span> servers<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServersDiscovery<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"服务列表中的服务个数为0"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">switch</span> mode <span class="token punctuation">{</span><span class="token keyword">case</span> RandomSelect<span class="token punctuation">:</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token keyword">case</span> RoundRobinSelect<span class="token punctuation">:</span><span class="token comment">//轮询算法，从初始位置逐个加1</span>s <span class="token operator">:=</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>d<span class="token punctuation">.</span>index<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token comment">//d.index可能会超过n，因为d.index的初始值是随机生成的</span>d<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"rpc discovery: 没有支持的服务选择模式"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>MultiServersDiscovery<span class="token punctuation">)</span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//防止获取的途中服务列表进行更新</span>d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> d<span class="token punctuation">.</span>servers<span class="token punctuation">)</span> <span class="token comment">//避免修改s导致d.servers被改变</span><span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持负载均衡的客户端"><a href="#支持负载均衡的客户端" class="headerlink" title="支持负载均衡的客户端"></a>支持负载均衡的客户端</h2><p>现在定义一个支持负载均衡的客户端，其表现为利用负载均衡策略来得到服务地址，然后开启客户端进行通信，为了能够复用客户端，通过map来存储服务地址与客户端的映射关系。因此通过上述功能，定义一个结构体来存储负载均衡策略、定义map存储客户端和服务地址、定义Option来存储传输配置、定义锁防止数据冲突：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> XClient <span class="token keyword">struct</span> <span class="token punctuation">{</span>d       Discoverymode    SelectModeopt     <span class="token operator">*</span>Optionmu      sync<span class="token punctuation">.</span>Mutexclients <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Client<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewXClient</span><span class="token punctuation">(</span>d Discovery<span class="token punctuation">,</span> mode SelectMode<span class="token punctuation">,</span> opt <span class="token operator">*</span>Option<span class="token punctuation">)</span> <span class="token operator">*</span>XClient <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>XClient<span class="token punctuation">{</span>d<span class="token punctuation">:</span>       d<span class="token punctuation">,</span>mode<span class="token punctuation">:</span>    mode<span class="token punctuation">,</span>opt<span class="token punctuation">:</span>     opt<span class="token punctuation">,</span>clients<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Client<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个Close函数，用于关闭所有客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//关闭所有客户端</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> client <span class="token operator">:=</span> <span class="token keyword">range</span> xc<span class="token punctuation">.</span>clients <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">delete</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用<code>var _ io.Closer = (*XClient)(nil)</code>来测试是否成功定义方法。</p><p>定义方法来创建客户端并把服务地址和对应的客户端存储：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取客户端</span><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> xc<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">,</span> ok <span class="token operator">:=</span> xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span><span class="token comment">//检查客户端是否存在且是否可用</span><span class="token keyword">if</span> ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>client<span class="token punctuation">.</span><span class="token function">IsAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">delete</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">,</span> rpcAddr<span class="token punctuation">)</span>client <span class="token operator">=</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//判断client是否为nil</span><span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//定义client</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token comment">//创建客户端，连接服务器</span>client<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">XDial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> xc<span class="token punctuation">.</span>opt<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>xc<span class="token punctuation">.</span>clients<span class="token punctuation">[</span>rpcAddr<span class="token punctuation">]</span> <span class="token operator">=</span> client<span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于服务地址已经被存储，因此调用map来查看对应的客户端是否可用，若不可用则删除map的键值并重新输入。</p><p>定义了创建客户端的方法后，需要客户端调用自身的<code>Call</code>方法来发送信息，通过一个方法来封装<code>dial</code>方法和<code>Call</code>方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//调用call方法，选取单一服务器来获取结果</span><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>client<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">dial</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在创建客户端之前，需要确定服务地址，这时调用负载均衡策略来进行实现，定义方法来封装这些功能：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装call方法，调用选择模式来选取某一服务器的地址</span><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">Call</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>rpcAddr<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>xc<span class="token punctuation">.</span>mode<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来定义一个方法，用于客户端请求所有可用的服务，即调用负载均衡策略中<code>GetAll</code>的方法来获取所有服务，然后并发计算结果并返回其中一个：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将请求广播给所有服务,调用所有服务来获得结果</span><span class="token keyword">func</span> <span class="token punctuation">(</span>xc <span class="token operator">*</span>XClient<span class="token punctuation">)</span> <span class="token function">BroadCast</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> serviceMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">//获取所有服务</span>servers<span class="token punctuation">,</span> err <span class="token operator">:=</span> xc<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//定义锁</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutex<span class="token keyword">var</span> e <span class="token builtin">error</span>replyDone <span class="token operator">:=</span> reply <span class="token operator">==</span> <span class="token boolean">nil</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> rpcAddr <span class="token operator">:=</span> <span class="token keyword">range</span> servers <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>rpcAddr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> clonedReply <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//将reply的内容复制</span><span class="token keyword">if</span> reply <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>clonedReply <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>err <span class="token operator">:=</span> xc<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> serviceMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> clonedReply<span class="token punctuation">)</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果任意一个服务调用出现错误，则快速结束</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> e <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>e <span class="token operator">=</span> err<span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将clonedReply的值赋值给reply</span>            <span class="token comment">//存疑!replyDone</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>replyDone <span class="token punctuation">{</span><span class="token comment">//指针赋值</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>clonedReply<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>replyDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>rpcAddr<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> e<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><p>首先是定义函数来用于计算结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义结构</span><span class="token keyword">type</span> Foo <span class="token builtin">int</span><span class="token keyword">type</span> Args <span class="token keyword">struct</span><span class="token punctuation">{</span> Num1<span class="token punctuation">,</span> Num2 <span class="token builtin">int</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sum</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f Foo<span class="token punctuation">)</span> <span class="token function">Sleep</span><span class="token punctuation">(</span>args Args<span class="token punctuation">,</span> reply <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>reply <span class="token operator">=</span> args<span class="token punctuation">.</span>Num1 <span class="token operator">+</span> args<span class="token punctuation">.</span>Num2<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义服务器函数，用于启动服务器并将<code>Foo</code>结构进行注册：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>addr <span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//注册方法</span><span class="token keyword">var</span> foo Fooserver <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span><span class="token comment">//开启监听端口</span>l<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"network error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// server := geerpc.NewServer()</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start rpc server on"</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// geerpc.HandleHTTP()</span><span class="token comment">//将地址发送</span>addr <span class="token operator">&lt;-</span> l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// http.Serve(l, nil)</span>server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于需要启动多个服务器，因此不能使用默认的服务器来监听端口。</p><p>定义一个函数来选择调用<code>xc.Call</code>和<code> xc.BroadCast</code>，然后输出结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>xc <span class="token operator">*</span>xclient<span class="token punctuation">.</span>XClient<span class="token punctuation">,</span> ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serveMethod <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">*</span>Args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> reply <span class="token builtin">int</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token keyword">switch</span> typ <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"call"</span><span class="token punctuation">:</span><span class="token comment">//调用单一实例</span>err <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serveMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"broadcast"</span><span class="token punctuation">:</span><span class="token comment">//调用所有实例</span>err <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">BroadCast</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> serveMethod<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s error: %v"</span><span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serveMethod<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s %s success: %d + %d = %d"</span><span class="token punctuation">,</span> typ<span class="token punctuation">,</span> serveMethod<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num1<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Num2<span class="token punctuation">,</span> reply<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义两个函数，分别定义客户端来使用<code>xc.Call</code>和<code> xc.BroadCast</code>来请求服务：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">call</span><span class="token punctuation">(</span>addr1 <span class="token builtin">string</span><span class="token punctuation">,</span> addr2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>d <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewMultiServersDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"tcp@"</span> <span class="token operator">+</span> addr1<span class="token punctuation">,</span> <span class="token string">"tcp@"</span> <span class="token operator">+</span> addr2<span class="token punctuation">}</span><span class="token punctuation">)</span>xc <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewXClient</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> xclient<span class="token punctuation">.</span>RandomSelect<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"call"</span><span class="token punctuation">,</span> <span class="token string">"Foo.Sum"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">broadCast</span><span class="token punctuation">(</span>addr1 <span class="token builtin">string</span><span class="token punctuation">,</span> addr2 <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>d <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewMultiServersDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"tcp@"</span> <span class="token operator">+</span> addr1<span class="token punctuation">,</span> <span class="token string">"tcp@"</span> <span class="token operator">+</span> addr2<span class="token punctuation">}</span><span class="token punctuation">)</span>xc <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewXClient</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> xclient<span class="token punctuation">.</span>RandomSelect<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> xc<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"broadcast"</span><span class="token punctuation">,</span> <span class="token string">"Foo.Sum"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span>xc<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">"broadcast"</span><span class="token punctuation">,</span> <span class="token string">"Foo.Sleep"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Args<span class="token punctuation">{</span>Num1<span class="token punctuation">:</span> i<span class="token punctuation">,</span> Num2<span class="token punctuation">:</span> i <span class="token operator">*</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启监听：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>ch1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>ch2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>ch1<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span>addr1 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch1addr2 <span class="token operator">:=</span> <span class="token operator">&lt;-</span>ch2time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token function">call</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2<span class="token punctuation">)</span><span class="token function">broadCast</span><span class="token punctuation">(</span>addr1<span class="token punctuation">,</span> addr2<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出的结果出现了问题，有两个：</p><ul><li>结果输出了一半然后卡住；</li><li>报错，显示rpc server: 读取Header错误:  gob: unknown type id or corrupted data</li></ul><p>根据评论区的说法，这两个问题可能归结于一个原因：TCP粘包</p><h1 id="Day7-服务发现与注册中心"><a href="#Day7-服务发现与注册中心" class="headerlink" title="Day7 服务发现与注册中心"></a>Day7 服务发现与注册中心</h1><ul><li>实现一个简单的注册中心，支持服务注册、接收心跳等功能</li><li>客户端实现基于注册中心的服务发现机制</li></ul><h2 id="注册中心的位置"><a href="#注册中心的位置" class="headerlink" title="注册中心的位置"></a>注册中心的位置</h2><p>注册中心的位置如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021636416.jpg" alt="Big Image"></p><p>其功能表现为：</p><ul><li>服务端启动后，向注册中心发送注册消息，注册中心得知该服务已经启动，且处于可用状态。在服务端启动还需要定期向注册中心发送心跳来表示该服务端还在正常运作。</li><li>客户端向注册中心发送询问信息，注册中心向客户端返回可用的服务列表。</li><li>客户端选择一个可用的服务来完成事务。</li></ul><p>注册中心的功能并不局限于以上，还可以包括配置的动态同步、通知机制等。比较常用的注册中心有<a href="https://github.com/etcd-io/etcd">etcd</a>、<a href="https://github.com/apache/zookeeper">zookeeper</a>、<a href="https://github.com/hashicorp/consul">consul</a>等。</p><h2 id="Gee-Registry"><a href="#Gee-Registry" class="headerlink" title="Gee Registry"></a>Gee Registry</h2><p>本节的注册中心实现的功能主要是支持心跳保活。因此需要设置一个时间来保证一个服务能够存活多长时间，且需要一个map来存储服务以及它的注册时间。因此定义两个结构体，一个用来设置时间和存储服务，另一个用来描述服务和注册时间：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> GeeRegisty <span class="token keyword">struct</span> <span class="token punctuation">{</span>timeout time<span class="token punctuation">.</span>Durationmu      sync<span class="token punctuation">.</span>Mutexservers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ServerItem<span class="token punctuation">}</span><span class="token keyword">type</span> ServerItem <span class="token keyword">struct</span> <span class="token punctuation">{</span>Addr  <span class="token builtin">string</span>start time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ServerItem</code>结构用来存放服务的地址以及它的注册时间。</p><p>随后进行初始化：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>GeeRegisty <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>GeeRegisty<span class="token punctuation">{</span>timeout<span class="token punctuation">:</span> timeout<span class="token punctuation">,</span>servers<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>ServerItem<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置默认的心跳保活时间和服务访问地址并设置默认对象：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>defaultPath    <span class="token operator">=</span> <span class="token string">"/_geerpc_/registry"</span>defaultTimeout <span class="token operator">=</span> time<span class="token punctuation">.</span>Minute <span class="token operator">*</span> <span class="token number">5</span> <span class="token comment">//默认心跳保活5分钟</span><span class="token punctuation">)</span><span class="token keyword">var</span> DefaultGeeRegistry <span class="token operator">=</span> <span class="token function">New</span><span class="token punctuation">(</span>defaultTimeout<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后定义两个方法：添加服务到列表<code>putServer</code>以及获取可用服务列表<code>aliveServers</code>:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//添加可用服务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>GeeRegisty<span class="token punctuation">)</span> <span class="token function">putServer</span><span class="token punctuation">(</span>Addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> r<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>Addr<span class="token punctuation">]</span><span class="token comment">//若注册中心没有该服务，则注册服务</span><span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>Addr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>ServerItem<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span> Addr<span class="token punctuation">,</span> start<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//存在则更新注册时间</span>s<span class="token punctuation">.</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//返回可用服务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>GeeRegisty<span class="token punctuation">)</span> <span class="token function">aliveServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>r<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> r<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> alive <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> addr<span class="token punctuation">,</span> s <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>servers <span class="token punctuation">{</span><span class="token comment">//判断服务存在的时间是否超过保活的时间范围</span><span class="token keyword">if</span> r<span class="token punctuation">.</span>timeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>start<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>alive <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>alive<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">delete</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>servers<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//对服务排序</span>sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>alive<span class="token punctuation">)</span><span class="token keyword">return</span> alive<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>putServer</code>方法负责将服务添加到列表中，并重置注册时间；<code>aliveServers</code>方法负责检查列表中的服务的存在时间是否超过规定的保活时间，即<code>s.start.Add(r.timeout).After(time.Now())</code>，此段代码的含义是注册时间+保活时间是否大于目前的时间，若大于则服务还在保活时间范围内返回true，反之返回false。</p><p>外部向注册中心添加服务和获取服务的方式是通过HTTP协议完成的，因此定义<code>ServeHTTP</code>方法来返回内容：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>GeeRegisty<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> req<span class="token punctuation">.</span>Method <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token punctuation">:</span><span class="token comment">//消息头，由键值对组成，通过键名可获取对应的值</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"X-Geerpc-Servers"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">aliveServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>addr <span class="token operator">:=</span> req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Geerpc-Servers"</span><span class="token punctuation">)</span> <span class="token comment">//从消息头中获取信息</span><span class="token keyword">if</span> addr <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function">putServer</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token comment">//将服务添加到列表中</span><span class="token keyword">default</span><span class="token punctuation">:</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMethodNotAllowed<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//开启ServeHTTP</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>GeeRegisty<span class="token punctuation">)</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span>registryPath <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>registryPath<span class="token punctuation">,</span> r<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc registry path:"</span><span class="token punctuation">,</span> registryPath<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//默认的服务获取的地址位置</span><span class="token keyword">func</span> <span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>DefaultGeeRegistry<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span>defaultPath<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>针对不同的请求方法来作出对应的措施：<code>GET</code>请求方法调用<code>aliveServers</code>方法来获取可用的服务列表并写入消息头中进行返回；<code>POST</code>请求方法从消息头中获取服务，并利用<code>putServer</code>方法将服务添加至列表中。”X-Geerpc-Servers”为自定义的消息头名称。</p><h2 id="心跳保活"><a href="#心跳保活" class="headerlink" title="心跳保活"></a>心跳保活</h2><p>定义函数来将目标服务地址添加至列表中，然后定时更新注册时间，这里设置了4分钟来更新注册时间，防止服务被列表删除。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//服务器向注册中心发送心跳来保证服务存活</span><span class="token keyword">func</span> <span class="token function">sendHeartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token string">"send heart to registry"</span><span class="token punctuation">,</span> registry<span class="token punctuation">)</span>httpClient <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//创建POST请求，目标地址为registry</span>req<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> registry<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">//设置请求内容，即更新服务注册信息来确保存活</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"X-Geerpc-Servers"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token comment">//发送请求</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> httpClient<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc server: heart beat err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//定时发送心跳</span><span class="token keyword">func</span> <span class="token function">HeartBeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr <span class="token builtin">string</span><span class="token punctuation">,</span> duration time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> duration <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token comment">//默认为4分钟，因为要确保在服务被注册中心删除之前更新注册时间</span>duration <span class="token operator">=</span> defaultTimeout <span class="token operator">-</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute<span class="token punctuation">}</span><span class="token keyword">var</span> err <span class="token builtin">error</span>err <span class="token operator">=</span> <span class="token function">sendHeartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr<span class="token punctuation">)</span> <span class="token comment">//更新注册时间</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//每隔duration的时长发送一次心跳</span>t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span><span class="token keyword">for</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token operator">&lt;-</span>t<span class="token punctuation">.</span>Cerr <span class="token operator">=</span> <span class="token function">sendHeartbeat</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HeartBeat</code>设置默认时间为4分钟，并设置计时器来定时更新注册时间。<code>sendHeartbeat</code>函数负责定义请求信息，利用<code>http.NewRequest</code>定义<code>POST</code>请求，创建请求对象<code>http.Client</code>，利用<code>httpClient.Do</code>将请求发送给注册中心。</p><h2 id="客户端获取服务"><a href="#客户端获取服务" class="headerlink" title="客户端获取服务"></a>客户端获取服务</h2><p>定义结构体来继承之前定义的负载均衡策略，继承的好处是可以直接调用父类的变量属性，并通过父类的服务列表作为客户端需要的服务列表，然后再从中选择一个服务来完成事务。除此之外，新的结构体内部还定义了服务列表更新，设置时间来获取新的服务列表并存储。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> GeeRegistryDiscovery <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token operator">*</span>MultiServersDiscoveryregistry   <span class="token builtin">string</span>        <span class="token comment">//注册中心的地址</span>timeout    time<span class="token punctuation">.</span>Duration <span class="token comment">//服务列表的过期时间</span>lastUpdate time<span class="token punctuation">.</span>Time     <span class="token comment">//最后从注册中心更新服务列表的时间，默认 10s 过期，即 10s 之后，需要从注册中心更新新的列表。</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">(</span>defaultUpdateTimeout <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token comment">//默认的列表更新时间</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">NewGeeRegistryDiscovery</span><span class="token punctuation">(</span>registryAddr <span class="token builtin">string</span><span class="token punctuation">,</span> timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">)</span> <span class="token operator">*</span>GeeRegistryDiscovery <span class="token punctuation">{</span><span class="token keyword">if</span> timeout <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>timeout <span class="token operator">=</span> defaultUpdateTimeout<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>GeeRegistryDiscovery<span class="token punctuation">{</span>MultiServersDiscovery<span class="token punctuation">:</span> <span class="token function">NewMultiServersDiscovery</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>registry<span class="token punctuation">:</span>              registryAddr<span class="token punctuation">,</span>timeout<span class="token punctuation">:</span>               timeout<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重定义4个方法：<code>Update, Refresh, Get, GetAll</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//更新服务列表</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>GeeRegistryDiscovery<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>servers <span class="token operator">=</span> servers       <span class="token comment">//更新服务列表</span>d<span class="token punctuation">.</span>lastUpdate <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//重置服务列表更新时间</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>GeeRegistryDiscovery<span class="token punctuation">)</span> <span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//比较过期时间</span><span class="token keyword">if</span> d<span class="token punctuation">.</span>lastUpdate<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc registry: refresh servers from registry"</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>registry<span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"rpc registry refresh err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span>servers <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Geerpc-Servers"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span>d<span class="token punctuation">.</span>servers <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//获取服务列表</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> server <span class="token operator">:=</span> <span class="token keyword">range</span> servers <span class="token punctuation">{</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>d<span class="token punctuation">.</span>servers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>servers<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//更新服务时间</span>d<span class="token punctuation">.</span>lastUpdate <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>GeeRegistryDiscovery<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>mode SelectMode<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>MultiServersDiscovery<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>GeeRegistryDiscovery<span class="token punctuation">)</span> <span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> d<span class="token punctuation">.</span>MultiServersDiscovery<span class="token punctuation">.</span><span class="token function">GetAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Update</code>方法负责更新服务列表，并重置最后更新时间；<code>Refresh</code>方法负责查看服务列表的更新时间是否失效，如果失效则从注册中心获取服务列表并重置最后更新时间，通过<code>http.Get</code>方法向注册中心进行请求，随后读取消息头中的服务列表并存入自己的服务列表中。<code>Get</code>和<code>GetAll</code>方法中新增刷新服务列表的操作，然后获取服务。</p><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><p>主函数添加一个开启注册中心的函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startRegistry</span><span class="token punctuation">(</span>wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":9999"</span><span class="token punctuation">)</span>registry<span class="token punctuation">.</span><span class="token function">HandleHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//开启访问地址</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span> <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器向注册中心申请注册并保持心跳：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startServer</span><span class="token punctuation">(</span>registryAddr <span class="token builtin">string</span><span class="token punctuation">,</span> wg <span class="token operator">*</span>sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//注册方法</span><span class="token keyword">var</span> foo Foo<span class="token comment">//开启监听端口</span>l<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":0"</span><span class="token punctuation">)</span>server <span class="token operator">:=</span> geerpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//注册方法</span>server<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>foo<span class="token punctuation">)</span><span class="token comment">//保持心跳且注册</span>registry<span class="token punctuation">.</span><span class="token function">HeartBeat</span><span class="token punctuation">(</span>registryAddr<span class="token punctuation">,</span> <span class="token string">"tcp@"</span><span class="token operator">+</span>l<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端中将 call 和 broadcast 的 MultiServersDiscovery 替换为 GeeRegistryDiscovery，不再需要手动添加服务列表：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">d <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewGeeRegistryDiscovery</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>xc <span class="token operator">:=</span> xclient<span class="token punctuation">.</span><span class="token function">NewXClient</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> xclient<span class="token punctuation">.</span>RandomSelect<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>main函数开启函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">SetFlags</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>registryAddr <span class="token operator">:=</span> <span class="token string">"http://localhost:9999/_geerpc_/registry"</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroupwg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startRegistry</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wg<span class="token punctuation">)</span> <span class="token comment">//确保注册中心已启动</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token comment">//开启服务器并把服务器添加到注册中心</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>registryAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">startServer</span><span class="token punctuation">(</span>registryAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wg<span class="token punctuation">)</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token function">call</span><span class="token punctuation">(</span>registryAddr<span class="token punctuation">)</span><span class="token function">broadCast</span><span class="token punctuation">(</span>registryAddr<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要先开启注册中心，因此利用sync.WaitGroup来先完成这个事务，然后就是开启服务器，最后开启客户端。</p>]]></content>
      
      
      <categories>
          
          <category> go7天编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gee</title>
      <link href="/28251.html"/>
      <url>/28251.html</url>
      
        <content type="html"><![CDATA[<h1 id="7天用Go从零实现Web框架-Gee"><a href="#7天用Go从零实现Web框架-Gee" class="headerlink" title="7天用Go从零实现Web框架 - Gee"></a>7天用Go从零实现Web框架 - Gee</h1><p><a href="https://geektutu.com/post/gee.html">Gee</a> 是一个模仿 <a href="https://github.com/gin-gonic/gin">gin</a> 实现的 Web 框架，<a href="https://geektutu.com/post/quick-go-gin.html">Go Gin简明教程</a>可以快速入门。</p><h2 id="第一天-前置知识"><a href="#第一天-前置知识" class="headerlink" title="第一天 前置知识"></a>第一天 前置知识</h2><p>目标：</p><ul><li>简单介绍<code>net/http</code>库以及<code>http.Handler</code>接口。</li><li>搭建<code>Gee</code>框架的雏形，<strong>代码约50行</strong>。</li></ul><h3 id="标准库启动web"><a href="#标准库启动web" class="headerlink" title="标准库启动web"></a>标准库启动web</h3><p>利用<code>net/http</code>库来启动web，以一个简单例子来进行描述：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//设置路由</span><span class="token comment">/*调用 http.HandleFunc 实现了路由和Handler的映射，也就是只能针对具体的路由写处理逻辑。*/</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> indexHandler<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> helloHandler<span class="token punctuation">)</span><span class="token comment">//监听端口</span><span class="token comment">/*第一个参数是地址，:8080表示在 8080 端口监听。而第二个参数则代表处理所有的HTTP请求的实例，nil 代表使用标准库中的实例处理。*/</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*http.ResponseWriter:写入接口*http.Request:http请求该函数的作用为：将req的地址写入w*/</span><span class="token keyword">func</span> <span class="token function">indexHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//%q 双引号围绕的字符串，由Go语法安全地转义 Printf("%q", "Go语言") "Go语言"</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"url:%q\n"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*该函数的作用是：打印请求头*/</span><span class="token keyword">func</span> <span class="token function">helloHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//Header为键值对</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> req<span class="token punctuation">.</span>Header <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Header[%q]:%q\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的作用为：利用<code>http.HandleFunc</code>设置两个路由<code>/</code>和<code>/hello</code>，用<code>http.ListenAndServe</code>来监听端口<code>8080</code>并处理这两个路由，处理方法分别为<code>indexHandler</code>和<code>helloHandler</code>。</p><p>输出为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>url<span class="token punctuation">:</span><span class="token string">"/"</span>C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>helloHeader<span class="token punctuation">[</span><span class="token string">"User-Agent"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"curl/7.79.1"</span><span class="token punctuation">]</span>Header<span class="token punctuation">[</span><span class="token string">"Accept"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"*/*"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现http-Handler接口"><a href="#实现http-Handler接口" class="headerlink" title="实现http.Handler接口"></a>实现http.Handler接口</h3><p><code>http.ListenAndServe</code>的第二个参数类型为Handler接口类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> http<span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ListenAndServe</span><span class="token punctuation">(</span>address <span class="token builtin">string</span><span class="token punctuation">,</span> h Handler<span class="token punctuation">)</span> <span class="token builtin">error</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若第二个参数传入的值为nil，则会默认使用<code>DefaultServeMux</code>（未深入了解）。</p><p>1.http.HandleFunc将pattern及我们自定义的handler存储在DefaultServeMux的一个map中。<br>2.当http.ListenAndServe的handler为nil时，系统会从DefaultServeMux存储信息的map中匹配pattern获取对应的handler，进而处连接请求。</p><p>我们可以重定义Handler接口的函数<code>ServeHTTP</code>来自己处理请求，而不需要调用HandleFunc。代码如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Engine <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>e <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Engine<span class="token punctuation">)</span><span class="token comment">//第二个参数为Handler接口类型，其内的函数为ServeHTTP函数。</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">/*自由定义路由映射的规则*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">switch</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"/"</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"url:%q\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token string">"/hello"</span><span class="token punctuation">:</span><span class="token comment">//Header为键值对</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Header <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Header[%q]:%q\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">default</span><span class="token punctuation">:</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"404 NOT FOUND: %s\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码的作用是：定义空结构体Engine，该结构体定义ServeHTTP方法以处理http请求。<code>ServeHTTP</code>函数针对不同的请求地址利用<code>switch</code>语句来作出相应的处理。</p><h3 id="Gee框架的雏形"><a href="#Gee框架的雏形" class="headerlink" title="Gee框架的雏形"></a>Gee框架的雏形</h3><p>最终的代码结构目录为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">gee<span class="token operator">/</span>  <span class="token operator">|</span><span class="token operator">--</span>gee<span class="token punctuation">.</span><span class="token keyword">go</span>  <span class="token operator">|</span><span class="token operator">--</span><span class="token keyword">go</span><span class="token punctuation">.</span>modmain<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token keyword">go</span><span class="token punctuation">.</span>mod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中go.mod使能包</p><p>gee.go的代码如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> gee<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//定义路由处理方法</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token comment">//定义路由集合以及对应的处理方法</span><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>router <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">}</span><span class="token comment">// 初始化结构体</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>router<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//将对应的路由添加至结构体中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>key <span class="token operator">:=</span> method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> patternengine<span class="token punctuation">.</span>router<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">}</span><span class="token comment">//请求方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">POST</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//定义处理接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>key <span class="token operator">:=</span> req<span class="token punctuation">.</span>Method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token keyword">if</span> handler<span class="token punctuation">,</span> ok <span class="token operator">:=</span> engine<span class="token punctuation">.</span>router<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token function">handler</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"404 NOT FOUND: %s\n"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 监听端口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> engine<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码的作用为：定义处理方法类型<code>HandlerFunc</code>，该类型可囊括所有处理方法；定义结构体<code>Engine</code>，该结构体只有一个属性，该属性用于存储不同请求类型（GET、POST等）的请求地址的处理方法，并且该结构体定义一系列方法，例如<code>addRoute</code>方法来扩充router集合，GET和POST方法用于调用<code>addRoute</code>方法，<code>ServeHTTP</code>用于处理请求，<code>Run</code>方法用于监听端口。</p><p>主函数为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"URL.Path = %q\n"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> req<span class="token punctuation">.</span>Header <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Header[%q] = %q\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>New函数表示创建一个结构体，然后该结构体来调用一系列方法，例如GET方法来创建处理函数和请求，Run启动端口。</p><h2 id="第二天-上下文"><a href="#第二天-上下文" class="headerlink" title="第二天 上下文"></a>第二天 上下文</h2><p>目标：</p><ul><li>将<code>路由(router)</code>独立出来，方便之后增强。</li><li>设计<code>上下文(Context)</code>，封装 Request 和 Response ，提供对 JSON、HTML 等返回类型的支持。</li></ul><p>Context的作用在于对一系列操作进行封装，例如提交表单、查询键值对、设置http头等。Context结构体包含了请求/响应模型以及对应的方法，例如请求模型中的提交表单、查询键值对，响应模型中的设置http头、设置状态码、编码JSON数据。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">context<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token comment">//存放键值对</span><span class="token keyword">type</span> H <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> Context <span class="token keyword">struct</span> <span class="token punctuation">{</span>Writer http<span class="token punctuation">.</span>ResponseWriterReq    <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token comment">// 请求信息</span>Path   <span class="token builtin">string</span> <span class="token comment">//请求路径</span>Method <span class="token builtin">string</span> <span class="token comment">//请求类型，GET、POST等</span><span class="token comment">//返回信息</span>StatusCode <span class="token builtin">int</span> <span class="token comment">// 回应代码</span><span class="token punctuation">}</span><span class="token comment">// 初始化结构体</span><span class="token keyword">func</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token operator">*</span>Context <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Context<span class="token punctuation">{</span>Writer<span class="token punctuation">:</span> w<span class="token punctuation">,</span>Req<span class="token punctuation">:</span>    req<span class="token punctuation">,</span>Path<span class="token punctuation">:</span>   req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span>Method<span class="token punctuation">:</span> req<span class="token punctuation">.</span>Method<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//获取网页?后面的信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Req<span class="token punctuation">.</span><span class="token function">FormValue</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获取地址?后面的键值对</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>Req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//状态码</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Status</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>StatusCode <span class="token operator">=</span> code<span class="token comment">//WriteHeader sends an HTTP response header with the provided status code.</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//设置http头</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetHeader</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//设置头部、状态码、主体</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> format <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//JSON编码</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">JSON</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> obj <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>encoder <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> encoder<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//编写主体中的数据</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Data</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//编写主体</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">HTML</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> html <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在重新定义路由，重写路由添加方法、路由处理方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">router<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token comment">//定义路由处理方法</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token comment">//定义路由集合以及对应的处理方法</span><span class="token keyword">type</span> router <span class="token keyword">struct</span> <span class="token punctuation">{</span>handlers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>router <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>router<span class="token punctuation">{</span>handlers<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//添加路由</span><span class="token comment">/*method:请求方法pattern:路径handler:路由处理方法*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">AddRouter</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Route %4s - %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>key <span class="token operator">:=</span> method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> patternr<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">}</span><span class="token comment">//上下文信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>key <span class="token operator">:=</span> c<span class="token punctuation">.</span>Method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Path<span class="token keyword">if</span> handler<span class="token punctuation">,</span> ok <span class="token operator">:=</span> r<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token function">handler</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Req<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//404</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"404 NOT FOUND: %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对路由方法进行封装，并添加提交方法（GET、POST）。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">gee<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token comment">//定义路由处理方法</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Context<span class="token punctuation">)</span><span class="token comment">//定义路由集合以及对应的处理方法</span><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>router <span class="token operator">*</span>router<span class="token punctuation">}</span><span class="token comment">//初始化Engine</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>router<span class="token punctuation">:</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">AddRouter</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">POST</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> engine<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">:=</span> <span class="token function">NewContext</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>engine<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Engine结构体对router结构体进一步封装，并添加GET、POST方法，且添加ServeHTTP方法来启动web。</p><p>最后进行试验：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"&lt;h1&gt;Hello Gee&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello?name=geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">curl <span class="token operator">-</span>i http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>HTTP<span class="token operator">/</span><span class="token number">1.1</span> <span class="token number">200</span> OKContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> text<span class="token operator">/</span>htmlDate<span class="token punctuation">:</span> Thu<span class="token punctuation">,</span> <span class="token number">19</span> May <span class="token number">2022</span> <span class="token number">02</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token number">38</span> GMTContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello Gee<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/hello?name=geektutu"</span>hello geektutu<span class="token punctuation">,</span> you're at <span class="token operator">/</span>hellocurl <span class="token string">"http://localhost:9999/login"</span> <span class="token operator">-</span>X POST <span class="token operator">-</span>d <span class="token string">"username=geektutu&amp;password=1234"</span><span class="token punctuation">{</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string">"geektutu"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三天-前缀树路由"><a href="#第三天-前缀树路由" class="headerlink" title="第三天 前缀树路由"></a>第三天 前缀树路由</h2><p>前缀树的意思就是按照顺序来存储值，例如有以下路由：</p><ul><li>/:lang/doc</li><li>/:lang/tutorial</li><li>/:lang/intro</li><li>/about</li><li>/p/blog</li><li>/p/related</li></ul><p>用前缀树来定义这些路由：</p><p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021639304.jpg" alt="trie tree"></p><p>从图中可以看到树分为三层：根节点/，一层节点/:lang、/about、/p，二层节点/doc、/tutorial、/intro、/blog、/related。</p><p>现在来实现前缀树，前缀树拥有的功能有：插入节点、查询节点。</p><ul><li><p>定义树结构</p><p>定义树结构需要定义当前节点和子节点，子节点的类型为树类型（为了再延续子节点），以及完整路由（即完整的路径）和标志位（判断该节点是否含有 : 或 *）。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//树结构</span><span class="token keyword">type</span> node <span class="token keyword">struct</span> <span class="token punctuation">{</span>pattern  <span class="token builtin">string</span>  <span class="token comment">//待匹配路由，例如 /p/:lang</span>part     <span class="token builtin">string</span>  <span class="token comment">//路由中的一部分，例如 :lang</span>children <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>node <span class="token comment">//子节点，例如 [doc, tutorial, intro]</span>isWild   <span class="token builtin">bool</span>    <span class="token comment">//是否精确匹配，part 含有 : 或 * 时为true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>插入节点</p><p>插入节点的思路为：首先遍历第一层节点，若没存在对应的节点则将该节点插入至这一层，然后根据这一个节点来递归插入子节点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//插入节点</span><span class="token comment">/*pattern:完整路由，用于查询是否已经遍历完毕，例如/p/:lang/docparts:路由集合，例如/p/:lang/doc的集合为[p :lang doc]height:初始为0，逐步增加至完整路由的长度，例如[p :lang doc]的长度为3*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">insert</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> parts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> height <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//当输入长度与完整路由的长度相同则表明插入完成</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">==</span> height <span class="token punctuation">{</span>n<span class="token punctuation">.</span>pattern <span class="token operator">=</span> pattern<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//当前路由节点</span>part <span class="token operator">:=</span> parts<span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token comment">//查找树中是否存在该节点</span>child <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">matchChild</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token comment">//如果树中不存在该节点则创建一个新节点并插入</span><span class="token keyword">if</span> child <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>child <span class="token operator">=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span>part<span class="token punctuation">:</span> part<span class="token punctuation">,</span> isWild<span class="token punctuation">:</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span><span class="token punctuation">}</span>n<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>children<span class="token punctuation">,</span> child<span class="token punctuation">)</span> <span class="token comment">//将子节点添加进树中</span><span class="token punctuation">}</span><span class="token comment">//继续插入下一个节点</span>child<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>matchChild</code>函数的作用是查找符合条件的子节点，若有则表示该节点在树中存在并返回该节点，没有则返回空值nil。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//匹配出子节点，用于将节点插入到树中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">matchChild</span><span class="token punctuation">(</span>part <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span><span class="token comment">//判断子节点中是否存在对应的节点，若有则返回那个子节点</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>children <span class="token punctuation">{</span><span class="token keyword">if</span> part <span class="token operator">==</span> child<span class="token punctuation">.</span>part <span class="token operator">||</span> child<span class="token punctuation">.</span>isWild <span class="token punctuation">{</span><span class="token keyword">return</span> child<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询节点</p><p>查询节点的思路为：由于查询的节点在树中存在多个，因此需要查找所有符合条件的节点并通过数组进行存储，之后在一个一个进行递归查询下一个子节点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//查找节点</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">search</span><span class="token punctuation">(</span>parts <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> height <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span><span class="token comment">//判断是否遍历至目标节点</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">==</span> height <span class="token operator">||</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>part<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否遍历到"*"或":"且数组中的节点没有遍历完</span><span class="token keyword">if</span> n<span class="token punctuation">.</span>pattern <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">}</span>part <span class="token operator">:=</span> parts<span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token comment">//查找所有符合条件的子节点</span>children <span class="token operator">:=</span> n<span class="token punctuation">.</span><span class="token function">matchChildren</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> children <span class="token punctuation">{</span><span class="token comment">//查询子节点是否存在子节点</span>result <span class="token operator">:=</span> child<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>matchChildren</code>函数为存储所有符合条件的节点。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//匹配出子节点，用于将节点插入到树中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>node<span class="token punctuation">)</span> <span class="token function">matchChild</span><span class="token punctuation">(</span>part <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>node <span class="token punctuation">{</span><span class="token comment">//判断子节点中是否存在对应的节点，若有则返回那个子节点</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>children <span class="token punctuation">{</span><span class="token keyword">if</span> part <span class="token operator">==</span> child<span class="token punctuation">.</span>part <span class="token operator">||</span> child<span class="token punctuation">.</span>isWild <span class="token punctuation">{</span><span class="token keyword">return</span> child<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>定义了树结构和方法后，再更新路由方法：</p><p>首先是路由结构增添以<strong>请求方法</strong>为根节点的树结构；</p><p>随后就是增加解析路由的方法，即将完整路由分割成路由集合，例如/p/go/doc分割成[p go doc]；</p><p>然后更新增加路由的方法，通过树结构来存放路由；</p><p>之后就是获取路由信息，即将输入路由与树中的结构进行匹配，并按照一些方法得到对应的节点信息和附加信息，例如/p/go/doc匹配到/p/:lang/doc，解析结果为：{lang: “go”}，/static/css/geektutu.css匹配到/static/*filepath，解析结果为{filepath: “css/geektutu.css”}。</p><p>最后更新路由处理方式，将附加信息添加至Context中:<code>Params map[string]string</code>，并通过方法来调用该附加信息：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Param</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>value<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span>Params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token keyword">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//解析路由</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">parsePattern</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">// 将pattern按照/来分割得到字符串集合</span>vs <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token comment">//存放经过筛选的vs</span>parts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> item <span class="token operator">:=</span> <span class="token keyword">range</span> vs <span class="token punctuation">{</span><span class="token keyword">if</span> item <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>parts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token comment">//仅第一个*开头的字符串会被存入数组中</span><span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> parts<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//添加路由并将路由插入到树中</span><span class="token comment">/*method:请求方法patten:树中定义的路径handler:处理方法*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>parts <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">parsePattern</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>key <span class="token operator">:=</span> method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> pattern<span class="token comment">//判断是否存在method对应的根节点，没有则初始化</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> r<span class="token punctuation">.</span>roots<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>r<span class="token punctuation">.</span>roots<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//插入子节点到根节点下</span>r<span class="token punctuation">.</span>roots<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//根据路径存放对应的处理方法</span>r<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//查询路由</span><span class="token comment">/*method:请求方法path:请求路径*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">getRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//路由集合</span>searchParts <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">parsePattern</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment">//用于存储*和:的信息</span>params <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//根节点</span>root<span class="token punctuation">,</span> ok <span class="token operator">:=</span> r<span class="token punctuation">.</span>roots<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token comment">//如果没有创建该根节点则返回nil</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//找出路由对应的节点</span>n <span class="token operator">:=</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>searchParts<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//将树的路由切割成集合</span>parts <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">parsePattern</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span><span class="token comment">//遍历路径，若存在:和*则进行处理</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> part <span class="token operator">:=</span> <span class="token keyword">range</span> parts <span class="token punctuation">{</span><span class="token comment">//存放:节点对应的路由名,例如/p/go/doc匹配到/p/:lang/doc，解析结果为：{lang: "go"}</span><span class="token keyword">if</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">':'</span> <span class="token punctuation">{</span>params<span class="token punctuation">[</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> searchParts<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment">//存放*节点之后的路由，例如/static/css/geektutu.css匹配到/static/*filepath，解析结果为{filepath: "css/geektutu.css"}</span><span class="token keyword">if</span> part<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>part<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>params<span class="token punctuation">[</span>part<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>searchParts<span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">,</span> params<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*执行处理逻辑*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span> params <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Params <span class="token operator">=</span> paramskey <span class="token operator">:=</span> c<span class="token punctuation">.</span>Method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>patternr<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"404 NOT FOUND: %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试验成果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"&lt;h1&gt;Hello Gee&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello?name=geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello/:name"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello/geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/assets/*filepath"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"filepath"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"filepath"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/hello/geektutu"</span>hello geektutu<span class="token punctuation">,</span> you're at <span class="token operator">/</span>hello<span class="token operator">/</span>geektutuC<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/assets/css/geektutu.css"</span><span class="token punctuation">{</span><span class="token string">"filepath"</span><span class="token punctuation">:</span><span class="token string">"css/geektutu.css"</span><span class="token punctuation">}</span>C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/"</span><span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Hello Gee<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/a"</span><span class="token number">404</span> NOT FOUND<span class="token punctuation">:</span> <span class="token operator">/</span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四天-分组控制"><a href="#第四天-分组控制" class="headerlink" title="第四天 分组控制"></a>第四天 分组控制</h2><p>有些时候不同的路由需要不同的处理方法，且路由中的子路由的处理方法也可能不同，这时就需要分组，例如<code>/post</code>是一个分组，<code>/post/a</code>和<code>/post/b</code>可以是该分组下的子分组，这时就可以用三种处理方法分别处理这三种路由。</p><p>分组控制的实现方式就是：定义一个结构体来存储这个组，然后由这个组来进行拓展。这个结构体所需要的功能有：前缀，用于保存当前路由以及拼接后续路由，例如前缀为<code>/post</code>，这时再来一个路由<code>/a</code>，拼接后的前缀就为<code>/post/a</code>；这个结构体需要调用路由的处理方法，因此需要有其他结构体包含在内；有时不同的路由需要单独实现处理方法，这时就需要中间件，例如<code>/admin</code>的分组，可以应用鉴权中间件；<code>/</code>分组应用日志中间件，<code>/</code>是默认的最顶层的分组，也就意味着给所有的路由，即整个框架增加了记录日志的能力。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*前缀prefix中间件middlewares路由调度Engine*/</span><span class="token keyword">type</span> RouterGroup <span class="token keyword">struct</span> <span class="token punctuation">{</span>prefix      <span class="token builtin">string</span>middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFuncengine      <span class="token operator">*</span>Engine<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让Engine结构体能够成为顶层的结构，因此结构体内需要实现该结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token operator">*</span>RouterGrouprouter <span class="token operator">*</span>routergroups <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>RouterGroup <span class="token comment">// store all groups</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>groups表示囊括所有分组。</p><p>对Engine初始化，得到：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>engine <span class="token operator">:=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>router<span class="token punctuation">:</span> <span class="token function">newRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>engine<span class="token punctuation">.</span>RouterGroup <span class="token operator">=</span> <span class="token operator">&amp;</span>RouterGroup<span class="token punctuation">{</span>engine<span class="token punctuation">:</span> engine<span class="token punctuation">}</span>engine<span class="token punctuation">.</span>groups <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>RouterGroup<span class="token punctuation">{</span>engine<span class="token punctuation">.</span>RouterGroup<span class="token punctuation">}</span><span class="token keyword">return</span> engine<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在原来的一些方法可以用RouterGroup来调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//从当前分组中创建子分组，例如/post分组添加子分组/post/a</span><span class="token comment">//所有分组共享一个Engine</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">Group</span><span class="token punctuation">(</span>prefix <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>RouterGroup <span class="token punctuation">{</span>engine <span class="token operator">:=</span> group<span class="token punctuation">.</span>enginenewGroup <span class="token operator">:=</span> <span class="token operator">&amp;</span>RouterGroup<span class="token punctuation">{</span><span class="token comment">//拼接地址，例如父分组/post与子分组/a拼接得到新分组/post/a</span>prefix<span class="token punctuation">:</span> group<span class="token punctuation">.</span>prefix <span class="token operator">+</span> prefix<span class="token punctuation">,</span>engine<span class="token punctuation">:</span> engine<span class="token punctuation">,</span><span class="token punctuation">}</span>engine<span class="token punctuation">.</span>groups <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>groups<span class="token punctuation">,</span> newGroup<span class="token punctuation">)</span><span class="token keyword">return</span> newGroup<span class="token punctuation">}</span><span class="token comment">//添加路由</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> comp <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//主分组加目标分组</span>pattern <span class="token operator">:=</span> group<span class="token punctuation">.</span>prefix <span class="token operator">+</span> complog<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Route %4s - %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>group<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//请求方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>group<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">POST</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>group<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，Group方法用于创建当前分组的子分组并返回结构指针。</p><p>最后进行测试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"&lt;h1&gt;Index Page&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>v1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span> <span class="token comment">//创建新分组</span><span class="token punctuation">{</span>v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"&lt;h1&gt;Hello Gee&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello?name=geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>v2 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v2"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v2<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello/:name"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello/geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>v2<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五天-中间件"><a href="#第五天-中间件" class="headerlink" title="第五天 中间件"></a>第五天 中间件</h2><p>中间件与路由的处理方法不一样，中间件的作用在于能够为特定的路由添加功能，在上一节分组控制中，我们为不同的路由进行分组，现在为不同的分组来定义中间件。</p><p>Gee 的中间件的定义与路由映射的 Handler 一致，处理的输入是<code>Context</code>对象。中间件的插入点在初始化Context对象后，允许用户使用自己定义的中间件做一些额外的处理，例如记录日志等，以及对<code>Context</code>进行二次加工。并且可以使用<code>(*Context).Next()</code>函数来等用户自己定义的 <code>Handler</code>处理结束后，再做一些额外的操作，例如计算本次处理所用时间等。</p><p>即 Gee 的中间件支持用户在请求被处理的前后，做一些额外的操作。</p><p>其中Next函数的定义为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>index<span class="token operator">++</span><span class="token comment">//中间件的数量</span>s <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span><span class="token comment">//依次执行中间件</span><span class="token keyword">for</span> <span class="token punctuation">;</span> c<span class="token punctuation">.</span>index <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> c<span class="token punctuation">.</span>index<span class="token operator">++</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>c<span class="token punctuation">.</span>index<span class="token punctuation">]</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c.index表示中间件的索引，默认值为-1，因此调用Next函数会先增加index的值，然后依次调用中间件。</p><p>Context结构体增加中间件数组和索引以存放中间件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//middleWare</span>handlers <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc <span class="token comment">//存放中间件和路由的处理方法</span>index    <span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后路由分组<em>RouterGroup</em>增加Use函数来添加中间件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//添加中间件到分组中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">Use</span><span class="token punctuation">(</span>middlewares <span class="token operator">...</span>HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>group<span class="token punctuation">.</span>middlewares <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span> middlewares<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>随后在初始化Context对象时根据条件将分组中存放的中间件赋值给对象：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> middlewares <span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> group <span class="token operator">:=</span> <span class="token keyword">range</span> engine<span class="token punctuation">.</span>groups <span class="token punctuation">{</span><span class="token comment">//中间件的使用条件，此处通过判断分组的前缀与输入路由的地址是否相符</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> group<span class="token punctuation">.</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>middlewares <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">,</span> group<span class="token punctuation">.</span>middlewares<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>c <span class="token operator">:=</span> <span class="token function">newContext</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token comment">//存储中间件</span>c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> middlewaresengine<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处根据分组的前缀与输入路由的前缀来将该分组的中间件进行传递。</p><p>最后为了统一管理，handle 函数中，将从路由匹配得到的 Handler 添加到 <code>c.handlers</code>列表中，执行<code>c.Next()</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>router<span class="token punctuation">)</span> <span class="token function">handle</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span> params <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Params <span class="token operator">=</span> paramskey <span class="token operator">:=</span> c<span class="token punctuation">.</span>Method <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>pattern<span class="token comment">//将路由的处理方法加入到中间件数组中</span>c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">,</span> r<span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//将不存在该路由的处理方法加入到数组中并调用</span>c<span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>handlers<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">,</span> <span class="token string">"404 NOT FOUND: %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//调用中间件函数</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行测试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gee<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//全局中间件</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/index"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"&lt;h1&gt;Index Page&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>v2 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v2"</span><span class="token punctuation">)</span>v2<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">onlyForV2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">onlyForV1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//添加中间件到该分组中，表示路由的前缀为v2的中间件</span><span class="token punctuation">{</span>v2<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello/:name"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// expect /hello/geektutu</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"hello %s, you're at %s\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设定三个中间件，Logger为全局中间件（表示所有分组都有该中间件），onlyForV2(), onlyForV1()为分组中的中间件。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">curl http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>输出为：<span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">28</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">/</span> in 0scurl http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>v2<span class="token operator">/</span>hello<span class="token operator">/</span>geektutu输出为：<span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">52</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span>v2<span class="token operator">/</span>hello<span class="token operator">/</span>geektutu in 0s <span class="token keyword">for</span> group v1<span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">52</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">/</span>v2<span class="token operator">/</span>hello<span class="token operator">/</span>geektutu in 0s <span class="token keyword">for</span> group v2<span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">11</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token number">52</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">/</span>v2<span class="token operator">/</span>hello<span class="token operator">/</span>geektutu in <span class="token number">978.6</span>µs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ServeHTTP()中，每接收到一个请求都需要逐一匹配前缀来添加中间件，对程序性能有着负影响。<br>gin是在前缀树的节点中添加中间件的切片，这样在匹配动态路由并解析参数时，就可以同时获得各分组的中间件。因此基于此思想，对中间件的存取进行改进：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//添加路由</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">addRoute</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> comp <span class="token builtin">string</span><span class="token punctuation">,</span> handler HandlerFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>handlers <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>HandlerFunc<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>handlers<span class="token punctuation">,</span> group<span class="token punctuation">.</span>middlewares<span class="token punctuation">)</span>handlers <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>handlers<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token comment">// 将处理请求的函数与中间件函数结合</span><span class="token comment">//主分组加目标分组</span>pattern <span class="token operator">:=</span> group<span class="token punctuation">.</span>prefix <span class="token operator">+</span> complog<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Route %4s - %s"</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span>group<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">addRoute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> handlers<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在结构中添加路由时将中间件一起添加进去，这样就避免进行遍历且能同时将中间件和请求函数合并在一起管理。</p><h2 id="第六天-模板"><a href="#第六天-模板" class="headerlink" title="第六天 模板"></a>第六天 模板</h2><p>服务器渲染页面，需要读取服务器上的文件，而客户端请求的文件地址与服务器上的文件地址不同，因此需要进行转换。例如客户端请求的文件地址为：/assets/filepath，而服务器的文件地址为/static/filepath，因此需要用static来替换assets。于是对服务器端增加两个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建动态路由请求函数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">createStaticHandler</span><span class="token punctuation">(</span>relativePath <span class="token builtin">string</span><span class="token punctuation">,</span> fs http<span class="token punctuation">.</span>FileSystem<span class="token punctuation">)</span> HandlerFunc <span class="token punctuation">{</span>absolutePath <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>group<span class="token punctuation">.</span>prefix<span class="token punctuation">,</span> relativePath<span class="token punctuation">)</span> <span class="token comment">//将静态文件的相对地址与前缀拼接</span><span class="token comment">/*http.StripPrefix返回http.FileServer的结果：一个处理器Handler，将URL中的前缀中的prefix字符串删除，然后再交给后面的Handler处理http.FileServer表示将fs把之前定义的前缀进行替换例如：http.StripPrefix("/tmpfiles/", http.FileServer(http.Dir("/tmp")))，"/tmp"将"/tmpfiles/"进行替换*/</span>fileServer <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span>absolutePath<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>file <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"filepath"</span><span class="token punctuation">)</span><span class="token comment">//打开目标文件，如果不存在则返回错误状态码</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> fs<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//文件处理逻辑</span>fileServer<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Req<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//服务器静态文件</span><span class="token comment">/*relativePath:相对地址，例如相对地址为"/assets"，而绝对地址为：/assets/js/geektutu.jsroot：目标地址，即将相对地址进行替换的相对地址，例如"/usr/geektutu/blog/static"替换"/assets"用户访问localhost:9999/assets/js/geektutu.js，最终返回/usr/geektutu/blog/static/js/geektutu.js。*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">Static</span><span class="token punctuation">(</span>relativePath <span class="token builtin">string</span><span class="token punctuation">,</span> root <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将磁盘上的某个文件夹root映射到路由relativePath，换句话说就是请求的地址为/assets/js/geektutu.js，</span><span class="token comment">//现在替换成/usr/geektutu/blog/static/js/geektutu.js来读取geektutu.js文件</span>handler <span class="token operator">:=</span> group<span class="token punctuation">.</span><span class="token function">createStaticHandler</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span>urlPattern <span class="token operator">:=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">,</span> <span class="token string">"/*filepath"</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span>urlPattern<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个方法就是用服务器的路由前缀地址来替代客户端的路由前缀地址，并针对该路径创建路由处理方法：利用http.StripPrefix来消除路由前缀，并用fs来替代且返回一个handler。</p><p>第二个方法就是对文件请求设置请求方法。</p><p>对文件路径处理之后，就需要通过模板来进行调用渲染。<a href="https://golang.org/pkg/html/template/">html/template</a>为 HTML 提供了较为完整的支持。包括普通变量渲染、列表渲染、对象渲染等。于是对Engine结构增加两个属性:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">htmlTemplates <span class="token operator">*</span>template<span class="token punctuation">.</span>Template <span class="token comment">// for html render</span>funcMap       template<span class="token punctuation">.</span>FuncMap   <span class="token comment">// for html render</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，htmlTemplates用于定义、调用、渲染各种模板，funcMap用于存储自定义的渲染函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">SetFuncMap</span><span class="token punctuation">(</span>funcMap template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span>funcMap <span class="token operator">=</span> funcMap<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后创建模板对象并解析模板内容：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*New：创建模板对象，参数为模板名，1个模板对象可以有多个name，通过t和各自的name，可以调用到指定的模板。Funcs:将自定义函数与模板关联，需要在解析内容之前进行定义ParseGlob:解析目录下的一个或多个模板的内容，并将这些内容关联到t上*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">LoadHTMLGlob</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">.</span>htmlTemplates <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Funcs</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span>funcMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ParseGlob</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LoadHTMLGlob方法表示用template.New（参数表示模板名字，可定义多个名字）来创建模板对象，再通过Funcs来将自定义函数注入到模板中，然后ParseGlob来解析目标路径的所有模板，最后使用template.Must对模板对象进行封装。</p><p>创建了模板对象后就需要执行模板，于是对(*Context).HTML()进行修改：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//输出页面信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">HTML</span><span class="token punctuation">(</span>code <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">SetHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token comment">//选择给定名字的模板并进行渲染写入Writer中</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>htmlTemplates<span class="token punctuation">.</span><span class="token function">ExecuteTemplate</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> name<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加了htmlTemplates.ExecuteTemplate函数以执行模板，该函数通过指定模板名字将data数据传入到Writer响应界面。由于调用的是engine的方法，因此需要在Context结构里添加属性以调用方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建Engine对象</span>engine <span class="token operator">*</span>Engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>经过对文件的处理，此时就需要创建对应的文件路径和文件，目录结构如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">--</span><span class="token operator">-</span>gee<span class="token operator">/</span><span class="token operator">--</span><span class="token operator">-</span>static<span class="token operator">/</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>css<span class="token operator">/</span>        <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>geektutu<span class="token punctuation">.</span>css   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>file1<span class="token punctuation">.</span>txt<span class="token operator">--</span><span class="token operator">-</span>templates<span class="token operator">/</span>   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>arr<span class="token punctuation">.</span>tmpl   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>css<span class="token punctuation">.</span>tmpl   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">-</span>custom_func<span class="token punctuation">.</span>tmpl<span class="token operator">--</span><span class="token operator">-</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后执行主函数main：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span>Age  <span class="token builtin">int8</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">FormatAsDate</span><span class="token punctuation">(</span>t time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d-%02d-%02d"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>gee<span class="token punctuation">.</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">SetFuncMap</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>FuncMap<span class="token punctuation">{</span><span class="token string">"FormatAsDate"</span><span class="token punctuation">:</span> FormatAsDate<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">LoadHTMLGlob</span><span class="token punctuation">(</span><span class="token string">"templates/*"</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Static</span><span class="token punctuation">(</span><span class="token string">"/assets"</span><span class="token punctuation">,</span> <span class="token string">"./static"</span><span class="token punctuation">)</span>stu1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>student<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Geektutu"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span>stu2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>student<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"css.tmpl"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/students"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"arr.tmpl"</span><span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span>  <span class="token string">"gee"</span><span class="token punctuation">,</span><span class="token string">"stuArr"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>student<span class="token punctuation">{</span>stu1<span class="token punctuation">,</span> stu2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/date"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"custom_func.tmpl"</span><span class="token punctuation">,</span> gee<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"title"</span><span class="token punctuation">:</span> <span class="token string">"gee"</span><span class="token punctuation">,</span><span class="token string">"now"</span><span class="token punctuation">:</span>   time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2019</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>UTC<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对各个文件的执行结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021639305.png" alt="image-20220613095813650"></p><p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021639306.png" alt="image-20220613095829330"></p><p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021639307.png" alt="image-20220613095844129"></p><h2 id="第七天-错误处理"><a href="#第七天-错误处理" class="headerlink" title="第七天 错误处理"></a>第七天 错误处理</h2><p>有时程序会因为一些数组越界，空指针等异常使得程序报错。因此需要引入错误处理，即出现错误后实施措施，例如使用recover函数来恢复程序：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Recovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> HandlerFunc <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>message <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n\n"</span><span class="token punctuation">,</span> <span class="token function">trace</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">,</span> <span class="token string">"Internal Server Error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序引入一个中间件来使用 defer 挂载上错误恢复的函数，该函数的作用为跟踪报错的信息直到出错的位置，然后自定义错误内容输出到客户端，trace函数用于跟踪错误信息并将信息打印至服务端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">trace</span><span class="token punctuation">(</span>message <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">var</span> pcs <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">uintptr</span><span class="token comment">/*Callers 用来返回调用栈的程序计数器, 第 0 个 Caller 是 Callers 本身，第 1 个是上一层 trace，第 2 个是再上一层的 defer func。*/</span>n <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Callers</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> pcs<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//跳过前3个Caller</span><span class="token keyword">var</span> str strings<span class="token punctuation">.</span>Builderstr<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>message <span class="token operator">+</span> <span class="token string">"\nTraceback:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pc <span class="token operator">:=</span> <span class="token keyword">range</span> pcs<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token punctuation">{</span>fn <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">FuncForPC</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span>   <span class="token comment">//获取对应的函数</span>file<span class="token punctuation">,</span> line <span class="token operator">:=</span> fn<span class="token punctuation">.</span><span class="token function">FileLine</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span> <span class="token comment">// 获取到调用该函数的文件名和行号，打印在日志中。</span>str<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"\n\t%s:%d"</span><span class="token punctuation">,</span> file<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后定义一个demo来测试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"Hello Geektutu\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// index out of range for testing Recovery()</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/panic"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gee<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>names <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"geektutu"</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> names<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9999"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Default函数为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>r <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> r<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">13</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">38</span> runtime <span class="token builtin">error</span><span class="token punctuation">:</span> index out of <span class="token keyword">range</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> with length <span class="token number">1</span>Traceback<span class="token punctuation">:</span>        C<span class="token punctuation">:</span><span class="token operator">/</span>Program Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span><span class="token builtin">panic</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">838</span>        C<span class="token punctuation">:</span><span class="token operator">/</span>Program Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span><span class="token builtin">panic</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">89</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>main<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">17</span>               D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>context<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">63</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span><span class="token builtin">recover</span><span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">39</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>context<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">63</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>logger<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">15</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>context<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">63</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>router<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">134</span>        D<span class="token punctuation">:</span><span class="token operator">/</span>go_exer<span class="token operator">/</span>mygo<span class="token operator">/</span>src<span class="token operator">/</span>SevenDaysProgram<span class="token operator">/</span>geeProgram<span class="token operator">/</span>SevenDay_ErrorRecover<span class="token operator">/</span>gee<span class="token operator">/</span>gee<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">126</span>        C<span class="token punctuation">:</span><span class="token operator">/</span>Program Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>server<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">2917</span>        C<span class="token punctuation">:</span><span class="token operator">/</span>Program Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>net<span class="token operator">/</span>http<span class="token operator">/</span>server<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">1967</span>        C<span class="token punctuation">:</span><span class="token operator">/</span>Program Files<span class="token operator">/</span>Go<span class="token operator">/</span>src<span class="token operator">/</span>runtime<span class="token operator">/</span>asm_amd64<span class="token punctuation">.</span>s<span class="token punctuation">:</span><span class="token number">1572</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">06</span><span class="token operator">/</span><span class="token number">13</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">38</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span> <span class="token operator">/</span><span class="token builtin">panic</span> in <span class="token number">3</span><span class="token punctuation">.</span>2103ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端的打印信息为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span><span class="token string">"Internal Server Error"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> go7天编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GeeORM</title>
      <link href="/12689.html"/>
      <url>/12689.html</url>
      
        <content type="html"><![CDATA[<p>GeeORM学习</p><p>详情参考<a href="https://geektutu.com/post/geeorm.html">7天用Go从零实现ORM框架GeeORM | 极客兔兔 (geektutu.com)</a></p><h1 id="Day1-database-x2F-sql-基础"><a href="#Day1-database-x2F-sql-基础" class="headerlink" title="Day1 database/sql 基础"></a>Day1 database/sql 基础</h1><p>通过调用标准库 <code>database/sql</code>来实现与数据库的交互，现在以连接SQLite数据库为例，利用<code>github.com/mattn/go-sqlite3</code>库来注册驱动。</p><p><code>sql.Open</code>打开指定名字的数据库；<code>Exec</code>函数执行操作语句；<code>RowsAffected</code>函数返回执行操作后的信息；<code>QueryRow</code>函数执行查询语句，该函数与<code>Query</code>的区别在于它返回所有记录并一次性调用且只返回一个变量，而<code>Query</code>需要利用<code>Next</code>函数来逐步调用；<code>Scan</code>扫描得到的信息并写入到输入变量中，下面为一个demo：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"log"</span><span class="token boolean">_</span> <span class="token string">"github.com/mattn/go-sqlite3"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span> <span class="token comment">//前者为数据库驱动名，后者为链接的数据库</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//关闭数据库</span><span class="token comment">//删除数据库中的User表</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS User;"</span><span class="token punctuation">)</span><span class="token comment">//创建User表</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE User(Name text);"</span><span class="token punctuation">)</span><span class="token comment">//注入数据</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User('Name') values (?),(?)"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Sam"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//数据库更新的信息</span>affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>affected<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//查询数据,表示为从第1个数据进行查询</span>    <span class="token comment">//利用Query</span>rows<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"SELECT Name FROM User LIMIT 1"</span><span class="token punctuation">)</span><span class="token comment">//定义变量，用于输出结果</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token comment">// if err = row.Scan(&amp;name); err == nil {</span><span class="token comment">// log.Println(name)</span><span class="token comment">// }</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>采用<code>QueryRow</code>后的程序为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span> <span class="token comment">//前者为数据库驱动名，后者为链接的数据库</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">//关闭数据库</span><span class="token comment">//删除数据库中的User表</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS User;"</span><span class="token punctuation">)</span><span class="token comment">//创建User表</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE User(Name text);"</span><span class="token punctuation">)</span><span class="token comment">//注入数据</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User('Name') values (?),(?)"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Sam"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//数据库更新的信息</span>affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>affected<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//查询数据,表示为从第1个数据进行查询</span>row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"SELECT Name FROM User LIMIT 1"</span><span class="token punctuation">)</span><span class="token comment">//定义变量，用于输出结果</span><span class="token keyword">var</span> name <span class="token builtin">string</span><span class="token keyword">if</span> err <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个程序得到的结果都为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">01</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">01</span> <span class="token number">2</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">01</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">43</span><span class="token punctuation">:</span><span class="token number">01</span> Tom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>目录为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">.</span>├── cmd_test│   ├── gee<span class="token punctuation">.</span>db│   └── main<span class="token punctuation">.</span><span class="token keyword">go</span>├── geeorm<span class="token punctuation">.</span><span class="token keyword">go</span>├── <span class="token keyword">go</span><span class="token punctuation">.</span>mod├── <span class="token keyword">go</span><span class="token punctuation">.</span>sum├── log│   └── log<span class="token punctuation">.</span><span class="token keyword">go</span>└── session    └── raw<span class="token punctuation">.</span><span class="token keyword">go</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义日志库"><a href="#自定义日志库" class="headerlink" title="自定义日志库"></a>自定义日志库</h2><p>通过调用官方的log库来自定义日志需求：</p><p>首先定义输出的需求：利用<code>log.New</code>来定义输出内容：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span><span class="token comment">// \033[31m[error]\033[0m表示红色字，其中更换31m会变色</span><span class="token comment">// log.LstdFlags表示输出日期和时间，log.Lshortfile表示输出短文件名和行号</span>errorlog <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"\033[31m[error]\033[0m "</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token operator">|</span>log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span> <span class="token comment">//定义前缀和相关信息</span>infolog  <span class="token operator">=</span> log<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token string">"\033[34m[info ]\033[0m"</span><span class="token punctuation">,</span> log<span class="token punctuation">.</span>LstdFlags<span class="token operator">|</span>log<span class="token punctuation">.</span>Lshortfile<span class="token punctuation">)</span>loggers  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>log<span class="token punctuation">.</span>Logger<span class="token punctuation">{</span>errorlog<span class="token punctuation">,</span> infolog<span class="token punctuation">}</span>mu       sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>log.New</code>定义输出位置、前缀内容、输出内容。这里输出位置表示为<code>os.Stdout</code>终端，前缀内容分别为<code>\033[31m[error]\033[0m </code>、<code>\033[34m[info ]\033[0m</code>，前者表示为以红色标识<code>[error]</code>，而后者表示以蓝色标识<code>[info ]</code>，这种标记的标准格式为：<code>\033[字背景颜色;文字颜色m字符串\033[0m</code>，其他颜色的格式为：</p><pre class="line-numbers language-none"><code class="language-none">"\033[30m 黑色字 \033[0m""\033[31m 红色字 \033[0m""\033[32m 绿色字 \033[0m""\033[33m ×××字 \033[0m""\033[34m 蓝色字 \033[0m""\033[35m 紫色字 \033[0m""\033[36m 天蓝字 \033[0m""\033[37m 白色字 \033[0m"&nbsp;"\033[40;37m 黑底白字 \033[0m""\033[41;37m 红底白字 \033[0m""\033[42;37m 绿底白字 \033[0m""\033[43;37m 黄底白字 \033[0m""\033[44;37m 蓝底白字 \033[0m""\033[45;37m 紫底白字 \033[0m""\033[46;37m 天蓝底白字 \033[0m""\033[47;30m 白底黑字 \033[0m"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化输出格式后，定义各个输出函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装输出方法</span><span class="token keyword">var</span> <span class="token punctuation">(</span>Error  <span class="token operator">=</span> errorlog<span class="token punctuation">.</span>PrintlnErrorf <span class="token operator">=</span> errorlog<span class="token punctuation">.</span>PrintfInfo   <span class="token operator">=</span> infolog<span class="token punctuation">.</span>PrintlnInfof  <span class="token operator">=</span> infolog<span class="token punctuation">.</span>Printf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置输出等级，根据不同的等级来选择是否输出到终端：首先利用<code>Iota</code>关键字来赋值，然后创建一个函数，以等级为输入，根据输入和内置的等级来判定是否输出：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义层级，表示不同的等级来决定是否输出</span><span class="token keyword">const</span> <span class="token punctuation">(</span>InfoLevel <span class="token operator">=</span> <span class="token boolean">iota</span>ErrorLevelDisabled<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">SetLevel</span><span class="token punctuation">(</span>level <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//先设定都输出到终端上</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> logger <span class="token operator">:=</span> <span class="token keyword">range</span> loggers <span class="token punctuation">{</span>logger<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//根据等级来决定是否输出</span><span class="token keyword">if</span> ErrorLevel <span class="token operator">&lt;</span> level <span class="token punctuation">{</span>errorlog<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>ioutil<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span> <span class="token comment">//不打印该日志</span><span class="token punctuation">}</span><span class="token keyword">if</span> InfoLevel <span class="token operator">&lt;</span> level <span class="token punctuation">{</span>infolog<span class="token punctuation">.</span><span class="token function">SetOutput</span><span class="token punctuation">(</span>ioutil<span class="token punctuation">.</span>Discard<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交互数据库"><a href="#交互数据库" class="headerlink" title="交互数据库"></a>交互数据库</h2><p>定义了日志库后，以它为基础来实现go与数据库的交互，主要功能为封装<code>sql库</code>的几个主要函数，例如<code>Exec</code>、<code>QueryRow</code>、<code>Query</code>等函数，封装这几个函数需要调用sql语句来实现，因此需要定义一个函数来存放sql语句，且需要一个函数来清空之前存放的sql语句，针对以上需求来定义一个结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>db      <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB         <span class="token comment">//数据库</span>sql     strings<span class="token punctuation">.</span>Builder <span class="token comment">//用于拼接 SQL 语句</span>sqlVars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//SQL 语句中占位符的对应值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该结构包括：链接的数据库、sql语句、sql语句里占位符的值。<code>strings.Builder</code>的作用为写入字符串并进行存放。现在对结构进行初始化，所有的sql语句的执行都与数据库<code>*sql.DB</code>有关，因此只需要传入链接的数据库来初始化该结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Session<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="接收sql语句"><a href="#接收sql语句" class="headerlink" title="接收sql语句"></a>接收sql语句</h3><p>定义一个方法，来作为sql语句的传入接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">*</span>Seesion<span class="token punctuation">{</span>    s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sqlVars<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">,</span>value<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="清空sql语句"><a href="#清空sql语句" class="headerlink" title="清空sql语句"></a>清空sql语句</h3><p>定义一个方法，用于清空对象中的sql语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sqlVars<span class="token operator">=</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装sql函数"><a href="#封装sql函数" class="headerlink" title="封装sql函数"></a>封装sql函数</h3><h4 id="Exec方法"><a href="#Exec方法" class="headerlink" title="Exec方法"></a>Exec方法</h4><p>封装sql库中的Exec函数，添加日志：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>result <span class="token operator">*</span>sql<span class="token punctuation">.</span>Result<span class="token punctuation">,</span>err <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//调用自定义的日志库来打印sql语句</span>    log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">,</span>err<span class="token operator">=</span>s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QueryRow方法"><a href="#QueryRow方法" class="headerlink" title="QueryRow方法"></a>QueryRow方法</h4><p>封装sql库中的QueryRow函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装queryrow语句，返回一条记录</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>Row <span class="token punctuation">{</span><span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QueryRows方法"><a href="#QueryRows方法" class="headerlink" title="QueryRows方法"></a>QueryRows方法</h4><p>封装sql库中的Query函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装query语句,返回一组记录</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rows <span class="token operator">*</span>sql<span class="token punctuation">.</span>Rows<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token punctuation">)</span><span class="token keyword">if</span> rows<span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>sqlVars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回数据库"><a href="#返回数据库" class="headerlink" title="返回数据库"></a>返回数据库</h3><p>返回经过修改的数据库：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//返回数据库</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB <span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>db<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定义数据库接口"><a href="#定义数据库接口" class="headerlink" title="定义数据库接口"></a>定义数据库接口</h2><p>定义接口来接收链接的数据库，并初始化交互数据库的结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">NewEngine</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>engine <span class="token operator">*</span>Engine<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//查看数据库是否保持连通</span><span class="token keyword">if</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>engine <span class="token operator">=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"成功连接数据"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//关闭数据库</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"无法关闭数据库"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"成功关闭数据库"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//初始化数据库操作结构</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>session<span class="token punctuation">.</span>Session <span class="token punctuation">{</span><span class="token keyword">return</span> session<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>定义主函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"geeorm"</span><span class="token boolean">_</span> <span class="token string">"github.com/mattn/go-sqlite3"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>engine<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token keyword">defer</span> engine<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用数据库结构</span>s <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS User;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE User(Name text);"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE User(Name text);"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//加入数据</span>result<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User('Name') values (?),(?)"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Sam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//查看更新信息</span>count<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Exec Success, %d affected\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> geeorm<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">:</span> 成功连接数据<span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> raw<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span> DROP TABLE IF EXISTS User<span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> raw<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span> CREATE TABLE <span class="token function">User</span><span class="token punctuation">(</span>Name text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> raw<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span> CREATE TABLE <span class="token function">User</span><span class="token punctuation">(</span>Name text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">error</span><span class="token punctuation">]</span> <span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> raw<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">49</span><span class="token punctuation">:</span> table User already exists<span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> raw<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span> INSERT INTO <span class="token function">User</span><span class="token punctuation">(</span><span class="token char">'Name'</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>?<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>?<span class="token punctuation">)</span>  <span class="token punctuation">[</span>Tom Sam<span class="token punctuation">]</span>Exec Success<span class="token punctuation">,</span> <span class="token number">2</span> affected<span class="token punctuation">[</span>info <span class="token punctuation">]</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">08</span><span class="token operator">/</span><span class="token number">03</span> <span class="token number">09</span><span class="token punctuation">:</span><span class="token number">56</span><span class="token punctuation">:</span><span class="token number">52</span> geeorm<span class="token punctuation">.</span><span class="token keyword">go</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span> 成功关闭数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day2-对象表结构映射"><a href="#Day2-对象表结构映射" class="headerlink" title="Day2 对象表结构映射"></a>Day2 对象表结构映射</h1><h2 id="Dialect"><a href="#Dialect" class="headerlink" title="Dialect"></a>Dialect</h2><p>由于SQL语句和Go语言的数据类型不同，因此需要将SQL语句和Go语言进行互相转换。而且由于不同数据库的数据类型不相同，因此可以定义一个哈希表来存储这些数据库的名字和对应的处理方式。</p><p>由于不同的数据库，其数据的处理过程不同，因此需要一个接口来定义这些处理方法，这样不同的数据库可以重写这些方法。定义Dialect接口，主要定义两个方法：1、将go语言的数据类型转换为当前数据库的数据类型<code>DataTypeOf(typ reflect.Value) string</code>，其中<code>reflect.Value</code>能够将数据类型映射；2、获取作用在表上的SQL语句<code>TableExistSQL(tableName string) (string, []interface{})</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//数据库类型转换</span><span class="token keyword">type</span> Dialect <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">DataTypeOf</span><span class="token punctuation">(</span>typ reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span>                    <span class="token comment">// 将go语言的数据类型转换为数据库的数据类型</span><span class="token function">TableExistSQL</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//查询该表的SQL语句</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在定义一个哈希表用来存放对应的数据库，定义一个函数用于获取该数据库，定义一个函数用于注册数据库：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> dialectsMap <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Dialect<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//注册Dialect</span><span class="token keyword">func</span> <span class="token function">RegisterDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> dialect Dialect<span class="token punctuation">)</span> <span class="token punctuation">{</span>dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> dialect<span class="token punctuation">}</span><span class="token comment">//获取Dialect</span><span class="token keyword">func</span> <span class="token function">GetDialect</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>dialect Dialect<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dialect<span class="token punctuation">,</span> ok <span class="token operator">=</span> dialectsMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于本次使用了<code>sqlite3</code>数据库，因此实现该数据库的两个方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义sqlite3结构</span><span class="token keyword">type</span> sqlite3 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// var _ Dialect = (*sqlite3)(nil)</span><span class="token comment">//利用init函数注册sqlite3</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">RegisterDialect</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sqlite3<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//实现方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sqlite3<span class="token punctuation">)</span> <span class="token function">DataTypeOf</span><span class="token punctuation">(</span>typ reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">//查找对象的类型</span><span class="token keyword">switch</span> typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"bool"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"integer"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"bigint"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Float32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Float64<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"real"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"text"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">"blob"</span><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> typ<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Time<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"datetime"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"invalid sql type %s (%s)"</span><span class="token punctuation">,</span> typ<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> typ<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>sqlite3<span class="token punctuation">)</span> <span class="token function">TableExistSQL</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>args <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>tableName<span class="token punctuation">}</span><span class="token comment">//sqlite_master是一个特殊表, 存储数据库的元信息, 如表(table), 索引(index), 视图(view), 触发器(trigger),</span><span class="token comment">//可通过select查询相关信息</span><span class="token comment">//查表</span><span class="token keyword">return</span> <span class="token string">"SELECT name FROM sqlite_master WHERE type='table' and name=?"</span><span class="token punctuation">,</span> args<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>TableExistSQL</code>方法返回查询特定表的SQL语句。</p><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><p>本节主要用于将对象转换为表，其中这两者的对应关系为：</p><ul><li>结构体名——表名</li><li>结构体变量和类型——表的字段名和字段类型</li><li>结构体变量的Tag——约束条件（例如非空、主键等）</li></ul><p>以下面结构为例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span> <span class="token string">`geeorm:"PRIMARY KEY"`</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>转换成sql语句则表示为：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE `User` (`Name` text PRIMARY KEY, `Age` integer);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了能够读取变量名、类型、Tag，定义一个结构体来存储这三个值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//字段,对应于成员变量和类型以及Tag</span><span class="token keyword">type</span> Field <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span> <span class="token comment">//属性名</span>Type <span class="token builtin">string</span> <span class="token comment">//属性类型</span>Tag  <span class="token builtin">string</span> <span class="token comment">//tag</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于字段不止一个，为了方便检索和读取，定义数组和哈希表来存放字段。定义结构体来存放表：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//表的结构</span><span class="token keyword">type</span> Schema <span class="token keyword">struct</span> <span class="token punctuation">{</span>Model      <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Name       <span class="token builtin">string</span>Fields     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>FieldFieldNames <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>          <span class="token comment">//所有字段名</span>fieldMap   <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field <span class="token comment">//字段名与字段的映射关系,通过字段名找到对应的字段</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>Model</code>表示被映射的对象（即结构体），<code>Name</code>表示为表名，<code>Fields</code>、<code>FieldNames</code>、<code>fieldMap</code>的作用是存放字段，以便于检索：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取字段</span><span class="token keyword">func</span> <span class="token punctuation">(</span>schema <span class="token operator">*</span>Schema<span class="token punctuation">)</span> <span class="token function">GetField</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Field <span class="token punctuation">{</span><span class="token keyword">return</span> schema<span class="token punctuation">.</span>fieldMap<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在就需要将go语言的语句转换为sqlite3的语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Parse</span><span class="token punctuation">(</span>dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> d dialect<span class="token punctuation">.</span>Dialect<span class="token punctuation">)</span> <span class="token operator">*</span>Schema <span class="token punctuation">{</span><span class="token comment">//获取表</span>modelType <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>schema <span class="token operator">:=</span> <span class="token operator">&amp;</span>Schema<span class="token punctuation">{</span>Model<span class="token punctuation">:</span>    dest<span class="token punctuation">,</span>Name<span class="token punctuation">:</span>     modelType<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fieldMap<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Field<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> modelType<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//获取第i个字段</span>p <span class="token operator">:=</span> modelType<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//判断p是否为匿名字段或名字的首字母是否大写</span><span class="token keyword">if</span> <span class="token operator">!</span>p<span class="token punctuation">.</span>Anonymous <span class="token operator">&amp;&amp;</span> ast<span class="token punctuation">.</span><span class="token function">IsExported</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token punctuation">{</span>field <span class="token operator">:=</span> <span class="token operator">&amp;</span>Field<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>Type<span class="token punctuation">:</span> d<span class="token punctuation">.</span><span class="token function">DataTypeOf</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//利用函数对类型进行转换,reflect.New根据类型返回值</span><span class="token punctuation">}</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> p<span class="token punctuation">.</span>Tag<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"geeorm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>field<span class="token punctuation">.</span>Tag <span class="token operator">=</span> v<span class="token punctuation">}</span>schema<span class="token punctuation">.</span>Fields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>Fields<span class="token punctuation">,</span> field<span class="token punctuation">)</span>schema<span class="token punctuation">.</span>FieldNames <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>schema<span class="token punctuation">.</span>fieldMap<span class="token punctuation">[</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> field<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> schema<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>首先读取对象，得到它的结构；</li><li>然后初始化Schema结构，将对象和对应的表名存放在结构中；</li><li>逐一读取每一行变量、类型、Tag，其中数据类型需要转换为sqlite数据库的数据类型；</li><li>将读取到的值存放在<code>Field</code>结构中；</li><li>将多个<code>Field</code>对象通过之前定义的数组和哈希表来存放</li></ul><p>针对于这个流程，使用<code>reflect</code>标准库来实现，这一块还需要再进一步学习。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>定义一个结构。测试是否能够将这个结构初始化数据库的类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span> <span class="token string">`geeorm:"PRIMARY KEY"`</span>Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> TestDial<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> dialect<span class="token punctuation">.</span><span class="token function">GetDialect</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestParse</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>schema <span class="token operator">:=</span> <span class="token function">Parse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> TestDial<span class="token punctuation">)</span><span class="token keyword">if</span> schema<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">"User"</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>schema<span class="token punctuation">.</span>Fields<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to parse User struct"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> schema<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Tag <span class="token operator">!=</span> <span class="token string">"PRIMARY KEY"</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to parse primary key"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><p>丰富<code>Session</code>结构，加入表的操作：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB         <span class="token comment">//数据库</span>dialect  dialect<span class="token punctuation">.</span>Dialect <span class="token comment">//数据库类型转换</span>refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema  <span class="token comment">//表</span>sql      strings<span class="token punctuation">.</span>Builder <span class="token comment">//用于拼接 SQL 语句</span>sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//SQL 语句中占位符的对应值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加入了数据库的标识，以及表的数据结构生成。现在定义表的生成、查询函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将表存入</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Model</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span><span class="token comment">//如果没有初始化表或结构中的表与输入的表不同则重新赋值</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>refTable <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>refTable<span class="token punctuation">.</span>Model<span class="token punctuation">)</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>refTable <span class="token operator">=</span> schema<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> s<span class="token punctuation">.</span>dialect<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token comment">//判断结构中是否存放表</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema <span class="token punctuation">{</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>refTable <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">"Model is not set"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>refTable<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Model</code>函数的作用在于判断结构中的表与输入的表是否相同，避免重复写入表；<code>RefTable</code>判断结构中是否存放了表。</p><p>定义表的SQL语句操作函数，主要有建立表、删除表、查询表：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建表的SQL语句</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//存放每个属性值、类型、Tag</span><span class="token keyword">var</span> columns <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> table<span class="token punctuation">.</span>Fields <span class="token punctuation">{</span>columns <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s %s %s"</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//合并值</span>desc <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token comment">//SQL语句格式为CREATE TABLE `User` (`Name` text PRIMARY KEY, `Age` integer);</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE %s (%s)"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//删除表</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//判断数据库是否存在该表</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>sql<span class="token punctuation">,</span> values <span class="token operator">:=</span> s<span class="token punctuation">.</span>dialect<span class="token punctuation">.</span><span class="token function">TableExistSQL</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token comment">//执行sql语句，查询表名</span>row <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> tmp <span class="token builtin">string</span><span class="token comment">//将信息注入到tmp中</span><span class="token boolean">_</span> <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token keyword">return</span> tmp <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于<code>Session</code>结构加入了新的属性，因此外层结构体geeorm需要加入数据库属性：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Engine <span class="token keyword">struct</span> <span class="token punctuation">{</span>db      <span class="token operator">*</span>sql<span class="token punctuation">.</span>DBdialect dialect<span class="token punctuation">.</span>Dialect<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化函数初始化数据库操作结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取数据库转换的结构</span>dial<span class="token punctuation">,</span> ok <span class="token operator">:=</span> dialect<span class="token punctuation">.</span><span class="token function">GetDialect</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"dialect %s Not Found"</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>engine <span class="token operator">=</span> <span class="token operator">&amp;</span>Engine<span class="token punctuation">{</span>db<span class="token punctuation">:</span> db<span class="token punctuation">,</span> dialect<span class="token punctuation">:</span> dial<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="day3-记录新增和查询"><a href="#day3-记录新增和查询" class="headerlink" title="day3 记录新增和查询"></a>day3 记录新增和查询</h1><h2 id="Clause构造SQL语句"><a href="#Clause构造SQL语句" class="headerlink" title="Clause构造SQL语句"></a>Clause构造SQL语句</h2><p>在之前的学习中，一直是通过输入SQL语句来实现对数据库的调用，而现在通过构造SQL语句来调用数据库。查询SELECT语句的构成通常如下：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">SELECT col1, col2, ...    FROM table_name    WHERE [ conditions ]    GROUP BY col1    HAVING [ conditions ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于SELECT语句附加条件是可选的，因此需要定义专门的函数来调用这些附加条件并组合在一起。</p><p>构造结构体Clause，里面存放对应的SQL语句，然后定义函数来实现SQL语句的拼接：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Clause <span class="token keyword">struct</span> <span class="token punctuation">{</span>sql    <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span>sqlvar <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义数据类型Type，SQL关键字的类型都为Type，以便于统一管理：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Type <span class="token builtin">int</span><span class="token comment">//定义SQL语句类型</span><span class="token keyword">const</span> <span class="token punctuation">(</span>INSERT Type <span class="token operator">=</span> <span class="token boolean">iota</span>VALUESSELECTLIMITWHEREORDERBY<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义SQL语句"><a href="#定义SQL语句" class="headerlink" title="定义SQL语句"></a>定义SQL语句</h3><p>由于SQL语句的生成规则不变，因此将这些规则写成私有函数，然后用哈希表来存放这些函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//根据SQL关键字返回对应的处理函数</span><span class="token comment">//输出分别为：SQL语句，语句中的变量</span><span class="token keyword">type</span> generator <span class="token keyword">func</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//存放处理函数</span><span class="token keyword">var</span> generators <span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>generators <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span>generator<span class="token punctuation">)</span>generators<span class="token punctuation">[</span>INSERT<span class="token punctuation">]</span> <span class="token operator">=</span> _insertgenerators<span class="token punctuation">[</span>VALUES<span class="token punctuation">]</span> <span class="token operator">=</span> _valuesgenerators<span class="token punctuation">[</span>SELECT<span class="token punctuation">]</span> <span class="token operator">=</span> _selectgenerators<span class="token punctuation">[</span>WHERE<span class="token punctuation">]</span> <span class="token operator">=</span> _wheregenerators<span class="token punctuation">[</span>ORDERBY<span class="token punctuation">]</span> <span class="token operator">=</span> _orderby<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>INSERT的格式为：<code>INSERT INTO $tableName($fields)</code>，因此将变量嵌入到语句中并生成SQL语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//INSERT函数，格式为INSERT INTO $tableName($fields)</span><span class="token keyword">func</span> <span class="token function">_insert</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//values第一个值为表名</span>tablename <span class="token operator">:=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">//传入字段名</span>fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO %s (%v)"</span><span class="token punctuation">,</span> tablename<span class="token punctuation">,</span> fields<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="VALUES"><a href="#VALUES" class="headerlink" title="VALUES"></a>VALUES</h3><p>VALUES的格式为：<code>VALUES (?), (?), ...</code>，因此只需要确定变量的个数，并生成<code>(?)</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//生成VALUE值的个数，格式为：?, ?</span><span class="token keyword">func</span> <span class="token function">genBindVars</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//拼接，生成?, ?</span><span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//VALUE函数，格式为VALUES (?), (?), ...</span><span class="token keyword">func</span> <span class="token function">_values</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// VALUES ($v1), ($v2), ...</span><span class="token keyword">var</span> bindstr <span class="token builtin">string</span> <span class="token comment">//生成?</span><span class="token keyword">var</span> sql strings<span class="token punctuation">.</span>Builder<span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"VALUES "</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>v <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> bindstr <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>bindstr <span class="token operator">=</span> <span class="token function">genBindVars</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"(%v)"</span><span class="token punctuation">,</span> bindstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//在(?)后面加,</span><span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>sql<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">}</span>vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//返回"VALUES (?), (?), ...",value1,value2</span><span class="token keyword">return</span> sql<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从函数中看，由于<code>v := value.([]interface{})</code>通常为1个值，因此每次循环都会生成一个<code>(?)</code>。</p><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><p>SELECT语句的格式为：<code>SELECT $fields FROM $tableName</code>，因此函数编写为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//SELECT函数，格式为SELECT $fields FROM $tableName</span><span class="token keyword">func</span> <span class="token function">_select</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tablename <span class="token operator">:=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"SELECT %v FROM %s"</span><span class="token punctuation">,</span> fields<span class="token punctuation">,</span> tablename<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><p>WHERE语句的格式为：<code>WHERE $desc</code>，其中<code>desc</code>表示条件语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//WHERE函数，格式为WHERE $desc，desc表示条件语句</span><span class="token keyword">func</span> <span class="token function">_where</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//vars表示desc语句里的变量</span>desc<span class="token punctuation">,</span> vars <span class="token operator">:=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"WHERE %v"</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">,</span> vars<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ORDERBY"><a href="#ORDERBY" class="headerlink" title="ORDERBY"></a>ORDERBY</h3><p>ORDERBY语句的格式为：<code>ORDER BY column_name,column_name ASC|DESC;</code>:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//ORDERBY函数，格式为ORDER BY column_name,column_name ASC|DESC;</span><span class="token keyword">func</span> <span class="token function">_orderby</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ORDER BY %s"</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拼接SQL语句"><a href="#拼接SQL语句" class="headerlink" title="拼接SQL语句"></a>拼接SQL语句</h3><p>当拥有这些SQL语句的生成功能后，就需要对象来调用它们，那么Clause结构体来存储这些SQL语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//初始化SQL语句</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Clause<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>name Type<span class="token punctuation">,</span> vars <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>sql <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>sql <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sqlvar <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>Type<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//生成对应的sql语句</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> generators<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span>vars<span class="token operator">...</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>sql<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> sqlc<span class="token punctuation">.</span>sqlvar<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> vars<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Clause结构体存储这些SQL语句和变量，以便于拼接：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//拼接SQL语句并输出</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Clause<span class="token punctuation">)</span> <span class="token function">Build</span><span class="token punctuation">(</span>orders <span class="token operator">...</span>Type<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//定义变量存储SQL语句和变量值</span><span class="token keyword">var</span> sqls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> order <span class="token operator">:=</span> <span class="token keyword">range</span> orders <span class="token punctuation">{</span><span class="token keyword">if</span> sql<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>sql<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">//拼接sql语句</span>sqls <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sqls<span class="token punctuation">,</span> sql<span class="token punctuation">)</span>vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> c<span class="token punctuation">.</span>sqlvar<span class="token punctuation">[</span>order<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>sqls<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照顺序将这些SQL语句拼接得到完整SQL语句。</p><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testSelect</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> clause Clauseclause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>LIMIT<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>SELECT<span class="token punctuation">,</span> <span class="token string">"User"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"*"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>WHERE<span class="token punctuation">,</span> <span class="token string">"Name = ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>ORDERBY<span class="token punctuation">,</span> <span class="token string">"Age ASC"</span><span class="token punctuation">)</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>SELECT<span class="token punctuation">,</span> WHERE<span class="token punctuation">,</span> ORDERBY<span class="token punctuation">,</span> LIMIT<span class="token punctuation">)</span><span class="token keyword">if</span> sql <span class="token operator">!=</span> <span class="token string">"SELECT * FROM User WHERE Name = ? ORDER BY Age ASC LIMIT ?"</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to build SQL"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to build SQLVars"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestClause_Build</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">testSelect</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现Insert功能"><a href="#实现Insert功能" class="headerlink" title="实现Insert功能"></a>实现Insert功能</h2><p>为了能够调用Clause结构体，在Session结构体内定义变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB         <span class="token comment">//数据库</span>dialect  dialect<span class="token punctuation">.</span>Dialect <span class="token comment">//数据库类型转换</span>refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema  <span class="token comment">//表</span>clause   clause<span class="token punctuation">.</span>Clause   <span class="token comment">//SQL语句，例如INSERT、SELECT</span>sql      strings<span class="token punctuation">.</span>Builder <span class="token comment">//用于拼接 SQL 语句</span>sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//SQL 语句中占位符的对应值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于clause只能存放一条SQL语句，因此每次需要重置clause：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//清空所有sql值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>sql<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sqlVars <span class="token operator">=</span> <span class="token boolean">nil</span>s<span class="token punctuation">.</span>clause <span class="token operator">=</span> clause<span class="token punctuation">.</span>Clause<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Insert功能"><a href="#Insert功能" class="headerlink" title="Insert功能"></a>Insert功能</h3><p>Insert 的调用方式如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span>u1 <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>u2 <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"Sam"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于SQL语句需要属性值，因此结构体对象的值需要提取出来，在上一节中利用TypeOf()方法来将结构体抽象成表，现在利用ValueOf()方法来提取其中的值：在Schema结构中新增函数<code>RecordValues</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将结构体对象的值提取出来</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Schema<span class="token punctuation">)</span> <span class="token function">RecordValues</span><span class="token punctuation">(</span>dest <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>destValue <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> fieldsValue <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//根据属性名</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>Fields <span class="token punctuation">{</span>fieldsValue <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fieldsValue<span class="token punctuation">,</span> destValue<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> fieldsValue<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数将结构对象的值提取并用切片存储。</p><p>现在就需要生成SQL语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//Insert操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Insert</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//存放值</span>recordValues <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span><span class="token comment">//生成表</span>table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//生成Insert语句</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>INSERT<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span><span class="token comment">//存放值</span>recordValues <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>recordValues<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">RecordValues</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//生成VALUES语句</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>INSERT<span class="token punctuation">,</span> recordValues<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//拼接SQL语句</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>INSERT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>VALUES<span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>INSERT生成的格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name<span class="token punctuation">(</span>col1<span class="token punctuation">,</span> col2<span class="token punctuation">,</span> col3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    <span class="token punctuation">(</span>A1<span class="token punctuation">,</span> A2<span class="token punctuation">,</span> A3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span>B1<span class="token punctuation">,</span> B2<span class="token punctuation">,</span> B3<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>该函数首先生成表，然后生成INSERT语句，随后将值提取并存储在切片中，例如：<code>[[name1,age1],[name2,age2]]</code>，之后生成VALUES语句，有了INSERT和VALUES语句，就将它们拼接在一起，最后通过Build函数来生成最终的语句，调用Raw函数来执行该语句，利用RowsAffected函数查看表的更新情况。</p><h3 id="实现Find功能"><a href="#实现Find功能" class="headerlink" title="实现Find功能"></a>实现Find功能</h3><p>调用方式为:传入一个切片指针，查询的结果保存在切片中。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Users<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>利用reflect标准库来生成结构体来存放SQL查询语句得到的值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//查询函数，空切片作为输入</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>values <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>destSlice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span>destType <span class="token operator">:=</span> destSlice<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>destType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//生成SELECT语句</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span><span class="token comment">//sql语句</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>SELECT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>ORDERBY<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>LIMIT<span class="token punctuation">)</span>rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//逐步查询</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//生成结构体</span>dest <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>destType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> name <span class="token operator">:=</span> <span class="token keyword">range</span> table<span class="token punctuation">.</span>FieldNames <span class="token punctuation">{</span><span class="token comment">//我的感觉是生成空值,为了后续的写入</span>values <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> dest<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将SQL语句读取的值写入values</span><span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>values<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">//切片中添加结构体</span>destSlice<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>destSlice<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1）<code>destSlice.Type().Elem()</code> 获取切片的单个元素的类型 <code>destType</code>，使用 <code>reflect.New()</code> 方法创建一个 <code>destType</code> 的实例，作为 <code>Model()</code> 的入参，映射出表结构 <code>RefTable()</code>。</li><li>2）根据表结构，使用 clause 构造出 SELECT 语句，查询到所有符合条件的记录 <code>rows</code>。</li><li>3）遍历每一行记录，利用反射创建 <code>destType</code> 的实例 <code>dest</code>，将 <code>dest</code> 的所有字段平铺开，构造切片 <code>values</code>。</li><li>4）调用 <code>rows.Scan()</code> 将该行记录每一列的值依次赋值给 values 中的每一个字段。</li><li>5）将 <code>dest</code> 添加到切片 <code>destSlice</code> 中。循环直到所有的记录都添加到切片 <code>destSlice</code> 中。</li></ul><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> session<span class="token keyword">import</span> <span class="token string">"testing"</span><span class="token keyword">var</span> <span class="token punctuation">(</span>user1 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span>user2 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span>user3 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> <span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>err1 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err2 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err3 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed init test records"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Insert</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>affected<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to create record"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Find</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to query all"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="day4-链式操作与更新删除"><a href="#day4-链式操作与更新删除" class="headerlink" title="day4 链式操作与更新删除"></a>day4 链式操作与更新删除</h1><h2 id="支持Update、Delete、Count"><a href="#支持Update、Delete、Count" class="headerlink" title="支持Update、Delete、Count"></a>支持Update、Delete、Count</h2><p>添加UPDATE、DELETE、COUNT三个关键字的SQL语句。</p><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>UPDATE的格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1<span class="token operator">=</span>value1<span class="token punctuation">,</span>column2<span class="token operator">=</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的函数为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//UPDATE函数，格式为UPDATE table_name</span><span class="token comment">//SET column1=value1,column2=value2,...</span><span class="token keyword">func</span> <span class="token function">_update</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// UPDATE $table_name SET $column1 = ? , $column2 = ? ...</span>tableName <span class="token operator">:=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">//属性名和对应的值,键值对</span>m <span class="token operator">:=</span> values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> m <span class="token punctuation">{</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> k<span class="token operator">+</span><span class="token string">" = ?"</span><span class="token punctuation">)</span>vars <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"UPDATE %s SET %v"</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vars<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>DELETE函数的格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//DELETE函数，格式为DELETE FROM table_name</span><span class="token keyword">func</span> <span class="token function">_delete</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM %s"</span><span class="token punctuation">,</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><p>COUNT函数的格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//COUNT函数，格式为SELECT COUNT(column_name) FROM table_name;</span><span class="token comment">//复用_select函数</span><span class="token keyword">func</span> <span class="token function">_count</span><span class="token punctuation">(</span>values <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">_select</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"count(*)"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拼接SQL语句-1"><a href="#拼接SQL语句-1" class="headerlink" title="拼接SQL语句"></a>拼接SQL语句</h2><p>定义了这些初始函数后，就需要拼接这些SQL语句以形成最终的SQL语句：</p><p><strong>UPDATE</strong>完整的SQL语句格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">UPDATE</span> table_name<span class="token keyword">SET</span> column1<span class="token operator">=</span>value1<span class="token punctuation">,</span>column2<span class="token operator">=</span>value2<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">WHERE</span> some_column<span class="token operator">=</span>some_value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// support map[string]interface{}</span><span class="token comment">// also support kv list: "Name", "Tom", "Age", 18, ....</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Update</span><span class="token punctuation">(</span>kv <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>m<span class="token punctuation">,</span> ok <span class="token operator">:=</span> kv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//如果格式为不是哈希表，则重构哈希表</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>kv<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">{</span>m<span class="token punctuation">[</span>kv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> kv<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//生成UPDATE语句</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>UPDATE<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token comment">//拼接SQL语句</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>UPDATE<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在update函数中，输入可为：切片或哈希表。</p><p><strong>DELETE</strong>函数的完整格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name<span class="token keyword">WHERE</span> some_column<span class="token operator">=</span>some_value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此传入的值为表名：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//DELETE FROM table_name WHERE some_column=some_value;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>sql<span class="token punctuation">,</span>vars<span class="token operator">:=</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>DELETE<span class="token punctuation">,</span>clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span>result<span class="token punctuation">,</span>err<span class="token operator">:=</span>s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span>err<span class="token punctuation">}</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>COUNT函数的完整格式为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//SELECT COUNT(column_name) FROM table_name;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>COUNT<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>sql<span class="token punctuation">,</span> vars <span class="token operator">:=</span> s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>COUNT<span class="token punctuation">,</span> clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">)</span><span class="token comment">//获取一条数据</span>row <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> vars<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> temp <span class="token builtin">int64</span><span class="token keyword">if</span> err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> temp<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p><strong>链式调用</strong>的原理为：某个对象调用某个方法后，将该对象的引用/指针返回，即可以继续调用该对象的其他方法。通常来说，当某个对象需要一次调用多个方法来设置其<strong>属性</strong>时，就非常适合改造为链式调用了。</p><p>例如SQL语句是由多个子句构成，例如SELECT语句需要设置查询条件、限制返回行数等，调用方式为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">s <span class="token operator">:=</span> geeorm<span class="token punctuation">.</span><span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Users<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"Age &gt; 18"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因此需要构造几个函数来设置属性值：</p><h3 id="构造条件语句函数"><a href="#构造条件语句函数" class="headerlink" title="构造条件语句函数"></a>构造条件语句函数</h3><p>由于<code>LIMIT</code>\ <code>WHERE</code>\ <code>ORDER BY</code>等查询条件语句在<code>generator</code>文件中实现，因此在外部文件<code>Session</code>中调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//LIMIT</span><span class="token comment">//LIMIT $NUM</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Limit</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>LIMIT<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token comment">//WHERE</span><span class="token comment">//WHERE $desc=arg</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Where</span><span class="token punctuation">(</span>desc <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span><span class="token keyword">var</span> vars <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>WHERE<span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>vars<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token comment">//ORDER BY</span><span class="token comment">//ORDER BY column_name,column_name ASC|DESC;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">OrderBy</span><span class="token punctuation">(</span>desc <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>s<span class="token punctuation">.</span>clause<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>clause<span class="token punctuation">.</span>ORDERBY<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="First只返回一条记录"><a href="#First只返回一条记录" class="headerlink" title="First只返回一条记录"></a>First只返回一条记录</h2><p>First函数在执行SQL语句后可以只返回一条记录：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//输出一条记录</span><span class="token comment">//u := &amp;User{}</span><span class="token comment">//_ = s.OrderBy("Age DESC").First(u)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">First</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>dest <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">Indirect</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>destSlice <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">SliceOf</span><span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//生成Array类型的切片</span><span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>destSlice<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> destSlice<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"NOT FOUND"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dest<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>destSlice<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>user1 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span>user2 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Sam"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span>user3 <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>Session <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> <span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>err1 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>err2 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err3 <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user1<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err3 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed init test records"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Insert</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>affected<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to create record"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Find</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to query all"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Limit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Usererr <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to query with limit condition"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_Update</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"Name = ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token string">"Age"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span><span class="token string">"Age DESC"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">if</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>Age <span class="token operator">!=</span> <span class="token number">30</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to update"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_DeleteAndCount</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">testRecordInit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>affected<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">"Name = ?"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>count<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> affected <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> count <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to delete or count"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="day5-实现钩子函数"><a href="#day5-实现钩子函数" class="headerlink" title="day5 实现钩子函数"></a>day5 实现钩子函数</h1><p>钩子函数英文名为Hook，当代码运行到某步时，自动触发钩子函数并执行函数里的代码。</p><p>例如在ORM框架中，记录的增删查改前后设置钩子函数来执行其他内容。</p><h2 id="实现钩子函数"><a href="#实现钩子函数" class="headerlink" title="实现钩子函数"></a>实现钩子函数</h2><p>GeeORM 的钩子与结构体绑定，即每个结构体需要实现各自的钩子。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将钩子函数名称固定</span><span class="token keyword">const</span> <span class="token punctuation">(</span>BeforeQuery  <span class="token operator">=</span> <span class="token string">"BeforeQuery"</span>AfterQuery   <span class="token operator">=</span> <span class="token string">"AfterQuery"</span>BeforeUpdate <span class="token operator">=</span> <span class="token string">"BeforeUpdate"</span>AfterUpdate  <span class="token operator">=</span> <span class="token string">"AfterUpdate"</span>BeforeDelete <span class="token operator">=</span> <span class="token string">"BeforeDelete"</span>AfterDelete  <span class="token operator">=</span> <span class="token string">"AfterDelete"</span>BeforeInsert <span class="token operator">=</span> <span class="token string">"BeforeInsert"</span>AfterInsert  <span class="token operator">=</span> <span class="token string">"AfterInsert"</span><span class="token punctuation">)</span><span class="token comment">//调用钩子函数，本质是调用结构体的方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">CallMethod</span><span class="token punctuation">(</span>method <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调用session里的refTable结构</span>fm <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token comment">//如果已经传入结构</span><span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fm <span class="token operator">=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MethodByName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//以session作为参数</span>param <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">{</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> fm<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//执行函数，输出结果</span><span class="token keyword">if</span> v <span class="token operator">:=</span> fm<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err<span class="token punctuation">,</span> ok <span class="token operator">:=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在各个SQL方法内部调用，例如在<code>Find</code>方法中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// Find gets all eligible records</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Find</span><span class="token punctuation">(</span>values <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">CallMethod</span><span class="token punctuation">(</span>BeforeQuery<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token comment">// ...</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dest <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>destType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// ...</span>        s<span class="token punctuation">.</span><span class="token function">CallMethod</span><span class="token punctuation">(</span>AfterQuery<span class="token punctuation">,</span> dest<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token keyword">return</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Find</code>方法中，在查询之前调用一次钩子函数，在查询后调用一次钩子函数，此时查询的对象中已经含有值。</p><h2 id="测试-5"><a href="#测试-5" class="headerlink" title="测试"></a>测试</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> session<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"geeorm/log"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Account <span class="token keyword">struct</span> <span class="token punctuation">{</span>ID       <span class="token builtin">int</span> <span class="token string">`geeorm:"PRIMARY KEY"`</span>Password <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>account <span class="token operator">*</span>Account<span class="token punctuation">)</span> <span class="token function">BeforeInsert</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"before inert"</span><span class="token punctuation">,</span> account<span class="token punctuation">)</span>account<span class="token punctuation">.</span>ID <span class="token operator">+=</span> <span class="token number">1000</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>account <span class="token operator">*</span>Account<span class="token punctuation">)</span> <span class="token function">AfterQuery</span><span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"after query"</span><span class="token punctuation">,</span> account<span class="token punctuation">)</span>account<span class="token punctuation">.</span>Password <span class="token operator">=</span> <span class="token string">"******"</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestSession_CallMethod</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> <span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Account<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Account<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Account<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"qwerty"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>u <span class="token operator">:=</span> <span class="token operator">&amp;</span>Account<span class="token punctuation">{</span><span class="token punctuation">}</span>err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>ID <span class="token operator">!=</span> <span class="token number">1001</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>Password <span class="token operator">!=</span> <span class="token string">"******"</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Failed to call hooks after query, got"</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Day6-支持事务"><a href="#Day6-支持事务" class="headerlink" title="Day6 支持事务"></a>Day6 支持事务</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>数据库事务(transaction)是访问并可能操作各种数据项的一个<strong>数据库操作序列</strong>，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。事务由事务开始与事务结束之间执行的<strong>全部数据库操作</strong>组成。</p></blockquote><p>例如A转账给B一万元，此时数据库的操作应为：</p><p>1、A的账户减去一万元；</p><p>2、B的账户增加一万元。</p><p>这两个操作全部执行表示转账成功，任何一个操作没有执行则表示转账失败，这时执行过的操作必须回退到操作之前的状态。</p><p>事务具有4个属性：ACID,即<strong>原子性</strong>（Atomicity）、<strong>一致性</strong>（Consistency）、<strong>隔离性</strong>（Isolation）、<strong>持久性</strong>（Durability）。</p><ul><li>原子性：事务中的全部操作在数据库中是不可分割的，要么全部完成，要么全部不执行。（执行所有操作）</li><li>一致性：几个并行执行的事务，其执行结果必须与按某一顺序 串行执行的结果相一致。（多个事务存在顺序执行）</li><li>隔离性：事务的执行不受其他事务的干扰，事务执行的中间结果对其他事务必须是透明的。（各个事务独立执行，互不干扰）</li><li>持久性：对于任意已提交事务，系统必须保证该事务对数据库的改变不被丢失，即使数据库出现故障。（已完成的事务对数据库的改变不丢失）</li></ul><p>使用以下命令来控制事务：</p><ul><li><strong>BEGIN TRANSACTION（或BEGIN）</strong>：开始事务处理。</li><li><strong>COMMIT（或END TRANSACTION）</strong>：保存更改，或者可以使用 <strong>END TRANSACTION</strong> 命令。</li><li><strong>ROLLBACK</strong>：回滚所做的更改。</li></ul><p>事务只与<strong>INSERT</strong>、<strong>UPDATE</strong> 和 <strong>DELETE</strong> 以及查询操作一起使用。他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的。</p><p>在GO语言标准库<code>database/sql</code>提供了支持事务的接口，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token boolean">_</span> <span class="token string">"github.com/mattn/go-sqlite3"</span><span class="token string">"log"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>db<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token comment">//打开数据库</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE IF NOT EXISTS User(`Name` text);"</span><span class="token punctuation">)</span>tx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开始事务</span><span class="token boolean">_</span><span class="token punctuation">,</span> err1 <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User(`Name`) VALUES (?)"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err2 <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User(`Name`) VALUES (?)"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err1 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//回滚</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Rollback"</span><span class="token punctuation">,</span> err1<span class="token punctuation">,</span> err2<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//提交</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Commit"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GeeORM-支持事务"><a href="#GeeORM-支持事务" class="headerlink" title="GeeORM 支持事务"></a>GeeORM 支持事务</h2><p>为了能够使用事务，在<code>session</code>里定义<code>Tx</code>对象，此对象就是事务对象，由它来启动事务。此时<code>session</code>结构体有着两个数据库操作对象：<code>*sql.DB</code>和<code>*sql.Tx</code>，为了能够管理这两个对象，定义一个<code>CommonDB </code>接口，该接口包含最基本的三个数据库操作函数：<code>Query</code>、<code>QueryRow</code>、<code>Exec</code>，很显然这两个对象都实现了这三个函数，因此定义一个函数，输出为该接口。这样就能选择性的输出这两个对象之一。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Session <span class="token keyword">struct</span> <span class="token punctuation">{</span>db       <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB         <span class="token comment">//数据库</span>tx       <span class="token operator">*</span>sql<span class="token punctuation">.</span>Tx         <span class="token comment">//事务选项</span>dialect  dialect<span class="token punctuation">.</span>Dialect <span class="token comment">//数据库类型转换</span>refTable <span class="token operator">*</span>schema<span class="token punctuation">.</span>Schema  <span class="token comment">//表</span>clause   clause<span class="token punctuation">.</span>Clause   <span class="token comment">//SQL语句，例如INSERT、SELECT</span>sql      strings<span class="token punctuation">.</span>Builder <span class="token comment">//用于拼接 SQL 语句</span>sqlVars  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token comment">//SQL 语句中占位符的对应值</span><span class="token punctuation">}</span><span class="token comment">//定义接口，用于管理DB和Tx</span><span class="token comment">//该接口包含了操作数据库的最常用的函数</span><span class="token keyword">type</span> CommandDB <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Query</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>Rows<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>sql<span class="token punctuation">.</span>Row<span class="token function">Exec</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sql<span class="token punctuation">.</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//测试接口是否正常工作</span><span class="token keyword">var</span> <span class="token boolean">_</span> CommandDB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token boolean">_</span> CommandDB <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>sql<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">//返回数据库</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">DB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CommandDB <span class="token punctuation">{</span><span class="token comment">//如果需要开始事务操作则返回事务对象</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>tx <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">}</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>db<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建文件<code>session/transaction.go</code>来封装事务中的<code>Begin</code>、<code>Commit</code>、<code>Rollback</code>这三个接口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"transaction begin"</span><span class="token punctuation">)</span><span class="token keyword">if</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">RollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"transaction rollback"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Session<span class="token punctuation">)</span> <span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">"transaction commit"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在外部接口中定义一个接口用于开始事务：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//调用事务</span><span class="token keyword">type</span> TxFunc <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Transaction</span><span class="token punctuation">(</span>f TxFunc<span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//开启事务</span><span class="token keyword">if</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//defer操作，防止函数出现错误以进行回调</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">RollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//回滚</span><span class="token function">panic</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>         <span class="token comment">//回滚后再报错，确保数据库没有被改变</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//为了防止提交出问题或是在操作执行中出问题时进行回滚</span><span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">RollBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//若err不为空则表示函数执行过程中出错</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事务的所有操作封装成一个函数<code>TxFunc</code>，执行该函数等于在完成事务，利用<code>defer</code>延迟执行函数完成后的工作，执行函数时可能存在三种：1、函数的代码有问题；2、操作执行的过程中出问题；3、函数执行完成。因此使用判断语句来选择是否回滚。</p><h2 id="测试-6"><a href="#测试-6" class="headerlink" title="测试"></a>测试</h2><p>在本测试中，主要测试回滚和提交的效果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">OpenDb</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token operator">*</span>Engine <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>engine<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">NewEngine</span><span class="token punctuation">(</span><span class="token string">"sqlite3"</span><span class="token punctuation">,</span> <span class="token string">"gee.db"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Failed to connect"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> engine<span class="token punctuation">}</span><span class="token comment">//测试回滚函数</span><span class="token keyword">func</span> <span class="token function">TestEngine_Transaction</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// t.Run("rollback", func(t *testing.T) {</span><span class="token comment">// transactionRollback(t)</span><span class="token comment">// })</span>t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"commit"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">transactionCommit</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span> <span class="token string">`geeorm:"PRIMARY KEY"`</span>Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">transactionRollback</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//启动数据库</span>engine <span class="token operator">:=</span> <span class="token function">OpenDb</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">defer</span> engine<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建对象</span>s <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//先删除原先的表</span>s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建事务函数</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//建表</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//插入数据</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to rollback"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">transactionCommit</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//启动数据库</span>engine <span class="token operator">:=</span> <span class="token function">OpenDb</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">defer</span> engine<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建对象</span>s <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//先删除原先的表</span>s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DropTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//创建事务函数</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//建表</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//插入数据</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">)</span>u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//查询第一个值</span><span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> u<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">"Tom"</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to commit"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="day7-数据库迁移"><a href="#day7-数据库迁移" class="headerlink" title="day7 数据库迁移"></a>day7 数据库迁移</h1><ul><li>结构体(struct)变更时，数据库表的字段(field)自动迁移(migrate)。</li><li>仅支持字段新增与删除，不支持字段类型变更。</li></ul><h2 id="使用SQL语句Migrate"><a href="#使用SQL语句Migrate" class="headerlink" title="使用SQL语句Migrate"></a>使用SQL语句Migrate</h2><p>数据库迁移存在着很多情况，复杂的情况表示为外键关系等关联关系，简单的情况表示为字段的增加和删除。</p><p>在本节中，主要实现字段的增加和删除。</p><h3 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h3><p>新增字段的语法为：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">ALTER TABLE table_name ADD COLUMN col_name, col_type;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><p>删除字段的一个可行方法为新建一个表，从旧的表中选择需要的字段，然后删除旧的表：</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">CREATE TABLE new_table AS SELECT col1, col2, ... from old_tableDROP TABLE old_tableALTER TABLE new_table RENAME TO old_table;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h2><p>利用事务来实现这两个操作，输入一个结构体来进行判断是否新增或删除字段：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//输出两个字符数组中不同的元素</span><span class="token keyword">func</span> <span class="token function">difference</span><span class="token punctuation">(</span>a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>diff <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//利用哈希表</span>mapB <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> b <span class="token punctuation">{</span>mapB<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span><span class="token comment">//查找a中有而b中没有的元素</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> mapB<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>diff <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>diff<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>Engine<span class="token punctuation">)</span> <span class="token function">Migrate</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token comment">//启用事务</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token operator">*</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断数据库中是否存在该表</span><span class="token keyword">if</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">Model</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">HasTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建表</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"table %s doesn't exist"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">CreateTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获取表的信息</span>table <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">RefTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>rows<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM %s LIMIT 1"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//从rows获取属性</span>columns<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//比较不同</span>addCols <span class="token operator">:=</span> <span class="token function">difference</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> columns<span class="token punctuation">)</span>delCols <span class="token operator">:=</span> <span class="token function">difference</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"added cols %v, deleted cols %v"</span><span class="token punctuation">,</span> addCols<span class="token punctuation">,</span> delCols<span class="token punctuation">)</span><span class="token comment">//增加字段</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> col <span class="token operator">:=</span> <span class="token keyword">range</span> addCols <span class="token punctuation">{</span><span class="token comment">//根据字段名获取属性信息</span>field <span class="token operator">:=</span> table<span class="token punctuation">.</span><span class="token function">GetField</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token comment">//更新</span>sqlStr <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ALTER TABLE %s ADD COLUMN %s %s"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> field<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token comment">//执行SQL语句</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//删除字段</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>delCols<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//创建新表</span>tmp <span class="token operator">:=</span> <span class="token string">"tmp_"</span> <span class="token operator">+</span> table<span class="token punctuation">.</span>Name<span class="token comment">//拼接属性名</span>fieldStr <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span>FieldNames<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token comment">/*CREATE TABLE new_table AS SELECT col1, col2, ... from old_tableDROP TABLE old_tableALTER TABLE new_table RENAME TO old_table;*/</span>s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE %s AS SELECT %s from %s;"</span><span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> fieldStr<span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE %s;"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ALTER TABLE %s RENAME TO %s;"</span><span class="token punctuation">,</span> table<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码的流程为：</p><ul><li>判断是否存在该表，不存在则创建表并返回；</li><li>获取该表的信息，并得到它的属性名；</li><li>判断输入结构的属性名与已有的表的属性的差异（存在输入的结构与之前的表的名字相同但属性不同，因此需要更新）；</li><li>新增字段；</li><li>删除字段；</li></ul><h2 id="测试-7"><a href="#测试-7" class="headerlink" title="测试"></a>测试</h2><p>输入一个结构体，然后在函数中创建一个表，之后比较这个表和结构体，将表的结构改为结构体的结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestEngine_Migrate</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>engine <span class="token operator">:=</span> <span class="token function">OpenDb</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token keyword">defer</span> engine<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> engine<span class="token punctuation">.</span><span class="token function">NewSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS User;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE User(Name text PRIMARY KEY, XXX integer);"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO User(`Name`) values (?), (?)"</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Sam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>engine<span class="token punctuation">.</span><span class="token function">Migrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>rows<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Raw</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM User"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">QueryRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span>columns<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Columns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Failed to migrate table User, got columns"</span><span class="token punctuation">,</span> columns<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> go7天编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式缓存GeeCache</title>
      <link href="/51338.html"/>
      <url>/51338.html</url>
      
        <content type="html"><![CDATA[<h1 id="分布式缓存GeeCache"><a href="#分布式缓存GeeCache" class="headerlink" title="分布式缓存GeeCache"></a>分布式缓存GeeCache</h1><p>该文档是对<a href="https://geektutu.com/post/geecache.html">7天用Go从零实现分布式缓存GeeCache教程系列</a>的总结。</p><h2 id="Day1-LRU缓存淘汰策略"><a href="#Day1-LRU缓存淘汰策略" class="headerlink" title="Day1 LRU缓存淘汰策略"></a>Day1 LRU缓存淘汰策略</h2><p>假定缓存能够使用的内存为N，当某一时间点增加一条缓存记录时超过了N，这时就需要删除一些缓存来腾空位置。那么删除哪些缓存较为合适？这里有三种缓存淘汰策略：<code>FIFO(First In First Out)</code>，<code>LFU(Least Frequently Used)</code>和 <code>LRU(Least Recently Used)</code></p><h3 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h3><h4 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h4><p>顾名思义，先进来的缓存先被淘汰。这时就会出现一些问题，经常访问的数据会被频繁地添加进缓存，又被淘汰出去，导致缓存命中率降低。</p><h4 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h4><p>该策略认为，最少使用的缓存即为被淘汰的缓存。因此该策略需要维护一个按照访问次序排序的队列，当访问某条缓存时，该条缓存的访问次序加1，然后该队列重新排序。这样的问题就是需要维护该队列使得内存占用高，且该策略受限于历史缓存，即某条缓存以前访问量大而现在很少访问，但是它的访问次数还是很高，这就导致该条缓存迟迟不能被淘汰。</p><h4 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h4><p>该策略认为最近最少使用的缓存应该被淘汰。这个策略是FIFO和LFU的结合体，既限制了时间又限制了访问次数，当最近一段时间某条缓存的访问量最少则被淘汰。算法的实现为建立一条队列，当访问某条缓存时就将该缓存移至最后，而最前的缓存则被淘汰。</p><h3 id="LRU实现"><a href="#LRU实现" class="headerlink" title="LRU实现"></a>LRU实现</h3><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>LRU算法的主要数据结构由队列和字典组成。字典存储键和值的映射关系，作用为查询缓存；而队列有值组成，当访问某条缓存时该条缓存移动至末尾。如下图所示LRU算法的主要数据结构：</p><img src="https://cdn.jsdelivr.net/gh/abcdhope/blog-img/202210021638539.jpg" alt="implement lru algorithm with golang"><p>因此根据该图我们需要创建一个包括字典和队列的结构体Cache，以便增删改查。</p><p>结构体的定义如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*定义缓存结构体，包括：最大内存maxBytes当前内存nbytes链表（队列）ll，利用标准库list实现字典cache删除操作OnEvicted，当删除某条内存时的一些操作*/</span><span class="token keyword">type</span> Cache <span class="token keyword">struct</span> <span class="token punctuation">{</span>maxBytes <span class="token builtin">int64</span>                    <span class="token comment">//最大缓存数</span>nBytes   <span class="token builtin">int64</span>                    <span class="token comment">//当前缓存数</span>ll       <span class="token operator">*</span>list<span class="token punctuation">.</span>List               <span class="token comment">//链表</span>cache    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element <span class="token comment">//键值对，用于查询对应的值</span><span class="token comment">//删除操作后的回调函数</span>OnEvicted <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>list.Element</code>为链表中的元素，可从链表中获取。</p><p><code>list.Element</code>中的<code>Value</code>为空接口，可被结构体Entry所赋值，Entry里保存键和值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//保存键值对</span><span class="token keyword">type</span> Entry <span class="token keyword">struct</span> <span class="token punctuation">{</span>key   <span class="token builtin">string</span>value Value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Value</code>为接口，其内为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Value <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token comment">//计算值的大小</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Len()</code>函数用于计算数据值的大小。</p><p>初始化函数为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>maxBytes <span class="token builtin">int64</span><span class="token punctuation">,</span> onEvicted <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cache <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Cache<span class="token punctuation">{</span>maxBytes<span class="token punctuation">:</span>  maxBytes<span class="token punctuation">,</span>ll<span class="token punctuation">:</span>        list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cache<span class="token punctuation">:</span>     <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">,</span>OnEvicted<span class="token punctuation">:</span> onEvicted<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了方便统计链表中元素的个数，为<em>Cache</em>结构体定义一个方法以便外部调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义Len方法，用于统计链表中元素的个数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><p>1、增改操作被定义在一个函数中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//增加/修改记录操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//当链表中有该记录，则进行刷新</span><span class="token keyword">if</span> ele<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">//将记录移至第一位</span>c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token comment">//修改链表元素对应的Value</span><span class="token comment">//Value为空接口，可用于接收Entry结构，结构中包含对应的键和value值</span>kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Entry<span class="token punctuation">)</span> <span class="token comment">//此操作为类型断言，并将</span><span class="token comment">//修改内存</span>c<span class="token punctuation">.</span>nBytes <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">int64</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//修改字典中的值</span>kv<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//在链表中创建元素，并将元素推到第一位</span><span class="token comment">//输入为元素值value，为空接口类型</span>ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Entry<span class="token punctuation">{</span>key<span class="token punctuation">,</span> value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//将元素存放至字典中</span>c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token comment">//增加内存</span>c<span class="token punctuation">.</span>nBytes <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//循环判断内存是否超过最大内存</span><span class="token keyword">for</span> c<span class="token punctuation">.</span>maxBytes <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>maxBytes <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>nBytes <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//处理最不常用的记录</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增改的思路为：</p><ul><li>判断链表中是否存在这个元素<ul><li>若存在，则将该元素移动至首位，并且更新使用内存和字典中键对应的值</li><li>若不存在，则在链表中创建一个元素，输入为<code>Entry</code>结构体对象，然后在字典中添加键和对应的值，增加使用内存。</li></ul></li><li>判断使用内存是否超过最大内存，超过则调用删除函数</li></ul><p>2、删除函数被定义为删除链表中末尾的元素（经常使用的元素会被调用到首位）：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//删除最旧的记录操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//获取末尾的元素</span>ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ele <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//从链表中删除元素</span>c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token comment">//从元素中获取对应的结构体值</span>kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Entry<span class="token punctuation">)</span><span class="token comment">//从字典中删除对应的键值对</span><span class="token function">delete</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cache<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token comment">//减少使用内存</span>c<span class="token punctuation">.</span>nBytes <span class="token operator">-=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//调用回调函数</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>OnEvicted <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">OnEvicted</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、通过键名来查询对应的值：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//查询操作</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value Value<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调用字典查询对应的值</span><span class="token keyword">if</span> ele<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">//从Entry结构体中调取对应的值</span>kv <span class="token operator">:=</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>Entry<span class="token punctuation">)</span><span class="token keyword">return</span> kv<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>定义一个字符类型，其类型实现Len方法，该方法的作用为计算字符串的大小“</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> String <span class="token builtin">string</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d String<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后测试之前实现的增删改查操作：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 查询</span><span class="token keyword">func</span> <span class="token function">TestGet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">//添加缓存</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"abcd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//获取对应的信息</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token operator">||</span> <span class="token function">string</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"abcd"</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"cache hit key1=1234 failed"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"cache miss key2 failed"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除</span><span class="token keyword">func</span> <span class="token function">TestRemoveOldest</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3 <span class="token operator">:=</span> <span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"key3"</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> v3 <span class="token operator">:=</span> <span class="token string">"value1"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">,</span> <span class="token string">"v3"</span>caps <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>k1 <span class="token operator">+</span> v1 <span class="token operator">+</span> k2 <span class="token operator">+</span> v2<span class="token punctuation">)</span>lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>caps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k2<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k3<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//测试当超过容量后是否会移除旧的信息</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">||</span> lru<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Removeoldest key1 failed"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 回调函数</span><span class="token keyword">func</span> <span class="token function">TestOnEvicted</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>keys <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>callback <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span>lru <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"k4"</span><span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"k4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>expect <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"k2"</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>reflect<span class="token punctuation">.</span><span class="token function">DeepEqual</span><span class="token punctuation">(</span>expect<span class="token punctuation">,</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Call OnEvicted failed, expect keys equals to %s"</span><span class="token punctuation">,</span> expect<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Day2-单机并发缓存"><a href="#Day2-单机并发缓存" class="headerlink" title="Day2 单机并发缓存"></a>Day2 单机并发缓存</h2><h3 id="sync-Mutex互斥锁"><a href="#sync-Mutex互斥锁" class="headerlink" title="sync.Mutex互斥锁"></a>sync.Mutex互斥锁</h3><p>为了实现LRU缓存的并发控制，采用互斥锁来进行处理。为了保证多个协程访问同一变量时出现冲突，利用互斥锁来给不同的协程加锁。</p><p>以下面的例子来解释互斥锁：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> set <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Mutex<span class="token keyword">func</span> <span class="token function">printOnce</span><span class="token punctuation">(</span>num <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> exist <span class="token operator">:=</span> set<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">!</span>exist <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span>set<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token function">printOnce</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span>输出为：<span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数的作用为若字典中的key没出现过则打印，后续不再打印。锁的作用在于其他协程只能等待用锁的协程进行解锁后才能使用，这时字典已经存在该key了，因此其他协程不再打印。</p><p>如果不加锁，输出结果为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="并发读写"><a href="#并发读写" class="headerlink" title="并发读写"></a>并发读写</h3><p>在上一章中，我们实现了lru的基本功能，即对数据增删改查。而在实现之后数据类型为接口类型，需要实现Len()方法才能传入。为了能够支持任意的数据类型的存储，定义一个结构类型来将数据类型全部转换为字节数组，并且这个结构实现Len()方法来统计数据的长度，并且提供String方法来转换成字符类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ByteView <span class="token keyword">struct</span> <span class="token punctuation">{</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">}</span><span class="token comment">//长度</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//字节数组转换为字符串</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//复制方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//克隆</span><span class="token keyword">func</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment">//复制</span><span class="token keyword">return</span> c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了数据类型之后，就需要对LRU进行封装，并提供锁功能防止并发冲突，主要功能有：增加数据和获取数据：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*封装lru方法以Value接口实现的值被ByteView进行封装*/</span><span class="token keyword">type</span> cache <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu         sync<span class="token punctuation">.</span>Mutex <span class="token comment">//锁</span>lru        <span class="token operator">*</span>lru<span class="token punctuation">.</span>Cache <span class="token comment">//链表</span>cacheBytes <span class="token builtin">int64</span>      <span class="token comment">//最大缓存</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value ByteView<span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//如果没有定义缓存链表，则初始化</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>lru <span class="token operator">=</span> lru<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cacheBytes<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value ByteView<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//判断链表是否为空</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//查询</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> ok <span class="token comment">//v返回的是接口，因此需要进行转换</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主体结构Group"><a href="#主体结构Group" class="headerlink" title="主体结构Group"></a>主体结构Group</h3><p>当实现了增加和获取功能后就可以实现一些需求：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">负责与外部交互，控制缓存存储和获取的主流程<span class="token punctuation">:</span>                            是接收 key <span class="token operator">--</span><span class="token operator">&gt;</span> 检查是否被缓存 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 返回缓存值 ⑴                <span class="token operator">|</span>  否                         是                <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 是否应当从远程节点获取 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 与远程节点交互 <span class="token operator">--</span><span class="token operator">&gt;</span> 返回缓存值 ⑵                            <span class="token operator">|</span>  否                            <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 调用<span class="token string">`回调函数`</span>，获取值并添加到缓存 <span class="token operator">--</span><span class="token operator">&gt;</span> 返回缓存值 ⑶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入key后进行判定，是否存在这个缓存，若存在则调取该缓存，否则从其他地方进行获取。本节只实现了回调函数这一个功能，远程节点留到后面进行编写，因此这里通过调用回调函数来获取缓存。</p><p>本节实现一个分组，每个分组里存放着不同类型的数据，例如缓存学生的成绩命名为 scores，缓存学生信息的命名为 info，缓存学生课程的命名为 courses。</p><p>定义一个结构体，结构体属性包括分组名称，缓存处理结构，回调函数。回调函数通过实现接口型函数来获取，接口型函数的实现过程如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义回调接口函数</span><span class="token keyword">type</span> GetterFunc <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">type</span> Getter <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g GetterFunc<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">g</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样定义的好处是匿名函数可以直接进行调用，结构体也可以通过实现接口来调用Get函数。这个用法在很多地方都有使用，例如：</p><p>在http包中通过实现Handler接口来调用函数：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> HandlerFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ResponseWriter<span class="token punctuation">,</span> <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f HandlerFunc<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">f</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了回调函数后，接下来定义分组结构体Group：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>name      <span class="token builtin">string</span>getter    Getter <span class="token comment">//回调函数</span>maincache <span class="token operator">*</span>cache <span class="token comment">//缓存策略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后初始化，传入回调函数，并且初始化缓存策略结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> cacheBytes <span class="token builtin">int64</span><span class="token punctuation">,</span> getter Getter<span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">{</span><span class="token keyword">if</span> getter <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"无回调函数可用来加载缓存"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>g <span class="token operator">:=</span> <span class="token operator">&amp;</span>Group<span class="token punctuation">{</span>name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>getter<span class="token punctuation">:</span>    getter<span class="token punctuation">,</span>maincache<span class="token punctuation">:</span> <span class="token operator">&amp;</span>cache<span class="token punctuation">{</span>cacheBytes<span class="token punctuation">:</span> cacheBytes<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>groups<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> g<span class="token keyword">return</span> g<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>groups表示分组集合，存放每个分组，mu和groups为全局变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//全局变量</span><span class="token keyword">var</span> <span class="token punctuation">(</span>mu     sync<span class="token punctuation">.</span>RWMutexgroups <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token comment">//组名字：组</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后就可以通过名字来获取对应的分组：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获得分组</span><span class="token keyword">func</span> <span class="token function">GetGroup</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">{</span><span class="token comment">//读锁，其他写锁需要等待读锁解锁来能进行操作，而其他读锁可以同时操作</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>g <span class="token operator">:=</span> groups<span class="token punctuation">[</span>name<span class="token punctuation">]</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> g<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是定义获取缓存的方法，根据上面的流程，首先判定缓存是否已经在链表中，若在则直接调取，不在则从其他地方（回调函数或远程节点）获取，然后将缓存存放在链表中。因此先需要一个主函数Get：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取缓存</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//输入为空</span><span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"key is required"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> k<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>maincache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[GeeCache] hit"</span><span class="token punctuation">)</span><span class="token keyword">return</span> k<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">//如果在链表中没有找到则启动回调函数来将缓存添加到链表中</span><span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Get函数判定输入的缓存名字是否为空，且链表中是否存在该缓存，若不存在则调用load函数来加载缓存：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//加载缓存，从远程节点获取或调用回调函数。目前实现回调函数获取</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调用回调函数</span><span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">getLocally</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有实现远程节点获取缓存，因此现在调用回调函数来获取：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装回调函数</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getLocally</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//回调函数获取缓存</span>bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token comment">//将bytes数据转换成ByteView</span>value <span class="token operator">:=</span> ByteView<span class="token punctuation">{</span>b<span class="token punctuation">:</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将该值添加进链表中</span>g<span class="token punctuation">.</span><span class="token function">populateCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取之后缓存定义为结构体形式，并调用populateCache函数将缓存存放在链表中，populateCache函数是对添加方法的封装：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//封装添加方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">populateCache</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value ByteView<span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span>maincache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>对定义的分组结构进行测试，测试是否将缓存存入其中并且是否能够调用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">:</span>  <span class="token string">"630"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">:</span> <span class="token string">"589"</span><span class="token punctuation">,</span><span class="token string">"Sam"</span><span class="token punctuation">:</span>  <span class="token string">"567"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>loadCount <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//统计加载回调函数的次数，出现两次以上则表示出问题</span>gee <span class="token operator">:=</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token function">GetterFunc</span><span class="token punctuation">(</span><span class="token comment">//2&lt;&lt;10，将2往左移动10位，相当于2 * 2^10</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[SlowDB] search key"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> db<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>loadCount<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%s not exist"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> db <span class="token punctuation">{</span><span class="token keyword">if</span> view<span class="token punctuation">,</span> err <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> view<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> v <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to get value of Tom"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// load from callback function</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> loadCount<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"cache %s miss"</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token comment">// cache hit</span><span class="token punctuation">}</span><span class="token keyword">if</span> view<span class="token punctuation">,</span> err <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"the value of unknow should be empty, but %s got"</span><span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>SlowDB<span class="token punctuation">]</span> search key Tom<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>GeeCache<span class="token punctuation">]</span> hit<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>SlowDB<span class="token punctuation">]</span> search key Jack<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>GeeCache<span class="token punctuation">]</span> hit<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>SlowDB<span class="token punctuation">]</span> search key Sam<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>GeeCache<span class="token punctuation">]</span> hit<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">15</span> <span class="token number">21</span><span class="token punctuation">:</span><span class="token number">06</span><span class="token punctuation">:</span><span class="token number">27</span> <span class="token punctuation">[</span>SlowDB<span class="token punctuation">]</span> search key unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Day3-HTTP服务端"><a href="#Day3-HTTP服务端" class="headerlink" title="Day3 HTTP服务端"></a>Day3 HTTP服务端</h2><p>一个简单的服务端由两个函数组成，一个是启动端口函数http.ListenAndServe，一个是请求处理函数ServeHTTP。其中ServeHTTP函数由接口Handler定义，且ListenAndServe函数的第二个参数的输入为Handler类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Handler <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>Request<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面是一个简单的服务端，该服务端对访问的地址输出“hello world”:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> server <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>server<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> s serverhttp<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:9999"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span>测试：C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>abcdhello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GeeCache-HTTP服务端"><a href="#GeeCache-HTTP服务端" class="headerlink" title="GeeCache HTTP服务端"></a>GeeCache HTTP服务端</h3><p>服务端解析网址，从网址中解析出分组信息和key，然后从分组中获取对应的缓存并返回到页面中。</p><p>首先定义固定地址，包括IP地址和后缀，特定的后缀用于存放缓存。在本例中，后缀为<code>/_geecache/</code>负责存放缓存。因此定义一个结构体来初始化地址：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义后缀</span><span class="token keyword">const</span> defaultBasePath <span class="token operator">=</span> <span class="token string">"/_geecache/"</span><span class="token keyword">type</span> HTTPPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>self     <span class="token builtin">string</span> <span class="token comment">//IP地址和端口，例如https://example.net:8000</span>basePath <span class="token builtin">string</span> <span class="token comment">//地址后缀，用于节点间的访问。例如http://example.com/_geecache/</span><span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">NewHTTPPool</span><span class="token punctuation">(</span>self <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>HTTPPool <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>HTTPPool<span class="token punctuation">{</span>self<span class="token punctuation">:</span>     self<span class="token punctuation">,</span>basePath<span class="token punctuation">:</span> defaultBasePath<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后定义缓存获取函数：首先将输入格式为<code>/&lt;basepath&gt;/&lt;groupname&gt;/&lt;key&gt;</code>的地址进行分解得到分组名字和key；然后判断输入地址的后缀、分组名字是否有效；随后调用LRU缓存策略，获取对应的缓存；最后将缓存输出到页面中:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//打印服务器信息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">Log</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> v <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//v的值写入format中</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"[server %s]: %s"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>self<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> v<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//读取缓存并返回缓存</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断地址是否属于这一个分支</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> p<span class="token punctuation">.</span>basePath<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"HTTPPool serving unexpected path: "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span>p<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"%s %s"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token comment">//分解地址中的参数，地址格式为： /&lt;basepath&gt;/&lt;groupname&gt;/&lt;key&gt; required</span><span class="token comment">//得到groupname和key</span>parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>basePath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//判断是否分解成功</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"bad request"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>groupName <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>key <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">//通过分组的名字得到分组</span>group <span class="token operator">:=</span> <span class="token function">GetGroup</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span><span class="token keyword">if</span> group <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"no such group: "</span><span class="token operator">+</span>groupName<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//通过key获取缓存</span>view<span class="token punctuation">,</span> err <span class="token operator">:=</span> group<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//将缓存发送至页面</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">curl localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>_geecache<span class="token operator">/</span><span class="token operator">&gt;</span>bad requestcurl localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>_geecache<span class="token operator">/</span>scores<span class="token operator">/</span>kkk<span class="token operator">&gt;</span>kkk not existcurl http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token operator">/</span>_geecache<span class="token operator">/</span>abcdhope<span class="token operator">/</span>a<span class="token operator">&gt;</span>no such group<span class="token punctuation">:</span> abcdhope<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Day4-一致性哈希"><a href="#Day4-一致性哈希" class="headerlink" title="Day4 一致性哈希"></a>Day4 一致性哈希</h2><h3 id="分布式的问题"><a href="#分布式的问题" class="headerlink" title="分布式的问题"></a>分布式的问题</h3><p>对于分布式缓存来说，当某一节点收到请求后，若本节点没有该请求对应的缓存，则需要从其他节点获取数据或者从数据源获取数据。</p><p>而当客户端第二次发出相同的请求后，可能不一定是由之前的节点来接收，这时新的节点需要从其他节点获取数据或者从数据源获取数据，这就导致了不同的节点存储的缓存是相同的且耗时。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>可采用<code>哈希</code>的方法，给每个节点标志对应的哈希值，并将每个节点放置在一个环上。而对于每个请求key，同样地标志哈希值并放置在环上，然后顺时针查找最近的节点。</p><p>若出现增加、删除节点的情况，那么对应的节点上的请求查找下一个相近的节点。</p><p>有时服务器的节点过少，因此有些节点会接收大量的请求，而有些节点会接收少量的请求，这时会导致节点间负载不均。</p><p>因此引入<code>虚拟节点</code>，即1个真实节点对应多个虚拟节点，并将虚拟节点放置环上，当请求查找到最近的虚拟节点时，则等于查找到真实节点。</p><h3 id="一致性哈希的实现"><a href="#一致性哈希的实现" class="headerlink" title="一致性哈希的实现"></a>一致性哈希的实现</h3><p>所有节点的哈希值由一个结构体来进行实现并进行存储，存储方式为经排序的数组，并且通过哈希表来存放虚拟节点对应的真实节点，同时需要定义hash函数来为每个节点计算hash值（默认为<code>crc32.ChecksumIEEE</code>算法）:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//自定义hash函数</span><span class="token keyword">type</span> Hash <span class="token keyword">func</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">{</span>hash     Hash           <span class="token comment">//哈希函数</span>replicas <span class="token builtin">int</span>            <span class="token comment">//一个真实节点对应的虚拟节点个数</span>keys     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>          <span class="token comment">//环，存放节点的哈希值</span>hashMap  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//键为虚拟节点的hash值，值为对应的真实节点</span><span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>replicas <span class="token builtin">int</span><span class="token punctuation">,</span> fn Hash<span class="token punctuation">)</span> <span class="token operator">*</span>Map <span class="token punctuation">{</span>m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Map<span class="token punctuation">{</span>hash<span class="token punctuation">:</span>     fn<span class="token punctuation">,</span>replicas<span class="token punctuation">:</span> replicas<span class="token punctuation">,</span>hashMap<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> m<span class="token punctuation">.</span>hash<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        m<span class="token punctuation">.</span>hash<span class="token operator">=</span>crc32<span class="token punctuation">.</span>ChecksumIEEE    <span class="token punctuation">}</span><span class="token keyword">return</span> m<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加节点"><a href="#增加节点" class="headerlink" title="增加节点"></a>增加节点</h4><p>增加节点，并增加对应的虚拟节点。将这些节点存放在数组中，并对应关系存放在哈希表中，然后对数组排序，方便查找。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//添加节点</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//真实节点个数</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span><span class="token comment">//虚拟节点对应的哈希值</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>replicas<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token comment">//计算哈希值</span>hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//将序号转换为string并进行拼接</span>m<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>                      <span class="token comment">//将哈希值放置在环上</span>m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> key                              <span class="token comment">//将虚拟节点与真实节点对应</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//将数组从小到大排序</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h4><p>通过计算请求节点的哈希值来找到比他大的第一个节点，并返回他的真实节点：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//查找节点</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token comment">//计算节点的哈希值</span>hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//使用二分查找,查找第一个大于等于该哈希值的节点,若没有找到节点则返回数组的长度</span>idx <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> hash<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>idx<span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h4><p>为方便测试，自定义一个hash函数：输入一个数字字符返回对应的数字。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestConsistanthash</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//字符转换为数字</span>hash <span class="token operator">:=</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">uint32</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>hash<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span> <span class="token comment">//生成2, 4, 6, 12, 14, 16, 22, 24, 26</span><span class="token comment">//定义测试表</span>testCases <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"2"</span><span class="token punctuation">:</span>  <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"11"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"23"</span><span class="token punctuation">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"27"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">//测试是否一一对应</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> testCases <span class="token punctuation">{</span><span class="token keyword">if</span> hash<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">!=</span> v <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Asking for %s, should have yielded %s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//增加节点</span>hash<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span> <span class="token comment">//8, 18, 28</span><span class="token comment">//增加测试案例</span>testCases<span class="token punctuation">[</span><span class="token string">"27"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"8"</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> testCases <span class="token punctuation">{</span><span class="token keyword">if</span> hash<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">!=</span> v <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Asking for %s, should have yielded %s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加”6”, “4”, “2”，此时数组中有2, 4, 6, 12, 14, 16, 22, 24, 26，因此当输入特定的数字后返回比他大的第一个数字对应的真实节点。</p><h2 id="Day5-分布式节点"><a href="#Day5-分布式节点" class="headerlink" title="Day5 分布式节点"></a>Day5 分布式节点</h2><p>在之前的获取缓存策略中，流程如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">                            是接收 key <span class="token operator">--</span><span class="token operator">&gt;</span> 检查是否被缓存 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 返回缓存值 ⑴                <span class="token operator">|</span>  否                         是                <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 是否应当从远程节点获取 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 与远程节点交互 <span class="token operator">--</span><span class="token operator">&gt;</span> 返回缓存值 ⑵                            <span class="token operator">|</span>  否                            <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 调用<span class="token string">`回调函数`</span>，获取值并添加到缓存 <span class="token operator">--</span><span class="token operator">&gt;</span> 返回缓存值 ⑶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在策略中，已经实现了（1）和（3），本节将实现（2）这一步骤。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>远程节点与本地节点的区别</li></ul><p>​远程节点表示为其他服务器（缓存服务器），而本地节点表示主服务器（用于访问的服务器）。若主服务器与某一缓存服务器一同启动，则本地节点为该缓存服务器。</p><ul><li><p>选择哪个远程节点</p><p>根据key的哈希值来选取远程节点</p></li></ul><p>可将步骤（2）细分为如下流程：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">使用一致性哈希选择节点        是                                    是    <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 是否是远程节点 <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> HTTP 客户端访问远程节点 <span class="token operator">--</span><span class="token operator">&gt;</span> 成功？<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> 服务端返回返回值                    <span class="token operator">|</span>  否                                    ↓  否                    <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> 回退到本地节点处理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来的工作为：</p><ul><li><p>每个客户端建立对应的节点，并通过客户端来输出缓存值。例如客户端<code>http://localhost:8001</code>，通过访问<code>http://localhost:8001/_geecache/groupName/key</code>来得到对应的缓存值。</p></li><li><p>分组结构中添加节点属性，用于访问节点获取缓存值。</p></li><li><p>主函数添加api服务器，以便于访问</p></li></ul><h3 id="建立客户端获取接口和缓存值获取接口"><a href="#建立客户端获取接口和缓存值获取接口" class="headerlink" title="建立客户端获取接口和缓存值获取接口"></a>建立客户端获取接口和缓存值获取接口</h3><p>建立两个接口，一个实现获取客户端的功能，一个实现获取缓存值的功能：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取缓存值</span><span class="token keyword">type</span> PeerGetter <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">Get</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//获取对应节点的方法</span><span class="token keyword">type</span> PeerPicker <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>peer PeerGetter<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTTP客户端"><a href="#HTTP客户端" class="headerlink" title="HTTP客户端"></a>HTTP客户端</h3><p>建立HTTP客户端来获取缓存值，其结构存有客户端的缓存地址，例如<code>http://localhost:8001/_geecache/</code>，其方法为Get方法，通过缓存地址以及查找的group和key来输出缓存值。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//客户端，读取链接获取缓存信息</span><span class="token keyword">type</span> httpGetter <span class="token keyword">struct</span> <span class="token punctuation">{</span>baseURL <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>httpGetter<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>group <span class="token builtin">string</span><span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//完整地址</span>u <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v%v/%v"</span><span class="token punctuation">,</span>h<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span>url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//将输入字符进行转义，例如my/cool+blog&amp;about,stuff转义为my%2Fcool%2Bblog%26about%2Cstuff</span>url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment">//访问网址</span>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"server returned: %v"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Status<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token comment">//读取数据</span>bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"reading response body: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> bytes<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之前已经实现了HTTP服务端和远程节点建立策略，现在将这两个结合，通过服务端来建立远程节点，并将节点名与客户端一一对应以便于进行访问。</p><p>在服务端原有的基础上加入节点属性，用该属性来建立节点：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HTTPPool <span class="token keyword">struct</span> <span class="token punctuation">{</span>self        <span class="token builtin">string</span>                 <span class="token comment">//IP地址和端口，例如https://example.net:8000</span>basePath    <span class="token builtin">string</span>                 <span class="token comment">//地址后缀，用于节点间的访问。例如http://example.com/_geecache/</span>mu          sync<span class="token punctuation">.</span>Mutex             <span class="token comment">//锁</span>peers       <span class="token operator">*</span>consistanthash<span class="token punctuation">.</span>Map    <span class="token comment">//生成节点</span>httpGetters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter <span class="token comment">//存放节点对应的客户端</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加节点函数"><a href="#添加节点函数" class="headerlink" title="添加节点函数"></a>添加节点函数</h4><p>增加<code>添加节点</code>函数，将客户端存进map中，采用key-客户端映射关系：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//设置节点</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>peers <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//初始化节点</span>p<span class="token punctuation">.</span>peers <span class="token operator">=</span> consistanthash<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>defaultReplicas<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">//增加节点</span>p<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>peers<span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//将节点名字与缓存请求策略绑定</span>p<span class="token punctuation">.</span>httpGetters <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">{</span><span class="token comment">//将节点与peer + p.basePath的地址绑定</span>p<span class="token punctuation">.</span>httpGetters<span class="token punctuation">[</span>peer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>httpGetter<span class="token punctuation">{</span>baseURL<span class="token punctuation">:</span> peer <span class="token operator">+</span> p<span class="token punctuation">.</span>basePath<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端的基础地址为：<code>http://localhost:8001/_geecache/</code>。</p><h4 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h4><p>通过输入的key利用刚建立的map来搜索符合条件的节点客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//根据key来获取节点对应的客户端，并通过客户端来获得缓存</span><span class="token comment">//返回客户端</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>PeerGetter<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//根据key来获取节点名字</span><span class="token keyword">if</span> peer <span class="token operator">:=</span> p<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> peer <span class="token operator">!=</span> <span class="token string">""</span> <span class="token operator">&amp;&amp;</span> peer <span class="token operator">!=</span> p<span class="token punctuation">.</span>self <span class="token punctuation">{</span>p<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Pick peer %s"</span><span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>httpGetters<span class="token punctuation">[</span>peer<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组结构更新远程节点检索"><a href="#分组结构更新远程节点检索" class="headerlink" title="分组结构更新远程节点检索"></a>分组结构更新远程节点检索</h3><p>之前的系统只支持本地节点获取缓存，现在将远程节点封装在系统中，在load函数中添加远程节点搜索：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//加载缓存，从远程节点获取或调用回调函数。目前实现回调函数获取</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调用远程节点</span><span class="token keyword">if</span> g<span class="token punctuation">.</span>peers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//获取节点对应的客户端</span><span class="token keyword">if</span> peer<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PickPeer</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">//从客户端得到缓存</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">getFromGetter</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[GeeCache] Failed to get from peer"</span><span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//调用回调函数</span><span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">getLocally</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入key来获得对应的客户端，然后调用getFromGetter函数来获取缓存：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getFromGetter</span><span class="token punctuation">(</span>peer PeerGetter<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>name<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ByteView<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> ByteView<span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主函数测试"><a href="#主函数测试" class="headerlink" title="主函数测试"></a>主函数测试</h3><p>主函数实现缓存服务器和主服务器功能，缓存服务器负责调取缓存，主服务器用于访问。</p><p>添加一组缓存：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//缓存信息</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Tom"</span><span class="token punctuation">:</span>  <span class="token string">"630"</span><span class="token punctuation">,</span><span class="token string">"Jack"</span><span class="token punctuation">:</span> <span class="token string">"589"</span><span class="token punctuation">,</span><span class="token string">"Sam"</span><span class="token punctuation">:</span>  <span class="token string">"567"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化分组结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建分组，回调函数用于加载本地节点存储的缓存</span><span class="token keyword">func</span> <span class="token function">createGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>geecache<span class="token punctuation">.</span>Group <span class="token punctuation">{</span>gee <span class="token operator">:=</span> geecache<span class="token punctuation">.</span><span class="token function">NewGroup</span><span class="token punctuation">(</span><span class="token string">"scores"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">,</span> geecache<span class="token punctuation">.</span><span class="token function">GetterFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> v<span class="token punctuation">,</span> ok <span class="token operator">:=</span> db<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"%s not exist"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> gee<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建缓存服务器，将缓存服务器写入结构中：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//启动缓存服务器，创建节点</span><span class="token comment">//可启动多个缓存服务器</span><span class="token keyword">func</span> <span class="token function">startCacheServer</span><span class="token punctuation">(</span>addr <span class="token builtin">string</span><span class="token punctuation">,</span> addrs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> gee <span class="token operator">*</span>geecache<span class="token punctuation">.</span>Group<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//创建服务器</span>peers <span class="token operator">:=</span> geecache<span class="token punctuation">.</span><span class="token function">NewHTTPPool</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token comment">//初始化缓存服务器</span>peers<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>addrs<span class="token operator">...</span><span class="token punctuation">)</span>                 <span class="token comment">//设置多个节点</span>gee<span class="token punctuation">.</span><span class="token function">RegisterPeers</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span>            <span class="token comment">//分组注册远程节点</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"geecache is running at"</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>addr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建主服务器，用于访问和获取缓存：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建主服务器，客户端通过访问该服务器的地址来获取缓存</span><span class="token keyword">func</span> <span class="token function">startApiServer</span><span class="token punctuation">(</span>apiAddr <span class="token builtin">string</span><span class="token punctuation">,</span> gee <span class="token operator">*</span>geecache<span class="token punctuation">.</span>Group<span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>key <span class="token operator">:=</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span> <span class="token comment">//获得键值</span>view<span class="token punctuation">,</span> err <span class="token operator">:=</span> gee<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>       <span class="token comment">//获取缓存</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fontend server is running at"</span><span class="token punctuation">,</span> apiAddr<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span>apiAddr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后对服务器赋值地址，并启动服务器：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> port <span class="token builtin">int</span><span class="token keyword">var</span> api <span class="token builtin">bool</span><span class="token comment">//输入端口号来启动缓存服务器</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>port<span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">8001</span><span class="token punctuation">,</span> <span class="token string">"Geecache server port"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">BoolVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>api<span class="token punctuation">,</span> <span class="token string">"api"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"Start a api server?"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//设置缓存服务器的地址和api服务器</span>apiAddr <span class="token operator">:=</span> <span class="token string">"http://localhost:9999"</span>addrMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">8001</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8001"</span><span class="token punctuation">,</span><span class="token number">8002</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8002"</span><span class="token punctuation">,</span><span class="token number">8003</span><span class="token punctuation">:</span> <span class="token string">"http://localhost:8003"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">//创建数组来存放地址</span><span class="token keyword">var</span> addrs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> addrMap <span class="token punctuation">{</span>addrs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>addrs<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span>gee <span class="token operator">:=</span> <span class="token function">createGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> api <span class="token punctuation">{</span><span class="token keyword">go</span> <span class="token function">startApiServer</span><span class="token punctuation">(</span>apiAddr<span class="token punctuation">,</span> gee<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">startCacheServer</span><span class="token punctuation">(</span>addrMap<span class="token punctuation">[</span>port<span class="token punctuation">]</span><span class="token punctuation">,</span> addrs<span class="token punctuation">,</span> gee<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后进行测试：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build <span class="token operator">-</span>o server<span class="token punctuation">.</span><span class="token operator">/</span>server <span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">8001</span><span class="token punctuation">.</span><span class="token operator">/</span>server <span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">8002</span><span class="token punctuation">.</span><span class="token operator">/</span>server <span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">8003</span> <span class="token operator">-</span>api<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是：哪个缓存服务器与主服务器一起启动，哪个就作为本地服务器：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">00</span> geecache is running at http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8001</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">14</span> geecache is running at http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8002</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">25</span> fontend server is running at http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">9999</span><span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">25</span> geecache is running at http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8003</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">C<span class="token punctuation">:</span>\Users\<span class="token number">11914</span><span class="token operator">&gt;</span>curl <span class="token string">"http://localhost:9999/api?key=Tom"</span><span class="token number">630</span>服务端的结果：<span class="token number">2022</span><span class="token operator">/</span><span class="token number">07</span><span class="token operator">/</span><span class="token number">25</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">07</span><span class="token punctuation">:</span><span class="token number">57</span> <span class="token punctuation">[</span>server http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8003</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Pick peer http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于8003与主服务器一起运行，本地服务器即为8003，因此输出在该终端显示。</p><h2 id="Day6-防止缓存击穿"><a href="#Day6-防止缓存击穿" class="headerlink" title="Day6 防止缓存击穿"></a>Day6 防止缓存击穿</h2><h3 id="缓存雪崩、缓存击穿、缓存穿透"><a href="#缓存雪崩、缓存击穿、缓存穿透" class="headerlink" title="缓存雪崩、缓存击穿、缓存穿透"></a>缓存雪崩、缓存击穿、缓存穿透</h3><pre class="line-numbers language-none"><code class="language-none">缓存雪崩：指的是缓存同一时间失效，导致DB请求量剧增、压力骤增。缓存击穿：指的是当缓存失效的同时有大量的请求缓存穿透：指的是大量请求不存在的缓存<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="创建锁结构"><a href="#创建锁结构" class="headerlink" title="创建锁结构"></a>创建锁结构</h3><p>创建两个锁结构，一个锁用于全局控制，一个锁用于局部控制。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//锁结构，并存储不同key的请求</span><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu sync<span class="token punctuation">.</span>Mutexm  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">}</span><span class="token comment">//key对应的值</span><span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">{</span>wg  sync<span class="token punctuation">.</span>WaitGroupval <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>err <span class="token builtin">error</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Group结构用于存储key-值的映射关系，而值的修改和存储由call结构来实现。<code>sync.WaitGroup</code>用于控制并发，它的使用方法有：</p><blockquote><ol><li>main协程通过调用 <code>wg.Add(delta int)</code> 设置worker协程的个数，然后创建worker协程；</li><li>worker协程执行结束以后，都要调用 <code>wg.Done()</code>；</li><li>main协程调用 <code>wg.Wait()</code> 且被block，直到所有worker协程全部执行结束后返回。</li></ol></blockquote><p>为Group建立方法，该方法通过初始化map，将key-cal对象一一对应：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*避免同一时间创建对象来访问同一缓存设置多个锁的好处在于，多个线程能在删除字典之前同时进入函数中来取值，提高了并发效率*/</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//上锁</span>g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//其他线程在这儿等待赋值成功</span>c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">}</span>c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token comment">//初始化c后解锁</span>g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//赋值</span>c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除键值对</span>g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的作用为：首先上锁，避免多个协程初始化或修改map，而后解锁使得多个协程能够访问map，但此时并没有给call结构赋值，因此通过call结构的锁来限制协程访问值，于是有了<code>sync.WaitGroup</code>的三个方法:<code>Add()、Done()、Wait()</code>。使用wait方法来阻塞协程，通过Add增加协程运作数，调用Done()来表示协程运行完毕，协程运行完毕后被阻塞的协程开始运行。在<code>Do</code>方法中，利用WaitGroup来将协程阻塞在读取call结构里的值这一步，当某个协程赋值完成后其他协程开始读取值并返回值，而在读取之后删除map中的键值对来更新缓存，也能够节省内存。</p><p>然后在读取缓存的Group中加入该锁的机制，引入group结构：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">{</span>name      <span class="token builtin">string</span>getter    Getter              <span class="token comment">//回调函数</span>maincache <span class="token operator">*</span>cache              <span class="token comment">//缓存策略</span>peers     PeerPicker          <span class="token comment">//加载节点</span>loader    <span class="token operator">*</span>singleflight<span class="token punctuation">.</span>Group <span class="token comment">//避免同一时间发出请求，提高并发效率</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>load函数用Do函数来将原来的逻辑包裹起来：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//加载缓存，从远程节点获取或调用回调函数。目前实现回调函数获取</span><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">load</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//采取锁机制，避免同一时间访问</span>viewi<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>loader<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//调用远程节点</span><span class="token keyword">if</span> g<span class="token punctuation">.</span>peers <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">//获取节点对应的客户端</span><span class="token keyword">if</span> peer<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PickPeer</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">//从客户端得到缓存</span><span class="token keyword">if</span> value<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">getFromGetter</span><span class="token punctuation">(</span>peer<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"[GeeCache] Failed to get from peer"</span><span class="token punctuation">,</span> peer<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//调用回调函数</span><span class="token keyword">return</span> g<span class="token punctuation">.</span><span class="token function">getLocally</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> viewi<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">return</span> viewi<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Day7-使用protobuf通信"><a href="#Day7-使用protobuf通信" class="headerlink" title="Day7 使用protobuf通信"></a>Day7 使用protobuf通信</h2>]]></content>
      
      
      <categories>
          
          <category> go7天编程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通讯即时系统</title>
      <link href="/8862.html"/>
      <url>/8862.html</url>
      
        <content type="html"><![CDATA[<p>本文是对<a href="https://www.bilibili.com/video/BV1gf4y1r79E?p=37&amp;vd_source=ee53bed98445adb36a8ecd71465f6240">8小时转职Golang工程师(如果你想低成本学习Go语言)_哔哩哔哩_bilibili</a>里的即时通信系统demo进行总结。</p><h1 id="基础server构建"><a href="#基础server构建" class="headerlink" title="基础server构建"></a>基础server构建</h1><p>本节主要是建立链接。</p><p>通过<code>net.listen</code>来监听端口，通过<code>Listener.Accept()</code>来接收客户端的请求，然后利用go来进行处理多个请求链接。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Server <span class="token keyword">struct</span> <span class="token punctuation">{</span>Ip   <span class="token builtin">string</span>Port <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment">//初始化</span><span class="token keyword">func</span> <span class="token function">NewServer</span><span class="token punctuation">(</span>ip <span class="token builtin">string</span><span class="token punctuation">,</span> port <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Server <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>Server<span class="token punctuation">{</span>Ip<span class="token punctuation">:</span>   ip<span class="token punctuation">,</span>Port<span class="token punctuation">:</span> port<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"链接建立成功"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//启动服务器的接口</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//端口监听</span>Listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s:%d"</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>Ip<span class="token punctuation">,</span> s<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"net.Listen err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//关闭端口</span><span class="token keyword">defer</span> Listener<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token comment">//接收客户端的连接</span>conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> Listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Listener err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// do handler</span><span class="token keyword">go</span> s<span class="token punctuation">.</span><span class="token function">Handler</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后开启端口：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>server <span class="token operator">:=</span> <span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//开启端口</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当客户端发送请求链接时，服务器输出<code>链接建立成功</code>.</p><h1 id="用户上线功能"><a href="#用户上线功能" class="headerlink" title="用户上线功能"></a>用户上线功能</h1><p>在上一节中，建立了服务器与客户端的连接。在这一节中，添加用户并且服务器给客户端返回消息。</p><p>首先创建用户结构，用于存放用户名字、用户地址、用户通道、用户对应的链接。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>Name <span class="token builtin">string</span>Addr <span class="token builtin">string</span>C    <span class="token keyword">chan</span> <span class="token builtin">string</span> <span class="token comment">//用户通道，用于将消息传给用户</span>conn net<span class="token punctuation">.</span>Conn    <span class="token comment">//用户链接</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C通道用于广播消息给所有客户端，而conn链接用于对该客户端的一些操作。</p><p>然后进行初始化：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建一个用户的API</span><span class="token keyword">func</span> <span class="token function">NewUser</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">,</span> server <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token operator">*</span>User <span class="token punctuation">{</span>userAddr <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">RemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//客户端的请求地址</span>user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span>Name<span class="token punctuation">:</span>   userAddr<span class="token punctuation">,</span>Addr<span class="token punctuation">:</span>   userAddr<span class="token punctuation">,</span>C<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>conn<span class="token punctuation">:</span>   conn<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">//启动监听当前user channel消息的goroutine</span><span class="token keyword">go</span> user<span class="token punctuation">.</span><span class="token function">ListenMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> user<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ListenMessage用于一直监听当前通道的消息，并将消息发送给给客户端:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">ListenMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>u<span class="token punctuation">.</span>Cu<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在服务器的结构上，添加用户列表功能和消息功能，用户列表用于存放当前存在的用户，而消息功能用于将消息传递给客户端：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//创建用户列表</span>OnlineMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>UsermapLock   sync<span class="token punctuation">.</span>RWMutex<span class="token comment">//消息广播的channel</span>Message <span class="token keyword">chan</span> <span class="token builtin">string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapLock代表锁，用于当前用户的操作。</p><p>然后在handler里添加用户上线功能，并将用户添加至列表中，用于是并发运行该函数，因此加上锁来防止其他用户一起上线：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// fmt.Println("链接建立成功")</span>user <span class="token operator">:=</span> <span class="token function">NewUser</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token comment">//用户上线，将用户加入到OnlineMap中</span>s<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//上锁</span>s<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>user<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> users<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//广播当前用户上线消息</span>s<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"已上线"</span><span class="token punctuation">)</span><span class="token comment">//当前handler阻塞</span><span class="token comment">// select{}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BroadCase用于广播消息，将消息通过用户通道来传递给用户：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//广播消息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">BroadCase</span><span class="token punctuation">(</span>user <span class="token operator">*</span>User<span class="token punctuation">,</span> msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sendMsg <span class="token operator">:=</span> <span class="token string">"["</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Addr <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msgs<span class="token punctuation">.</span>Message <span class="token operator">&lt;-</span> sendMsg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>且在start方法中开启一个go程来持续监听消息通道，并将通道的消息传递给用户：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//监听消息广播通道，一旦有消息则将消息广播给所有用户</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">ListenMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>msg <span class="token operator">:=</span> <span class="token operator">&lt;-</span>s<span class="token punctuation">.</span>Message <span class="token comment">// 无消息则阻塞</span>s<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//上锁</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>OnlineMap <span class="token punctuation">{</span>user<span class="token punctuation">.</span>C <span class="token operator">&lt;-</span> msg <span class="token comment">//将消息传给所有用户</span><span class="token punctuation">}</span>s<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="用户消息广播机制"><a href="#用户消息广播机制" class="headerlink" title="用户消息广播机制"></a>用户消息广播机制</h1><p>在上一节中已经实现了通过通道来将消息传递给每个客户端，本节主要是服务器读取客户端发来的消息并将消息进行广播，核心方法还是BroadCase：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// fmt.Println("链接建立成功")</span>user <span class="token operator">:=</span> <span class="token function">NewUser</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token comment">//用户上线，将用户加入到OnlineMap中</span>s<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//上锁</span>s<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>user<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> users<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//广播当前用户上线消息</span>s<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"已上线"</span><span class="token punctuation">)</span><span class="token comment">//当前handler阻塞</span><span class="token comment">// select{}</span><span class="token comment">//接收客户端发送的消息并广播给所有用户</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"已下线"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Conn Read err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>msg <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在handler方法中增加一个go程来接收用户发来的消息，利用go程可以保持客户端与服务器互通。在go程中首先创建一个字节数组用于保存链接中的信息，并返回信息的长度，如果长度为0则表示用户断开了连接，因此给其他用户广播该用户已下线并结束这一个go程，如果长度不为0则将消息广播给所有用户，n-1表示信息里面最后一位是换行字符<code>\n</code>。</p><h1 id="用户业务层封装"><a href="#用户业务层封装" class="headerlink" title="用户业务层封装"></a>用户业务层封装</h1><p>在上一节中，在handler中定义了用户上线和下线以及将用户发送的消息进行广播，为了方便后续增加功能，现将这些功能进行封装给用户。</p><p>首先为user结构添加server对象：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//新增Server关联</span>server <span class="token operator">*</span>Server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>增加的意义在于user的方法可以调用server的方法，例如消息传递功能BroadCase。</p><p>定义上线功能，功能里包含用户列表增加新用户、广播用户上线：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//用户上线</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Online</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//用户上线，将用户加入到OnlineMap中</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//上锁</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>u<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> uu<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//广播当前用户上线消息</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token string">"已上线"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理定义下线功能：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//用户下线</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">Offline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//上锁</span><span class="token function">delete</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> <span class="token string">"已下线"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义发送消息功能，将客户端发送给服务器的消息进行封装：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//用户处理消息的业务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">DoMessage</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后handler改为：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Server<span class="token punctuation">)</span> <span class="token function">Handler</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// fmt.Println("链接建立成功")</span>user <span class="token operator">:=</span> <span class="token function">NewUser</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">//用户上线，将用户加入到OnlineMap中</span>user<span class="token punctuation">.</span><span class="token function">Online</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//当前handler阻塞</span><span class="token comment">// select{}</span><span class="token comment">//接收客户端发送的消息并广播给所有用户</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token comment">//读取客户端传来的数据</span>n<span class="token punctuation">,</span> err <span class="token operator">:=</span> conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>user<span class="token punctuation">.</span><span class="token function">Offline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//下线</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> err <span class="token operator">!=</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Conn Read err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>msg <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">DoMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token comment">//用户针对msg进行消息处理</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="在线用户查询"><a href="#在线用户查询" class="headerlink" title="在线用户查询"></a>在线用户查询</h1><p>在上一节中定义消息处理函数DoMessage，现在在方法里增加用户查询功能，当用户输入<code>who</code>时，服务器返回用户在线列表：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">DoMessage</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"who"</span> <span class="token punctuation">{</span><span class="token comment">//查询当前在线用户都有哪些</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"进入该代码块"</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap <span class="token punctuation">{</span>onlineMsg <span class="token operator">:=</span> <span class="token string">"["</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Addr <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"在线...\n"</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span>onlineMsg<span class="token punctuation">)</span><span class="token punctuation">}</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当输入<code>who</code>时，遍历列表中的用户并将这些用户发送给请求的客户端，SendMsg方法用于将信息发送给当前用户：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//给当前User对应的客户端发送消息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">SendMsg</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于消息里存在换行符等制表符，因此调用strings.TrimSpace将主要字符的左右两端的制表符和空格进行去除：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h1><p>在上一节中，定义了查询在线用户功能。在本节中通过增加修改用户名的功能来为客户端发送的修改用户名请求进行处理，消息格式定义为：<code>rename|张三</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//用户处理消息的业务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">DoMessage</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> msg <span class="token operator">==</span> <span class="token string">"who"</span> <span class="token punctuation">{</span><span class="token comment">//查询当前在线用户都有哪些</span><span class="token comment">// fmt.Println("进入该代码块")</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap <span class="token punctuation">{</span>onlineMsg <span class="token operator">:=</span> <span class="token string">"["</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Addr <span class="token operator">+</span> <span class="token string">"]"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token string">"在线...\n"</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span>onlineMsg<span class="token punctuation">)</span><span class="token punctuation">}</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"rename|"</span> <span class="token punctuation">{</span><span class="token comment">//消息格式为："rename|张三"</span><span class="token comment">//将名字进行分离出来</span>newName <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>newName<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"当前用户名已被注册\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除旧的用户</span><span class="token function">delete</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">,</span> u<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>newName<span class="token punctuation">]</span> <span class="token operator">=</span> u <span class="token comment">//将新的名字添加至用户列表中</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>mapLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>u<span class="token punctuation">.</span>Name <span class="token operator">=</span> newNameu<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"您已经更新用户名："</span> <span class="token operator">+</span> u<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">BroadCase</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过strings.Split将消息中的请求名字给提取出来，并且判断该名字是否已被注册，若被注册就给该客户端发消息：<code>当前用户名已被注册\n</code>，否则先删除列表中旧的用户，更新新的用户名，更新完成后给该客户端发送更新后的信息。</p><h1 id="超时强踢功能"><a href="#超时强踢功能" class="headerlink" title="超时强踢功能"></a>超时强踢功能</h1><p>在上一节中，对用户名进行了修改。在本节中加入超时强踢功能，当客户端在一定时间内没有发送消息就默认掉线，服务器就关闭对该客户端的链接：</p><p>添加一个bool通道，用于判断该用户是否活跃：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//用户活跃功能</span>isLive <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当用户发送完消息后，将true发送给该变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">isLive <span class="token operator">&lt;-</span> <span class="token boolean">true</span> <span class="token comment">//用户的任意消息表示该用户活跃</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且设置一个for循环和select用于判断该用户是否活跃，若不活跃则将用户断线：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>isLive<span class="token punctuation">:</span><span class="token comment">//当前用户活跃，重置计时器。</span><span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"你被踢了\n"</span><span class="token punctuation">)</span><span class="token function">close</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>C<span class="token punctuation">)</span> <span class="token comment">//关闭用于服务器给客户端发送消息的通道</span>conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//关闭客户端发送的链接</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当isLive为true，则重置计时器。当超过一定时间，则关闭通道和链接。</p><h1 id="私聊功能"><a href="#私聊功能" class="headerlink" title="私聊功能"></a>私聊功能</h1><p>在上一节中增加了超时强踢功能，本节增加一个私聊功能，通过”to|用户名|消息内容”来判断用户是否想开启私聊。</p><p>首先通过strings.Split来提取要对话的对象，当不存在该对象时则返回对应的消息，否则提取对话内容，并通过SendMsg方法将对话内容发送给指定的用户：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"to|"</span> <span class="token punctuation">{</span><span class="token comment">//消息格式为："to|用户名|消息内容"</span>remoteName <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">//判断格式是否正确</span><span class="token keyword">if</span> remoteName <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"发送内容的格式有误，正确的格式为：to|用户名|消息内容\n"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//判断是否有这个人</span>remoteUser<span class="token punctuation">,</span> ok <span class="token operator">:=</span> u<span class="token punctuation">.</span>server<span class="token punctuation">.</span>OnlineMap<span class="token punctuation">[</span>remoteName<span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"该用户名不存在\n"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>content <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">if</span> content <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>u<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"无消息发送，请输入内容\n"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//给目标用户发消息</span>remoteUser<span class="token punctuation">.</span><span class="token function">SendMsg</span><span class="token punctuation">(</span><span class="token string">"用户 "</span> <span class="token operator">+</span> u<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">" 给您发消息："</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h1><p>在上面几节中主要是对服务器的功能进行，现在定义一个客户端来发送这些请求。</p><p>首先是定义一个结构体Client，用于存放当前用户的相关信息，例如请求的服务器的地址、端口号、用户名、用户链接、菜单选项。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//定义结构，封装功能</span><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">//服务器的Ip地址和接口</span>ServerIp   <span class="token builtin">string</span>ServerPort <span class="token builtin">int</span><span class="token comment">//用户名</span>Name <span class="token builtin">string</span><span class="token comment">//链接</span>conn net<span class="token punctuation">.</span>Conn<span class="token comment">//菜单选项</span>flag <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后利用flag标志来利用命令行输入地址和端口号：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> serverIp <span class="token builtin">string</span><span class="token keyword">var</span> serverPort <span class="token builtin">int</span><span class="token comment">//用于解析命令行的输入参数</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// -ip 127.0.0.1 -port 9090</span>flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serverIp<span class="token punctuation">,</span> <span class="token string">"ip"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string">"设置服务器IP地址(默认为127.0.0.1)"</span><span class="token punctuation">)</span>flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serverPort<span class="token punctuation">,</span> <span class="token string">"port"</span><span class="token punctuation">,</span> <span class="token number">9090</span><span class="token punctuation">,</span> <span class="token string">"设置服务器端口(默认为9090)"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//解析参数</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义init函数来使得在主函数之前定义好地址和端口号。</p><p>然后是菜单选项，对服务器定义的一些功能进行封装，例如公聊、私聊、更新用户名等操作。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//显示用户可选择的菜单</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">var</span> flag <span class="token builtin">int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1.公聊模式"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2.私聊模式"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3.更新用户名"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"0.退出"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag<span class="token punctuation">)</span><span class="token keyword">if</span> flag <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token punctuation">{</span><span class="token comment">//根据用户选择的内容来作出对应的业务</span>c<span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;请输入合法范围内的数字&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//运行业务</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> c<span class="token punctuation">.</span>flag <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token comment">//判断flag是否在可选择的范围里</span><span class="token keyword">for</span> <span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//循环，直到返回true</span><span class="token punctuation">}</span><span class="token keyword">switch</span> c<span class="token punctuation">.</span>flag <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">//公聊模式</span>c<span class="token punctuation">.</span><span class="token function">PublicChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token comment">//私聊模式</span>c<span class="token punctuation">.</span><span class="token function">PrivateChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token comment">//更新用户名</span>c<span class="token punctuation">.</span><span class="token function">UpdateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户输入对应的序号时，开启对应的功能，若用户不想进行操作，则在按0之后关闭链接下线。</p><p>封装的功能如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//更新用户名</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">UpdateName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;请输入用户名"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">.</span>Name<span class="token punctuation">)</span> <span class="token comment">//输入需要修改的名字</span>sendName <span class="token operator">:=</span> <span class="token string">"rename|"</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sendName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"conn write:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">//公聊模式</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">PublicChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//提示用户输入消息</span><span class="token keyword">var</span> chatMsg <span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入消息,exit退出"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chatMsg<span class="token punctuation">)</span><span class="token comment">//发给服务器</span><span class="token keyword">for</span> chatMsg <span class="token operator">!=</span> <span class="token string">"exit"</span> <span class="token punctuation">{</span><span class="token comment">//判断消息是否为空，不为空则发送消息</span><span class="token keyword">if</span> chatMsg <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span><span class="token comment">//将消息写入链接中</span>sendMsg <span class="token operator">:=</span> chatMsg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"conn write err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//继续写入消息</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入消息,exit退出"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chatMsg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//查询列表中的用户</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">SelectUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sendMsg <span class="token operator">:=</span> <span class="token string">"who\n"</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"conn write err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//私聊模式</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">PrivateChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//定义查询的名字和自定义的内容</span><span class="token keyword">var</span> remoteName <span class="token builtin">string</span><span class="token keyword">var</span> chatMsg <span class="token builtin">string</span><span class="token comment">//查询当前用户的列表</span>c<span class="token punctuation">.</span><span class="token function">SelectUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//输入查询的名字</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入对话的用户名称:"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>remoteName<span class="token punctuation">)</span><span class="token comment">//输入对话内容</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入对话内容，exit退出"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chatMsg<span class="token punctuation">)</span><span class="token keyword">for</span> chatMsg <span class="token operator">!=</span> <span class="token string">"exit"</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>chatMsg<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>sendMsg <span class="token operator">:=</span> <span class="token string">"to|"</span> <span class="token operator">+</span> remoteName <span class="token operator">+</span> <span class="token string">"|"</span> <span class="token operator">+</span> chatMsg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sendMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"conn write err:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span>chatMsg <span class="token operator">=</span> <span class="token string">""</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请输入对话内容，exit退出"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chatMsg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了能够读取服务器发送的消息，定义一个方法来接收：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//接收服务器的消息</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Client<span class="token punctuation">)</span> <span class="token function">DealResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//一旦conn有数据，就直接copy到stdout标准输出上，永久阻塞监听</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> c<span class="token punctuation">.</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"链接已关闭"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>io.Copy能够将链接中的消息发送给命令行，若没有消息则进行阻塞等待消息传入。</p><p>最后主函数定义对象并开启链接：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//解析参数</span>flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//请求服务器</span>client <span class="token operator">:=</span> <span class="token function">NewClient</span><span class="token punctuation">(</span>serverIp<span class="token punctuation">,</span> serverPort<span class="token punctuation">)</span><span class="token keyword">if</span> client <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;&gt;&gt;&gt; 链接服务器失败..."</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"链接服务器成功..."</span><span class="token punctuation">)</span><span class="token keyword">go</span> client<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//处理server的回执消息</span>client<span class="token punctuation">.</span><span class="token function">DealResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//启动客户端的业务</span><span class="token comment">// go mustCopy(client.conn, os.Stdin)</span><span class="token comment">// mustCopy(os.Stdout, client.conn)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> go学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
